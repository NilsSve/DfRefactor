Use DataDict.pkg
Use cRDCAutoCreateNewID.pkg
Use RefactorConstants.inc

// We need to create an instance of this class in the cRefactorEngine class.
// That class is instantiated by the cRefactorApplication class - in the End_Construct_Object.
// Hence, we can't have a "Use cFunctionsDataDictionary.pkg" at the top of the
// cRefactorEngine package, as that would render compilation errors in the cRefactorApplicatioon class,
// as that package has a "Use cRefactorEngie.pkg" at the top.
// As a workaround we instead open these files in Construct_Object.
Declare_Datafile SysFile
Declare_Datafile Functions
Declare_Datafile FunctionsA

Object oFunctionTypes is a DescriptionValidationTable
    Set Table_Title to "Function Type"
    Procedure Fill_List
        Forward Send Fill_List
        Send Add_Table_Value eStandard_Function   CS_Standard_Function
        Send Add_Table_Value eRemove_Function     CS_Remove_Function
        Send Add_Table_Value eEditor_Function     CS_Editor_Function
        Send Add_Table_Value eOther_Function      CS_Other_Function
        Send Add_Table_Value eOther_FunctionAll   CS_Other_FunctionAll
        Send Add_Table_Value eReport_Function     CS_Report_Function
        Send Add_Table_Value eReport_FunctionAll  CS_Report_FunctionAll
    End_Procedure
End_Object

Register_Object oFunctions_sl

Class cFunctionsDataDictionary is a DataDictionary

    Import_Class_Protocol cRDCAutoCreateNewIDMixin

    Procedure Construct_Object
        Forward Send Construct_Object

        Property Integer piFunctionType eAll_Functions

        Open SysFile
        Open Functions
        Open FunctionsA

        Set_Attribute DF_FILE_ALIAS of Functions.File_Number to DF_FILE_IS_MASTER
        Set_Attribute DF_FILE_ALIAS of FunctionsA.File_Number to DF_FILE_IS_ALIAS

        Set Main_File to Functions.File_Number
        Set Add_System_File to SysFile.File_Number DD_Lock_On_All

        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True

        Set Key_Field_State Field Functions.ID to True
        Set Field_Prompt_Object Field Functions.ID to oFunctions_sl
        Set Status_Help Field Functions.ID to "Automatically generated ID number"

        Set Field_Prompt_Object Field Functions.Function_Name to oFunctions_sl
        Set Status_Help Field Functions.Function_Name to "the name entered must be exactly the same as the function name itself. Then the code must be added to the cRefactorDbView class (cRefactorDbView.pkg). See class code for standard function parameters."

        Set Status_Help Field Functions.Function_Description to "A short description of what the function does. Appears in grids next to the function name."

        Set Status_Help Field Functions.Function_Help to "Longer explanation on what the function does. Shows when the mouse hovers above a function grid."

        Set Status_Help Field Functions.SummaryText to "Function summary text that appears after a refactoring has run."

        Set Field_Class_Name Field Functions.Selected to "Checkbox"
        Set Field_Checkbox_Values Field Functions.Selected to "1" "0"
        Set Status_Help Field Functions.Selected to "Selected function"

        Set Field_Value_Table Field Functions.Type to oFunctionTypes
        Set Status_Help Field Functions.Type to "The type of function. The type determines what data is send to the function: Line-by-line, as a String array, or all files as a string array."
        Set Field_Class_Name Field Functions.Type to "Combo"

        Set Field_Class_Name Field Functions.bHasParameter to "Checkbox"
        Set Field_Checkbox_Values Field Functions.bHasParameter to "1" "0"
        Set Status_Help Field Functions.bHasParameter to "This is a system function and may not be changed, because it is handled a bit differently."

        Set Field_Class_Name Field Functions.bPrivate to "Checkbox"
        Set Status_Help Field Functions.bPrivate to "If checked it indicates that it is a private function for your company that should not be shared (Exported/Imported) It is contained in its own package file Used inside the #IFDEF CS_Use_MyPackage construct."
        Set Field_Checkbox_Values Field Functions.bPrivate to "1" "0"
        Set Field_Label_Long Field Functions.bPrivate to "Private Function"
        Set Field_Label_Short Field Functions.bPrivate to "Private"

        Set Status_Help Field Functions.Counter to "This will initialize to 0 before each refactor run."
    End_Procedure

    Procedure Field_Defaults
        Forward Send Field_Defaults
        Set Field_Changed_Value Field Functions.Selected to 0
        Set Field_Changed_Value Field Functions.Type to 0
        Set Field_Changed_Value Field Functions.bHasParameter to 0
        Set Field_Changed_Value Field Functions.bPrivate to 0
    End_Procedure

    Procedure Creating
        Integer iID
        Forward Send Creating
        Get AutoCreateNewID File_Field Functions.ID True to iID
    End_Procedure

    Procedure Update
        Integer iIndex
        Boolean bChangeWriteProtected
        String sFunctionName sParam sValue
        String[] asValidations

        If (Functions.bHasParameter = True) Begin
            Move (Trim(Functions.Parameter)) to sParam
            Move (Trim(Functions.ParameterValidation)) to sValue
            If (sValue <> "") Begin
                Move (StrSplitToArray(sValue, ",")) to asValidations
                Move (SearchArray(sParam, asValidations)) to iIndex
                If (iIndex = -1) Begin
                    Send UserError ("Invalid value. Must be one of:" * String(sValue))
                End
            End
        End
        Else Begin
            If (Trim(Functions.Parameter) <> "") Begin
                Send UserError "This function doesn't use a parameter and you are therefore not allowed to enter one."
            End
        End
        Move (Trim(Functions.Function_Help)) to Functions.Function_Help
        Send AdjustSelected (If(Functions.Selected, 1, 0)) Functions.Type
    End_Procedure

    Procedure Backout
        Send AdjustSelected (If(Functions.Selected, -1, 0)) Functions.Type
    End_Procedure

    Procedure AdjustSelected Integer iState Integer iType
        String sFunctionName
        Integer iTotFunctions

        Get TotalNoOfFunctions to iTotFunctions
        Move (Lowercase(Trim(Functions.Function_Name))) to sFunctionName
        If (sFunctionName = "") Begin
            Procedure_Return
        End
        // Handling of special function.
        Case Begin
            Case (sFunctionName = Lowercase(CS_CountSourceLines))
                Move Functions.Selected to SysFile.bCountSourceLines
                Case Break
        Case End

        If (SysFile.SelectedFunctionTotal <= iTotFunctions) Begin
            Add iState to SysFile.SelectedFunctionTotal
        End
        If (SysFile.SelectedFunctionTotal < 0) Begin
            Move 0 to SysFile.SelectedFunctionTotal
        End

        Case Begin
            Case (iType = eStandard_Function)
                Add iState to SysFile.SelectedStandardFunctions
                If (SysFile.SelectedStandardFunctions < 0) Begin
                    Move 0 to SysFile.SelectedStandardFunctions
                End
                Case Break
            Case (iType = eRemove_Function)
                Add iState to SysFile.SelectedRemoveFunctions
                If (SysFile.SelectedRemoveFunctions < 0) Begin
                    Move 0 to SysFile.SelectedRemoveFunctions
                End
                Case Break
            Case (iType = eEditor_Function)
                Add iState to SysFile.SelectedEditorFunctions
                If (SysFile.SelectedEditorFunctions < 0) Begin
                    Move 0 to SysFile.SelectedEditorFunctions
                End
                Case Break
            Case (iType = eReport_Function)
                Add iState to SysFile.SelectedReportFunctions
                If (SysFile.SelectedReportFunctions < 0) Begin
                    Move 0 to SysFile.SelectedReportFunctions
                End
                Case Break
            Case (iType = eReport_FunctionAll)
                Add iState to SysFile.SelectedReportAllFunctions
                If (SysFile.SelectedReportAllFunctions < 0) Begin
                    Move 0 to SysFile.SelectedReportAllFunctions
                End
                Case Break
            Case (iType = eOther_Function)
                Add iState to SysFile.SelectedOtherFunctions
                If (SysFile.SelectedOtherFunctions < 0) Begin
                    Move 0 to SysFile.SelectedOtherFunctions
                End
                Case Break
            Case (iType = eOther_FunctionAll)
                Add iState to SysFile.SelectedOtherAllFunctions
                If (SysFile.SelectedOtherAllFunctions < 0) Begin
                    Move 0 to SysFile.SelectedOtherAllFunctions
                End
                Case Break
        Case End

        SaveRecord SysFile
    End_Procedure

    Procedure ResetSysFile
        Reread SysFile
            Move 0 to SysFile.iCountNumberOfChangedFiles
            Move 0 to SysFile.iCountNumberOfFiles
            Move 0 to SysFile.iCountNumberOfLines
            SaveRecord SysFile
        Unlock
    End_Procedure

    // Pass one of the pre-defined function types;
    { EnumList = "eStandard_Function, eEditor_Function, eReport_Function or eRemove_Function" }
    // Returns number of selected functions for the passed type.
    Function SelectedTypeFunctions Integer iType Returns Integer
        Integer iItems

        Case Begin
            Case (iType = eStandard_Function)
                Move SysFile.SelectedStandardFunctions to iItems
                Case Break
            Case (iType = eEditor_Function)
                Move SysFile.SelectedEditorFunctions to iItems
                Case Break
            Case (iType = eReport_Function)
                Move SysFile.SelectedReportFunctions to iItems
                Case Break
            Case (iType = eRemove_Function)
                Move SysFile.SelectedRemoveFunctions to iItems
                Case Break
            Case Else
                Move SysFile.SelectedFunctionTotal to iItems
        Case End

        Function_Return iItems
    End_Function

    // Finds the first selected Function record for the passed type.
    // Returns True if a match was found.
    // NOTE: It leaves the FunctionsA global record buffer after
    //       a successful find, to be used elsewhere.
    Function FindFirstSelectedFunction Integer iType Returns Boolean
        Clear FunctionsA
        Move True  to FunctionsA.Selected
        Move iType to FunctionsA.Type
        Find gt FunctionsA by Index.4
        Function_Return (Found and FunctionsA.Type = iType)
    End_Function

    // Finds the next selected function for the passed type
    // Returns True if a match was found.
    // It is mandatory to start a loop by first calling the
    // FindFirstSelectedFunction function.
    // NOTE: It leaves the FunctionsA global record buffer after
    //       a successful find, to be used elsewhere.
    Function FindNextSelectedFunction Integer iType Returns Boolean
        Move True  to FunctionsA.Selected
        Move iType to FunctionsA.Type
        Find gt FunctionsA by Index.4
        Function_Return (Found and FunctionsA.Type = iType)
    End_Function

    // Returns the total number of selected functions for all types.
    Function SelectedFunctions Returns Integer
        Function_Return (SysFile.SelectedFunctionTotal)
    End_Function

    // Returns the total number of functions in the database.
    Function TotalNoOfFunctions Returns Integer
        Integer iItems
        Get_Attribute DF_FILE_RECORDS_USED of FunctionsA.File_Number to iItems
        Function_Return iItems
    End_Function

    // Returns the total number of selected functions.
    Function TotalNoSelected Returns Integer
        Integer iItems

        Constraint_Set (Self +5) Clear
        Constrained_Clear eq FunctionsA by Index.1
        Constrain FunctionsA.Selected eq 1
        Constrained_Find First FunctionsA by Index.1
        While (Found)
            Increment iItems
            Constrained_Find Next
        Loop
        Function_Return iItems
    End_Function

    // Zeroe's out all function counters
    Procedure ResetFunctionsCounters
        Send ResetSysFile

        Constraint_Set (Self  + 1) Clear
        Constrained_Clear eq FunctionsA by Index.1
        Constrained_Find First FunctionsA by Index.1
        While (Found)
            Reread FunctionsA
                Move 0 to FunctionsA.Counter
                SaveRecord FunctionsA
            Unlock
            Constrained_Find Next
        Loop
    End_Procedure

    Procedure UpdateDataFromMetaTags tFuncLib[] FuncLibArray
        Integer iSize iCount
        String sFunctionName
        Boolean bOK

        Move True to bOK
        Move (SizeOfArray(FuncLibArray)) to iSize
        Decrement iSize
        For iCount from 0 to iSize
            Move FuncLibArray[iCount].sName to sFunctionName
            Clear FunctionsA
            Move sFunctionName to FunctionsA.Function_Name
            Find eq FunctionsA.Function_Name
            If (Found = True) Begin
                Get UpdateRecordFromMetaTag FuncLibArray[iCount] to bOK
                If (bOK = False) Begin
                    Send UserError DFERR_PROGRAM "Could not update Functions table record from meta-data! Process 'UpdateFromMetaTags' interrupted."
                    Procedure_Return
                End
            End
            Else Begin
                Get CreateNewRecordFromMetaTag FuncLibArray[iCount] to bOK
                If (bOK = False) Begin
                    Send UserError DFERR_PROGRAM "Could not create new Functions table record from meta-data! Process 'UpdateFromMetaTags' interrupted."
                    Procedure_Return
                End
            End
        Loop

    End_Procedure

    Function CreateNewRecordFromMetaTag tFuncLib FuncLib Returns Boolean
        Integer iID
        String[] asEnumList
        String sParamValidation

        Move False to Err
        Move FuncLib.FuncEnumList.asEnumList to asEnumList
        Get SanitizeStringArrayValues asEnumList to asEnumList
        Move (StrJoinFromArray(asEnumList, ","))   to sParamValidation

        Clear FunctionsA
        Get AutoCreateNewID File_Field FunctionsA.ID to iID
        Move FuncLib.sName          to FunctionsA.Function_Name
        Move FuncLib.sHelp          to FunctionsA.Function_Help
        Move FuncLib.eFunctionType  to FunctionsA.Type
        Move FuncLib.sSummary       to FunctionsA.SummaryText
        Move FuncLib.bFuncEnumList  to FunctionsA.bHasParameter
        Move FuncLib.FuncEnumList.sInitialValue  to FunctionsA.Parameter
        Move FuncLib.FuncEnumList.sParamHelp     to FunctionsA.ParameterHelp
        Move sParamValidation                    to FunctionsA.ParameterValidation
        SaveRecord FunctionsA
        Function_Return (not(Err))
    End_Function

    Function UpdateRecordFromMetaTag tFuncLib FuncLib Returns Boolean
        Integer iID
        String[] asEnumList
        String sParamValidation

        Move False to Err
        Move FuncLib.FuncEnumList.asEnumList to asEnumList
        Get SanitizeStringArrayValues asEnumList to asEnumList
        Move (StrJoinFromArray(asEnumList, ",")) to sParamValidation

        Reread
            If (Trim(FuncLib.sHelp) <> Trim(FunctionsA.Function_Help)) Begin
                Move FuncLib.sHelp to FunctionsA.Function_Help
            End
            If (Trim(FuncLib.eFunctionType) <> Trim(FunctionsA.Type)) Begin
                Move FuncLib.eFunctionType to FunctionsA.Type
            End
            If (Trim(FuncLib.sSummary) <> Trim(FunctionsA.SummaryText)) Begin
                Move FuncLib.sSummary to FunctionsA.SummaryText
            End
            If (Trim(FuncLib.bFuncEnumList) <> Trim(FunctionsA.bHasParameter)) Begin
                Move FuncLib.bFuncEnumList to FunctionsA.bHasParameter
            End
            If (Trim(FuncLib.FuncEnumList.sInitialValue) <> Trim(FunctionsA.Parameter)) Begin
                Move FuncLib.FuncEnumList.sInitialValue to FunctionsA.Parameter
            End
            If (Trim(FuncLib.FuncEnumList.sParamHelp) <> Trim(FunctionsA.ParameterHelp)) Begin
                Move FuncLib.FuncEnumList.sParamHelp    to FunctionsA.ParameterHelp
            End
            If (Trim(sParamValidation) <> Trim(FunctionsA.ParameterValidation)) Begin
                Move sParamValidation to FunctionsA.ParameterValidation
            End
            SaveRecord FunctionsA
        Unlock
        Function_Return (not(Err))
    End_Function

    // Removes any spaces from array string values.
    // Also removes and quotes or double-quotes ("') characters.
    Function SanitizeStringArrayValues String[] asEnumList Returns String[]
        Integer iSize iCount
        Move (SizeOfArray(asEnumList)) to iSize
        Decrement iSize
        For iCount from 0 to iSize
            Move (Trim(asEnumList[iCount])) to asEnumList[iCount]
            Move (Replaces('"', asEnumList[iCount], "")) to asEnumList[iCount]
            Move (Replaces("'", asEnumList[iCount], "")) to asEnumList[iCount]
        Loop
        Function_Return asEnumList
    End_Function

End_Class

#IFDEF Is$WebApp
#ELSE
Use Functions.sl
#ENDIF
