Use DataDict.pkg  
Use RefactorFunctionConstants.inc

Open SysFile    
Open Functions
Open FunctionsA
Set_Attribute DF_FILE_ALIAS of Functions.File_Number to DF_FILE_IS_MASTER
Set_Attribute DF_FILE_ALIAS of FunctionsA.File_Number to DF_FILE_IS_ALIAS

Struct tFunctionTypes
    Integer iAll_Functions
    Integer iStandard_Function
    Integer iRemove_Function
    Integer iEditor_Function
    Integer iReport_Function   
    Integer iReport_FunctionAll
    Integer iOther_Function
    Integer iOther_FunctionAll
End_Struct

Enum_List
    Define eAll_Functions         for 0 
    Define eStandard_Function     for 1   // One source line at a time will be passed for these functions.
    Define eRemove_Function       for 2   // One source line at a time will be passed for these functions.
    Define eEditor_Function       for 3   // A source file as a string array will be passed
    Define eReport_Function       for 4   // A source file as a string array. Makes no source changes.
    Define eReport_FunctionAll    for 5   // Makes no source changes.
    Define eOther_Function        for 6   // A source file as a string array will be passed.
    Define eOther_FunctionAll     for 7   // All selected files as a string array will be passed. 
End_Enum_List

Define CS_All_Functions             for "All functions"
Define CS_Standard_Function         for "Standard - Line-by-line"
Define CS_Remove_Function           for "Remove   - Line-by-line"
Define CS_Editor_Function           for "Editor   - One File"
Define CS_Report_Function           for "Report   - One File"   // Makes no source changes.
Define CS_Report_FunctionAll        for "Report   - All Files"  // Makes no source changes.
Define CS_Other_Function            for "Other    - One File"
Define CS_Other_FunctionAll         for "Other    - All Files"

Object oFunctionTypes is a DescriptionValidationTable
    Procedure Fill_List
        Forward Send Fill_List
        Send Add_Table_Value eStandard_Function   CS_Standard_Function
        Send Add_Table_Value eRemove_Function     CS_Remove_Function
        Send Add_Table_Value eEditor_Function     CS_Editor_Function
        Send Add_Table_Value eReport_Function     CS_Report_Function
        Send Add_Table_Value eReport_FunctionAll  CS_Report_FunctionAll
        Send Add_Table_Value eOther_Function      CS_Other_Function
        Send Add_Table_Value eOther_FunctionAll   CS_Other_FunctionAll
    End_Procedure
End_Object

Register_Object oFunctions_sl

Class cFunctionsDataDictionary is a DataDictionary
    
    Procedure Construct_Object
        Forward Send Construct_Object        
        
        Property Integer piFunctionType eAll_Functions

        Set Main_File to Functions.File_Number
        Set Add_System_File to SysFile.File_Number DD_Lock_On_All

        Set Foreign_Field_Option DD_KEYFIELD DD_NOPUT to True
        Set Foreign_Field_Option DD_KEYFIELD DD_FINDREQ to True
        Set Foreign_Field_Option DD_INDEXFIELD DD_NOPUT to True
        Set Foreign_Field_Option DD_DEFAULT DD_DISPLAYONLY to True

        Set Field_Auto_Increment Field Functions.ID to File_Field SysFile.Next_Functions_ID
        Set Key_Field_State Field Functions.ID to True
        Set Field_Prompt_Object Field Functions.ID to oFunctions_sl
        Set Status_Help Field Functions.ID to "Automatically generated ID number"

        Set Field_Prompt_Object Field Functions.Function_Name to oFunctions_sl
        Set Status_Help Field Functions.Function_Name to "the name entered must be exactly the same as the function name itself. Then the code must be added to the cRefactorDbView class (cRefactorDbView.pkg). See class code for standard function parameters."

        Set Status_Help Field Functions.Function_Description to "A short description of what the function does. Appears in grids next to the function name."

        Set Status_Help Field Functions.Function_Help to "Longer explanation on what the function does. Shows when the mouse hovers above a function grid."

        Set Status_Help Field Functions.Function_Summary to "Function summary text that appears after a refactoring has run."

        Set Field_Class_Name Field Functions.Selected to "Checkbox"
        Set Field_Checkbox_Values Field Functions.Selected to "1" "0"
        Set Status_Help Field Functions.Selected to "Selected function"

        Set Field_Value_Table Field Functions.Type to oFunctionTypes
        Set Status_Help Field Functions.Type to "The type of function. The type determines what data is send to the function: Line-by-line, as a String array, or all files as a string array."
        Set Field_Class_Name Field Functions.Type to "Combo"

        Set Status_Help Field Functions.Count to "Counter for the current refactoring run."

        Set Field_Class_Name Field Functions.bHasParameter to "Checkbox"
        Set Field_Checkbox_Values Field Functions.bHasParameter to "1" "0"
        Set Status_Help Field Functions.bHasParameter to "This is a system function and may not be changed, because it is handled a bit differently."

    End_Procedure

    Procedure Field_Defaults
        Forward Send Field_Defaults
        Set Field_Changed_Value Field Functions.Selected to 0
        Set Field_Changed_Value Field Functions.Type to 0
        Set Field_Changed_Value Field Functions.bHasParameter to 0
    End_Procedure  
    
    Procedure Update
        Integer iType iIndex
        Boolean bState bChangeWriteProtected 
        String sFunctionName sParam sValue
        String[] asValidations
        
        Move Functions.Selected to bState
        Move Functions.Type to iType
        Send AdjustSelected bState iType
        Move (Trim(Functions.Function_Name)) to sFunctionName
        If (not(Lowercase(Functions.Function_Help) contains Lowercase("Function:" * String(sFunctionName)))) Begin
            Move (Trim(Functions.Function_Help) * String("(Function:" * String(sFunctionName) + ")")) ;
                to Functions.Function_Help
        End      
        
        If (Functions.bHasParameter = True) Begin
            Move (Trim(Functions.Parameter)) to sParam    
            Move (Trim(Functions.ParameterValidation)) to sValue
            Move (StrSplitToArray(sValue, ",")) to asValidations
            Move (SearchArray(sParam, asValidations)) to iIndex
            If (iIndex = -1) Begin
                Send UserError ("Invalid value. Must be one of:" * String(sValue))
            End
        End 
        Else Begin
            If (Trim(Functions.Parameter) <> "") Begin
                Send UserError "This function doesn't use a parameter and you are therefore not allowed to enter one."
            End
        End
    End_Procedure
    
    Procedure Backout
        Integer iType iState
        Move Functions.Selected to iState
        Move Functions.Type to iType
        Send AdjustSelected (-iState) iType
    End_Procedure  
    
    Procedure AdjustSelected Integer iState Integer iType 
        String sFunctionName
        Integer iTotFunctions

        Get TotalNoOfFunctions to iTotFunctions
        Move (Lowercase(Trim(Functions.Function_Name))) to sFunctionName  
        // For handling of special functions.
        Case Begin
            Case (sFunctionName = Lowercase(CS_CountSourceLines)) 
                Move Functions.Selected to SysFile.bCountSourceLines  
                Case Break
            Case (sFunctionName = Lowercase(CS_EditorDropSelf))
                Move Functions.Selected to SysFile.bEditorDropSelf
                Case Break
        Case End
         
        If (iState = 0 or SysFile.SelectedFunctionTotal < iTotFunctions) Begin
            Add iState to SysFile.SelectedFunctionTotal
        End
            
        Case Begin
            Case (iType = eStandard_Function) 
                Add iState to SysFile.SelectedStandardFunctions
                Case Break
            Case (iType = eRemove_Function) 
                Add iState to SysFile.SelectedRemoveFunctions
                Case Break
            Case (iType = eEditor_Function) 
                Add iState to SysFile.SelectedEditorFunctions
                Case Break
            Case (iType = eReport_Function) 
                Add iState to SysFile.SelectedReportFunctions
                Case Break
            Case (iType = eReport_FunctionAll) 
                Add iState to SysFile.SelectedReportAllFunctions
                Case Break
            Case (iType = eOther_Function) 
                Add iState to SysFile.SelectedOtherFunctions
                Case Break
            Case (iType = eOther_FunctionAll) 
                Add iState to SysFile.SelectedOtherAllFunctions
                Case Break
        Case End      
            
        SaveRecord SysFile
    End_Procedure
    
    Procedure SelectAll
        Send SelectItems True
    End_Procedure
    
    Procedure DeSelectAll
        Send SelectItems False
    End_Procedure
    
    Procedure SelectItems Boolean bSelect
        Boolean bFound
        Integer iItems iSelected iType iID
        tFunctionTypes FunctionsTypes
        
        Get piFunctionType to iType
        If (bSelect = True) Begin
            Move 1 to iSelected
        End          
        Else Begin
            Move -1 to iSelected
        End
        
        Move Functions.ID to iID

        Constraint_Set (Self) Clear  
        Constrained_Clear eq Functions by Index.2 
        If (iType <> eAll_Functions) Begin
            Constrain Functions.Type eq iType
        End
        Constrained_Find First Functions by Index.2
        While (Found)
            Reread Functions SysFile    
                Move bSelect to Functions.Selected
                SaveRecord Functions
                Send AdjustSelected bSelect iType
            Unlock
            Constrained_Find Next
        Loop

        If (bSelect = False) Begin
            Reread SysFile
                Move 0 to SysFile.SelectedFunctionTotal
                Move 0 to SysFile.SelectedStandardFunctions          
                Move 0 to SysFile.SelectedEditorFunctions          
                Move 0 to SysFile.SelectedReportFunctions          
                Move 0 to SysFile.SelectedReportAllFunctions          
                Move 0 to SysFile.SelectedRemoveFunctions          
                Move 0 to SysFile.SelectedOtherFunctions          
                Move 0 to SysFile.SelectedOtherAllFunctions          
                SaveRecord SysFile
            Unlock
        End

    End_Procedure
    
    // Pass one of the pre-defined function types;
    //   eStandard_Function, eEditor_Function, eReport_Function or eRemove_Function  
    // Returns number of selected functions for the passed type.
    Function SelectedTypeFunctions Integer iType Returns Integer
        Integer iItems        
        
        Case Begin
            Case (iType = eStandard_Function) 
                Move SysFile.SelectedStandardFunctions to iItems
                Case Break
            Case (iType = eEditor_Function) 
                Move SysFile.SelectedEditorFunctions to iItems
                Case Break
            Case (iType = eReport_Function) 
                Move SysFile.SelectedReportFunctions to iItems
                Case Break
            Case (iType = eRemove_Function) 
                Move SysFile.SelectedRemoveFunctions to iItems
                Case Break
            Case Else 
                Move SysFile.SelectedFunctionTotal to iItems                               
        Case End

        Function_Return iItems
    End_Function   
    
    // Finds the first selected Function record for the passed type.
    // Returns True if a match was found.
    // NOTE: It leaves the FunctionsA global record buffer after
    //       a successful find, to be used elsewhere.
    Function FindFirstSelectedFunction Integer iType Returns Boolean
        Clear FunctionsA
        Move True  to FunctionsA.Selected
        Move iType to FunctionsA.Type
        Find gt FunctionsA by Index.4
        Function_Return (Found and FunctionsA.Type = iType)
    End_Function
    
    // Finds the next selected function for the passed type
    // Returns True if a match was found.
    // It is mandatory to start a loop by first calling the 
    // FindFirstSelectedFunction function.
    // NOTE: It leaves the FunctionsA global record buffer after
    //       a successful find, to be used elsewhere.
    Function FindNextSelectedFunction Integer iType Returns Boolean
        Move True  to FunctionsA.Selected
        Move iType to FunctionsA.Type        
        Find gt FunctionsA by Index.4
        Function_Return (Found and FunctionsA.Type = iType)
    End_Function
    
    // Returns the total number of selected functions for all types.
    Function SelectedFunctions Returns Integer
        Function_Return (SysFile.SelectedFunctionTotal)
    End_Function  
    
    // Returns the total number of functions in the database.
    Function TotalNoOfFunctions Returns Integer
        Integer iItems
        Get_Attribute DF_FILE_RECORDS_USED of FunctionsA.File_Number to iItems
        Function_Return iItems
    End_Function
    
    // Zeroe's out all line counters
    Procedure ResetLineCounters
        Constraint_Set (Self  + 1) Clear  
        Constrained_Clear eq FunctionsA by Index.1
        Constrained_Find First FunctionsA by Index.1
        While (Found)
            Reread FunctionsA
                Move 0 to FunctionsA.Count
                SaveRecord FunctionsA
            Unlock
            Constrained_Find Next
        Loop                                 
        Reread SysFile
            Move 0 to SysFile.iCountNumberOfFiles  
            Move 0 to SysFile.iCountNumberOfChangedFiles
            Move 0 to SysFile.iCountNumberOfLines    
            Move 0 to SysFile.iCountProjectObjectStructures
            Move 0 to SysFile.iCountRemoveBlankLines
            Move 0 to SysFile.iCountUnusedSourceFiles 
            Move 0 to SysFile.iCountUnusedLocals
            SaveRecord SysFile
        Unlock
    End_Procedure
    
End_Class

#IFDEF Is$WebApp
#ELSE
Use Functions.sl
#ENDIF
