Use cIterator_Mixin.pkg

//This is an iterator object that attaches to an array. Use the procedure
//AttachArray to attach an array variable. Then the Iterator interface is
//available for the array by using the cArrayIterator object.
//The class is abstract, and needs to be instantiated by using the various
//array type subclasses, e.g. cArrayIteratorString, cArrayIteratorInteger
//Doc/Classtype=Abstract
Class cArrayIterator is a cObject
    Procedure Construct_Object
        Forward Send Construct_Object
        Send Define_cIterator_Mixin
        
        {Visibility = Private}
        Property Integer piArrayType
        {Visibility = Private}
        Property String[] psArray
    End_Procedure
    
    Import_Class_Protocol cIterator_Mixin
    
    //Attaches an array variable to the cArrayIterator object.
    //This procedure has to be instantiated in the various array type subclasses
    //Doc/Interface=Virtual
    Procedure AttachArray
        
    End_Procedure
     
End_Class

//Integer array instantiation class of cArrayIterator
Class cArrayIteratorInteger is a cArrayIterator
    Procedure Construct_Object
        Forward Send Construct_Object
        {Visibility = Private}
        Property Integer[] piArray
    End_Procedure
    
    //Attaches an array variable to the cArrayIterator object. After updating
    //the array, this procedure needs to be called before using any part of the
    //iterator interface.
    //@param iArray Integer Array variable to attach
    { Visibility=Public }
    Procedure AttachArray Integer[] iArray
        Set piArray to iArray
    End_Procedure
    
    { Visibility=Public }
    Function RetrieveArray Returns Integer[]
        Integer[] iArray
        Get piArray to iArray
        Function_Return iArray
    End_Function

    //Find next element in collection
    //@return If next element is found: True. If not: False
    { Visibility=Public }
    Function IteratorMoveNext Returns Boolean
        Integer iCurrent
        Integer[] iArray
        Get piArray to iArray
        //Implement code to find next element in collection, then set piCurrent
        //to point to this element. Return true if found.
        Get piCurrent to iCurrent
        If (iCurrent >= (SizeOfArray(iArray) - 1)) Function_Return False
        Else Begin
            Set piCurrent to (iCurrent + 1)
            Function_Return True
        End
    End_Function
    
    //Add element to collection
    { Visibility=Public }
    Procedure AddToArray Integer iValue
        Integer[] iArray
        Get piArray to iArray
        Move iValue to iArray[SizeOfArray(iArray)]
        Set piArray to iArray
    End_Procedure
    
    //Returns current array value
    { Visibility=Public }
    Function CurrentArrayValue Returns Integer
        Integer iCurrent
        Integer[] iArray
        Get piArray to iArray
        Get piCurrent to iCurrent
        Function_Return iArray[iCurrent]
    End_Function
    
    //Returns number of items in collection
    { Visibility=Public }
    Function NumberOfItems Returns Integer
        Integer[] iArray
        Get piArray to iArray
        Function_Return (SizeOfArray(iArray))
    End_Function
End_Class

//String array instantiation class of cArrayIterator
Class cArrayIteratorString is a cArrayIterator
    Procedure Construct_Object
        Forward Send Construct_Object
        {Visibility = Private}
        Property String[] psArray
    End_Procedure // Construct_Object
    
    //Attaches an array variable to the cArrayIterator object. After updating
    //the array, this procedure needs to be called before using any part of the
    //iterator interface.
    //@param iArray Integer Array variable to attach
    Procedure AttachArray String[] sArray
        Set psArray to sArray
    End_Procedure // AttachArray

    //Find next element in collection
    //@return If next element is found: True. If not: False
    //Doc/ Interface=Public
    Function IteratorMoveNext Returns Boolean
        Integer iCurrent
        String[] sArray
        Get psArray to sArray
        //Implement code to find next element in collection, then set piCurrent
        //to point to this element. Return true if found.
        Get piCurrent to iCurrent
        If (iCurrent >= (SizeOfArray(sArray) - 1)) Function_Return False
        Else Begin
            Set piCurrent to (iCurrent + 1)
            Function_Return True
        End
    End_Function // IteratorReset
    
    //Add element to collection
    //Doc/ Interface=Public
    Procedure AddToArray String sValue
        String[] sArray
        Get psArray to sArray
        Move sValue to sArray[SizeOfArray(sArray)]
        Set psArray to sArray
    End_Procedure
    
    //Returns current array value
    //Doc/ Interface=Public
    Function CurrentArrayValue Returns String
        Integer iCurrent
        String[] sArray
        Get psArray to sArray
        Get piCurrent to iCurrent
        Function_Return sArray[iCurrent]
    End_Function
    
End_Class    // cArrayIteratorString
