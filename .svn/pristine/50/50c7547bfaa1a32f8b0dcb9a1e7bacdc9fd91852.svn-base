//****************************************************************************
// $Module type: Class
// $Module name: cRDCCJGridColumnSuggestion
// $Author     : Nils G. Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2014-08-28 @ 17:46
//
// Description : Grid column used to create search fields. While typing,
//               suggestions are shown below the grid cell in a list.
//
// Note        : This is the cCJGridColumn (non data-bound) counterpart of the
//               cDbCJGridColumnSuggestion class to be used inside a cCJGrid
//               object.
//
// Compatability: DataFlex 18.0 and later.
//
// Usage:
//               Use cCJGridColumnSuggestion.pkg
//               Object oGrid is a cCJGrid
//                  Object oGridColumnSuggestion is cCJGridColumnSuggestion
//                      Set piWidth to 200
//                      Set psCaption to "Suggestion list column"
//                  End_Object
//               End_Object
//
//
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License.
// License: LGPLv3 - GNU LESSER GENERAL PUBLIC LICENSE Version 3 - http://www.gnu.org/licenses/lgpl.txt
//
// $Rev History:
//    2014-08-28  Module header created
//****************************************************************************
Use cCJGridColumn.pkg
Use WinSuggestion.pkg
Use cCJGridColumnEdit.pkg

// This is the edit control that gets embedded in the cCJGridColumnSuggestion object.

{ Visibility = Private }
Class cMyCJGridColumnSuggestionEdit is a cCJGridColumnEdit

    Import_Class_Protocol cSuggestionControl_mixin

    Procedure Construct_Object
        Forward Send Construct_Object
        Send Define_cSuggestionControl_mixin
        // There really isn't any point in having a right-click menu in the suggestion form
        // when in edit mode in the grid.
        Set Floating_Menu_Object to 0

        Property Boolean private.pbSearchMode True
        // Needed to handle cancel of popup suggestion list.
        On_Key Key_Escape Send EscPressed
    End_Procedure

    Procedure Page Integer iPageObject
        Boolean bSearchMode

        Forward Send Page iPageObject

        // Get search mode from parent suggestion list column object.
        Get pbSearchMode to bSearchMode
        Set private.pbSearchMode to bSearchMode
    End_Procedure

    // Called when closing a suggestion form. With grids we must also make sure that the
    // edit is canceled.
    Procedure CancelEditIfGrid
        Send CancelEdit
    End_Procedure

    Procedure EscPressed
        Handle hoGrid
        Get phoGrid to hoGrid
        Send DeActivateSuggestionList
        // We also want to "undo" any entered cell value.
        If (private.pbSearchMode(Self) = True) Begin
            Send Request_ClearRow of hoGrid
        End
    End_Procedure

    // We must kill this message to avoid recursion when using the mouse (mouse_up)
    // when selecting an item from the suggestion list.
    Procedure OnSetFocus
    End_Procedure

    // Augmented to reset the entered suggestion value to the original cell value.
    Procedure OnKillFocus
        String sOrgString
        Boolean bDeactivating bNoKill
        Handle hoGrid hoFocus hoFocusPre
        Handle hoDataSource
        tDataSourceRow[] TheData

        Get phoGrid to hoGrid
        Get pbInDeactivate to bDeactivating

        Get pbNoKill to bNoKill
        If (bNoKill = True) Begin
            Procedure_Return
        End

        // We will (also) get here after a mouse click (mouse_up). By then the datasource value
        // has been changed to what has been entered as the search value.
        // So we need to reset the column value to its original value.
        If (private.pbSearchMode(Self) = True) Begin
            Send ResetSelectedRow of (phoDataSource(hoGrid))
        End

        If (bDeactivating  = False) Begin
            Get Focus to hoFocusPre
            Send Deactivate 0
            Get Focus to hoFocus
            // If the focus is the grid and the orignal focus was this control then
            // probably this kill focus is a result of switching to something outside
            // of this application. Whatever it is, it's best to just repaint the screen
            // so any change is updated
            If (hoFocus=hoGrid and hoFocusPre = Self) Begin
                // When deactivate returns the focus to the grid, it does not reset the COM control
                // as the active control. We will do that here with OnDfSetFocus.
                Send onDfFocus of hoGrid 1 0
                Send ComRedraw of hoGrid
            End
            // If the focus is not on the grid it has gone to other place under the apps
            // control. We can do a deferred redraw.
            Else If (hoFocus <> hoGrid) Begin
                Send DeferredRedraw of hoGrid
            End
            // Else focus was already moved to the grid. We should not need to redraw
        End

        // 26.04.2015 the value of the column where the search string is
        // inserted has to get his original value
        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Get psOrgString to sOrgString
        Move sOrgstring to TheData[SelectedRow(phoDataSource(hoGrid))].sValue[piColumnId(Self)]
        Send ReInitializeData TheData True

        Set phoCustomEdit of hoGrid to 0

    End_Procedure

    // Message override.
    // The cCJGrid class can send a Deactivate message to a column object without
    // the required integer parameter (bug) for this message. Check & adjust
    // to avoid runtime error.
    Procedure Deactivate Integer eDeactivateScope Returns Integer
        Handle eScope
        Integer iError
        If (num_arguments = 0) Begin
            Move Scope_Type to eScope
        End
        Else Begin
            Move eDeactivateScope to eScope
        End
        Forward Get msg_Deactivate eScope to iError
        Procedure_Return iError
    End_Procedure

End_Class

Class cRDCCJGridColumnSuggestion is a cCJGridColumn

    Import_Class_Protocol cSuggestion_mixin

    Procedure Construct_Object
        Forward Send Construct_Object

        Send Define_cSuggestion_mixin
        Set phcEditClass to (RefClass(cMyCJGridColumnSuggestionEdit))
        Property Integer piNum
        Property String psOrgString

        Set pbEditable to True
        Set peSuggestionMode to smCustom
        // Show suggestion list after first character is entered
        Set piStartAtChar to 1

        // Best guess. In most cases this is probably what is most beneficial to the user.
        Set pbFullText to True

        // This will be automatically filled with grid column data the
        // first time the suggestion list gets populated.
        Property String[] psValuesArray

        // pbSearchMode = True means that the suggestion list works like a selection list
        // i.e. the entered "search value" will get discarded when the suggestion
        // list is closed, thus restoring the original grid column value.
        // If set to False the entered search value will be left untouched iff (if-anl-only-if)
        // the escape (cancel) key is pressed.
        Property Boolean pbSearchMode True

    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object
        // Can't have a prompt list connected here as it gets in the way for suggestion list logic.
        Set Prompt_Button_Mode to PB_PromptOff
    End_Procedure

    { Visibility=Private }
    // Is called by the OnFindSuggestions event and
    // will fill the psValuesArray if empty from the
    // grids data-source object (current column values).
    Function ColumnStringArray Returns String[]
        String[] sIds
        Integer i iRows iCol
        Handle hoDataSource
        tDataSourceRow[] TheData

        Get psValuesArray to sIds
        Move (SizeOfArray(TheData)) to iRows
        If (iRows > 0) Begin
            // Then array has already been filled.
            Function_Return sIds
        End

        Get piColumnId to iCol
        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Set psOrgString to TheData[SelectedRow(phoDataSource(hodataSource))].sValue[iCol]
        Move (SizeOfArray(TheData)) to iRows
        Decrement iRows
        For i from 0 to iRows
            Move TheData[i].sValue[iCol] to sIds[i]
        Loop

        // Set class property if not done before.
        // 25.04.2015: the suggestionlist has to be sorted otherwise
        // in the Function FindColumnValue of cCJGrid.pkg the search
        // For the correct line is stopped to early.
        Move (SortArray(sIds,Desktop,RefFunc(DFSTRICMP))) to sIds
        Set psValuesArray to sIds

        Function_Return sIds
    End_Function

    // Custom code to find all matches for a search
    Procedure OnFindSuggestions String sSearch tSuggestion[] ByRef aSuggestions
        String[] sIds
        Integer i iLen iIds iCount

        Move (Lowercase(sSearch)) to sSearch
        Move (Length(sSearch)) to iLen
        Get ColumnStringArray to sIds
        Move (SizeOfArray(sIds)-1) to iIds
        For i from 0 to iIds
            If (Lowercase(sIds[i]) contains sSearch) Begin
                Move sIds[i] to aSuggestions[iCount].sRowId
                Move sIds[i] to aSuggestions[iCount].aValues[0]
                Increment iCount
            End
        Loop
    End_Procedure

    // Do when a selection has been done; either by hitting the return
    // key or by a mouse click (mouse_up).
    Procedure OnSelectSuggestion String sSearch tSuggestion Suggestion
        String sValue
        tDataSourceRow[] MyData
        Handle hoDataSource

        Get phoDataSource to hoDataSource
        Move Suggestion.sRowId to sValue

        Get DataSource of hoDataSource to MyData
        //25.04.2015 Nils had "True 0"
        //to disable bFindGe False 0 is needed otherwise less values stop the search
        Send RequestFindColumnValue (piColumnId(Self)) sValue False 0
        Send ReInitializeData MyData True
        Set piNum to 0
    End_Procedure

End_Class
