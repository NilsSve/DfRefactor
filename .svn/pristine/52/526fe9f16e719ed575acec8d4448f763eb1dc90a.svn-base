Use seq_chnl.pkg

//Sequential file. Implements low-level features (channels!)
//This is an abstract class, and should only be instantiated through its
//subclasses cSeqInputFile and cSeqOutputFile.
//Doc/ClassType=Abstract
Class cSeqFile is a cObject
    Procedure Construct_Object
        Forward Send Construct_Object
        { Visibility = Private }
        Property Integer piChannel DF_SEQ_CHANNEL_NOT_AVAILABLE
    End_Procedure
    
    //Gets an available channel, and sets the internal channel property
    //@Return True if succesful, false if not.
    { Visibility = Private }
    Function AssignChannel returns Boolean
        Boolean bOK
        Integer iChannel
        Move (Seq_New_Channel()) to iChannel
        set piChannel to iChannel
        Move ((iChannel >= DF_SEQ_CHANNEL_MIN) and ;
              (iChannel <= DF_SEQ_CHANNEL_MAX) and ;
              (iCHannel <> DF_SEQ_CHANNEL_NOT_AVAILABLE)) to bOK
        Function_Return bOK
    End_Function
    
    //Releases the assigned channel. Sets the internal channel property to
    //DF_SEQ_CHANNEL_NOT_AVAILABLE
    { Visibility = Private }
    Procedure ReleaseChannel
        Integer iChannel
        Get piChannel to iChannel
        Send Seq_Release_Channel iChannel
        Set piChannel to DF_SEQ_CHANNEL_NOT_AVAILABLE
    End_Procedure
     
    //Interface to be subclassed.
    Procedure CloseFile
    End_Procedure
     
End_Class

Use cIterator_Mixin.pkg

//This class is an object-oriented approach to sequential reading from a file.
//A cSeqInputFile object handles channel delegation and release, and introduces
//the Iterator interface for reading the lines of the file sequentially.
//
//Open the file for input by calling the OpenInput function.
//Read lines from the file by calling IteratorMoveNext or ReadNextLine.
//Get the value of the current line from CurrentLine.
//The destructor will close the file if you do not call CloseFile explicitly.
Class cSeqInputFile is a cSeqFile
    Procedure Construct_Object
        Forward Send Construct_Object
        Send Define_cIterator_Mixin // Constructor method

        { Visibility = Public }
        //Keep the file open (and keep the channel) until the file is closed?
        //Todo: Implement handling of pbKeepOpen
        Property Boolean pbKeepOpen True
        { Visibility = Private}
        //Is the file open?
        Property Boolean pbFileOpen False
        { Visibility = Private }
        Property Integer piChannel
        { Visibility = Private }
        //Filename including path and extension
        Property String psCompleteFilename
        { Visibility = Private }
        //Current line, read from the file
        Property String psCurrentLine
        { Visibility = Private }
        //Convert to Oem
        Property String pbToOem True
        
    End_Procedure

    //Destructor cleans up if needed: Close file (and release channel).
    Procedure Destroy_Object
        If (pbFileOpen(Self)) Send CloseFile
        Forward Send Destroy_Object
    End_Procedure
    
    Import_Class_Protocol cIterator_Mixin
    
    {Visibility=Public}
    Procedure CloseFile
        Close_Input channel (piChannel(Self))
        Send ReleaseChannel
        Set pbFileOpen to False
    End_Procedure
    
    //Opens sequential file for input.
    //@param sFile Full file name including path.
    //@return  True if file can be opened
    {Visibility=Public}
    Function OpenInput String sFile Returns Boolean
        Send IteratorReset
        //Empty file string is not documented to give SEQEOF true, so check this manually.
        If (sFile = "") Function_Return False
        //Abort if unable to assign channel.
        If (not(AssignChannel(Self))) Function_Return False
        Direct_Input channel (piChannel(Self)) (ToANSI(sFile))
        //File not found. Abort.
        If (SeqEof) Begin
            Send ReleaseChannel
            Function_Return False
        End
        //File opened OK!
        Set pbFileOpen to True
        Function_Return True
    End_Function
    
    //Reads next line from file. Updates internal properties. Use CurrentLine
    //to get the value of the line that was read.
    //@Return True if line read OK. False if SeqEOF
    {Visibility=Public}
    Function ReadNextLine Returns Boolean
        String sCurrentLine
        Readln channel (piChannel(Self)) sCurrentLine
        If (pbToOem(Self)) Move (ToOem(sCurrentLine)) to sCurrentLine
        If (SeqEof) Begin
            Set psCurrentLine to ""
            Function_Return False
        End
        Else Begin
            Set psCurrentLine to sCurrentLine
            Set piCurrent to (piCurrent(Self) + 1)
            Function_Return True
        End
    End_Function
    
    //@Return The value of the line that was read using ReadNextLine
    {Visibility=Public}
    Function CurrentLine Returns String
        Function_Return (psCurrentLine(Self))
    End_Function
    
    {Visibility=Public}
    Procedure IteratorReset
        Send IteratorReset_Mixin
        If (pbFileOpen(Self)) Set_Channel_Position (piChannel(Self)) to 0
    End_Procedure
    
    {Visibility=Public}
    Function IteratorMoveNext Returns Boolean
        Function_Return (ReadNextLine(Self))
    End_Function
    
End_Class

//This class is an object-oriented approach to sequential reading from a file.
//A cSeqOutputFile object handles channel delegation and release, and introduces
//the Iterator interface for reading the lines of the file sequentially.
//
//Open the file for output by calling the OpenOutput function.
//Write lines to the file by calling WriteLine.
//The destructor will close the file if you do not call CloseFile explicitly.
Class cSeqOutputFile is a cSeqFile
    Procedure Construct_Object
        Forward Send Construct_Object

        { Visibility = Public }
        //Keep the file open (and keep the channel) until the file is closed?
        //Todo: Implement handling of pbKeepOpen
        Property Boolean pbKeepOpen True
        {Visibility = Public }
        Property String psFileMode
        { Visibility = Private}
        //Is the file open?
        Property Boolean pbFileOpen False
        { Visibility = Private }
        Property Integer piChannel
        { Visibility = Private }
        //Filename including path and extension
        Property String psCompleteFilename
        { Visibility = Private }
        //Convert to ANSI
        Property Boolean pbToANSI True
        
    End_Procedure

    //Destructor should clean up if needed: Close file (and release channel).
    Procedure Destroy_Object
        If (pbFileOpen(Self)) Send CloseFile
        Forward Send Destroy_Object
    End_Procedure
    
    {Visibility=Public}
    Procedure CloseFile
        If (pbFileOpen(Self)) Begin
            Close_Output channel (piChannel(Self))
            If (Seq_Channel_List(Self)) Send ReleaseChannel //When exiting application, this object may already have been destroyed at this point
            Set pbFileOpen to False
        End
        Else Error DFERR_PROGRAM "File not open. Cannot close."
    End_Procedure // CloseFile
    
    {Visibility=Private}
    Procedure ToANSI_Direct_Output_Channel Integer iChannel String sFile
        String sFileANSI
        Move (ToANSI(sFile)) to sFileANSI
        Direct_Output channel iChannel sFileANSI
    End_Procedure
    
    //Opens sequential file for output.
    //@param sFile Full file name including path.
    //@return  True if file can be opened
    {Visibility=Public}
    Function OpenOutput String sFile Returns Boolean
        Set psCompleteFilename to sFile
        //Empty file string is not documented to give SEQEOF true, so check this manually.
        If (sFile = "") Function_Return False
        //Abort if unable to assign channel.
        If (not(AssignChannel(Self))) Function_Return False
        If (pbToANSI(Self)) Move (ToANSI(sFile)) to sFile
        Send ToANSI_Direct_Output_Channel (piChannel(Self)) (psFileMode(Self) + sFile)
        //File not found. Abort.
        If (SeqEof) Begin
            Send ReleaseChannel
            Function_Return False
        End
        //File opened OK!
        Set pbFileOpen to True
        Function_Return True
    End_Function
    
    //Writes line to file.
    //@Return True if line written OK. False if SeqEOF
    {Visibility=Public}
    Function WriteLine String sLine Returns Boolean
        If (pbToANSI(Self)) Move (ToOem(sLine)) to sLine
        Writeln channel (piChannel(Self)) sLine
        If (SeqEof) Function_Return False
        Else Function_Return True
    End_Function

    //Writes text to file.
    //@Return True if line written OK. False if SeqEOF
    {Visibility=Public}
    Function WriteText String sText Returns Boolean
        If (pbToANSI(Self)) Move (ToOem(sText)) to sText
        Write channel (piChannel(Self)) sText
        If (SeqEof) Function_Return False
        Else Function_Return True
    End_Function
    
    //Writes Hex to file.
    //@Return True if line written OK. False if SeqEOF
    {Visibility=Public}
    Function WriteHex String sHex Returns Boolean
        If (pbToANSI(Self)) Move (ToOem(sHex)) to sHex
        Write_Hex channel (piChannel(Self)) sHex
        If (SeqEof) Function_Return False
        Else Function_Return True
    End_Function
    
End_Class
