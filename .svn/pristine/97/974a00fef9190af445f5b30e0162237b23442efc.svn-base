// Nils 2018-08-21
// Various source code refactoring functions/procedures
// for the DFRefactor project.
// Was lifted from the CleanMarkers.vw  business process object (oBPO)
// to here to make it easier to replace/add to this logic.
// Wil 2018-09-03
// Moved code into a dbView subclass instead.
//
Use Dfclient.pkg
Use StatFLog.pkg
Use SourceCode.inc
Use cRegex.pkg
Use cRemoveUnusedLocals.pkg                  
Use cUnusedSourceFiles.pkg
Use cScintillaRefactorEditor.pkg
Use cRefactorFunctionLibrary.pkg

Use cSysFileDataDictionary.dd      
Use cFunctionsDataDictionary.dd
Use cFunctionsADataDictionary.dd

#IFNDEF ghoStatusLog
Global_Variable Handle ghoStatusLog
#ENDIF

Class cRefactorStatusLog is a StatusDbLog
    Procedure Construct_Object
        Forward Send Construct_Object
        Move Self to ghoStatusLog
        Open StatLog
    End_Procedure                    
    
    Procedure OnNewRecord
        String sFunctionName  
        Integer iDateFormat
        Move (Trim(Functions.Function_Name)) to sFunctionName
        If (sFunctionName = "") Begin
            Move (Trim(FunctionsA.Function_Name)) to sFunctionName
        End
        Move sFunctionName to StatLog.FunctionName
        Get_Attribute DF_DATE_FORMAT to iDateFormat
        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
        Move (CurrentDateTime()) to StatLog.Time
        Set_Attribute DF_DATE_FORMAT to iDateFormat
    End_Procedure
    
End_Class

Class cRefactorDbView is a dbView

    Procedure Construct_Object
        Forward Send Construct_Object

        Set Border_Style to Border_Thick
        Set pbAutoActivate to True

        Property String  psLineBreak ""
        Property Boolean pbLastLineBreak False
        
        // Object handles:
        Property Handle private.phoEditor
        Property Handle phoBPO 
        Property Handle phoRemoveUnusedLocals
        Property Handle phoReportUnusedSourceFiles 
        Property Handle phoDDOReStyler
        
        Object Status_Log is a cRefactorStatusLog
            Move Self to ghoStatusLog
        End_Object

        Object oRemoveUnusedLocals is a cRemoveUnusedLocals
            Set phoRemoveUnusedLocals to Self
        End_Object
    
        Object oReportUnusedSourceFiles is a cUnusedSourceFiles
            Set phoReportUnusedSourceFiles to Self
        End_Object
        
        Object oDDOReStyler is a cDDOReStyler
            Set phoDDOReStyler to Self
        End_Object

        // *** MAIN FUNCTION LIBRARY ***
        //
        Object oRefactorFunctionLibrary is a cRefactorFunctionLibrary
        End_Object
        
        Set pbAutoActivate to True
        Set Verify_Save_msg to (RefFunc(No_Confirmation))

        On_Key Key_Ctrl+Key_S Send Request_Save
        On_Key Key_Escape Send None
        On_Key Key_Ctrl+Key_F4 Send None   
        Send Switch_Prior_View //of (ClientAreaObject (ghoCommandBars))
    End_Procedure

    Procedure Set phoEditor Handle ho
        Set private.phoEditor to ho
        Set phoEditor of ghoRefactorFunctionLibrary to ho
    End_Procedure
    
    Function phoEditor Returns Handle
        Function_Return (private.phoEditor(Self))
    End_Function
        
    Procedure RefactorCheckboxChanged Boolean bState Handle hObject Boolean bReportFunction
    End_Procedure

    Procedure WaitForFileToGetWritten String sFile
        Integer iCh iMaxSec
        Boolean bOK bExist
        DateTime dtStart dtStartCheck
        TimeSpan tsTime

        Move False to bOK
        Move 3 to iMaxSec
        Get vFilePathExists sFile to bExist
        If (bExist = False) Begin
            Procedure_Return
        End
        Move (CurrentDateTime()) to dtStart
        Get Seq_New_Channel to iCh   
        // No channel available 
        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Error "No Channel Available for Process: Procedure 'WaitForFileToGetWritten'"
            Procedure_Return
        End
        
        Repeat
            Direct_Input channel iCh
            Move (SeqEof = False) to bOK
            If (bOK = False) Begin
                Close_Input channel iCh
            End
            Move (CurrentDateTime()) to dtStartCheck
            Move (dtStartCheck - dtStart) to tsTime
            If (SpanSeconds(tsTime) > iMaxSec) Begin
                Move True to bOK
            End
        Until (bOK = True)

        Close_Input channel iCh
        Send Seq_Release_Channel iCh
    End_Procedure

    Function ReadSourceFileToArray String sSourceFile Returns String[]
        Boolean bLastLineBreak bEndOfFile bFirstLine
        Integer iLine iChannel iFileSize
        String sLine sLastLine sLineBreak sFileNameOnly
        String[] asSourceFile

        Move 0 to iLine
        Move True  to bFirstLine
        Move False to bEndOfFile
        Move False to bLastLineBreak
        Move ""    to sLastLine

        Get Seq_New_Channel to iChannel
        If (iChannel = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Error "No Channel Available for Process: Procedure 'ReadSourceFileToArray'"
            Function_Return asSourceFile
        End

        Get ParseFileName sSourceFile to sFileNameOnly
        Set Message_Text of ghoStatusPanel to ("Reading:" * String(sFileNameOnly))
        Get vWin32_APIFileSize sSourceFile to iFileSize
        Move (ResizeArray(asSourceFile, iFileSize)) to asSourceFile

        // Need to use binary read mode if we want to preserve tab characters and not have automatic tab replacement
        // filemode options don't seem to work as documented, not sure why.
        // Direct_Input channel iInChannel ("binary: "+"cr: 13: "+"eof: 26: "+sSourceFile)
        // Direct_Input channel iInChannel ("binary: "+"cr: 13:"+"eof: 26:"+sSourceFile)
        Direct_Input channel iChannel ("binary:" + sSourceFile)

        While (bEndOfFile = False)
            Readln channel iChannel sLine
            Move (SeqEof) to bEndOfFile
            If (bEndOfFile and Length(sLastLine) > 0) Begin
                If (Right(sLastLine, 1) = CS_CR) Begin
                    Move True to bLastLineBreak
                End
            End
            Move sLine to sLastLine
            If (bFirstLine = True) Begin
                Move False to bFirstLine
                // Determine the linebreak character to use for the file based on what is in the first line
                // The readline automatically reads Until LF, but does not report LF back in the string
                If (Length(sLine) > 0 and Right(sLine, 1) = CS_CR) Begin
                    Move CS_CRLF to sLineBreak
                End
                Else Begin
                    Move CS_LF to sLineBreak
                End
                Set psLineBreak to sLineBreak
            End
            If (sLineBreak = CS_CRLF) Begin
                If (Right(sLine, 1) = CS_CR) Begin
                    Move (Left(sLine, Length(sLine) - 1)) to sLine
                End
            End
            If (bEndOfFile = False) Begin
                Move sLine to asSourceFile[iLine]
                Increment iLine
            End
        Loop

        Move (ResizeArray(asSourceFile, iLine)) to asSourceFile
        Set pbLastLineBreak to bLastLineBreak
        Close_Input channel iChannel
        Send Seq_Release_Channel iChannel

        Function_Return asSourceFile
    End_Function

    Function WriteArrayToSourceFile String sSourceFile String[] asNewSourceFile Returns Boolean
        Boolean bLastLineBreak
        Integer iOutChannel iSize iCount
        String  sLineBreak

        Move False to Err
        Get psLineBreak     to sLineBreak
        Get pbLastLineBreak to bLastLineBreak
        Get Seq_New_Channel to iOutChannel
        If (iOutChannel = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Error "No Channel Available for Process: Procedure 'WriteArrayToSourceFile'"
            Function_Return False
        End

        Direct_Output channel iOutChannel sSourceFile
        Move (SizeOfArray(asNewSourceFile)) to iSize
        Decrement iSize   
        If (iSize >= 0) Begin
            For iCount from 0 to (iSize-1)
                Write channel iOutChannel asNewSourceFile[iCount] sLineBreak
            Loop
            If (bLastLineBreak=True) Begin
                Write channel iOutChannel asNewSourceFile[iSize] sLineBreak
            End
            Else Begin
                Write channel iOutChannel asNewSourceFile[iSize]
            End
        End

        Close_Input channel iOutChannel
        Send Seq_Release_Channel iOutChannel
        Function_Return (Err = False)
    End_Function  
    
    Function TimeSpanToString TimeSpan tsTime Returns String
        Integer iDays iHours iMinutes iSeconds iMilliseconds
        String  sTime

        Move "" to sTime
        Move (SpanDays(tsTime))    to iDays
        Move (SpanHours(tsTime))   to iHours
        Move (SpanMinutes(tsTime)) to iMinutes
        Move (SpanSeconds(tsTime)) to iSeconds
        Move (SpanMilliSeconds(tsTime)) to iMilliSeconds
        If (iDays > 0) Begin   // Don't show days if it is zero
            Move (String(iDays) + ":") to sTime
        End
        If (iHours < 10) Begin
            Move (sTime+"0") to sTime
        End
        Move (sTime + String(iHours) + ":") to sTime
        If (iMinutes < 10) Begin
            Move (sTime + "0") to sTime
        End
        Move (sTime + String(iMinutes) + ":") to sTime
        If (iSeconds < 10) Begin
            Move (sTime + "0") to sTime
        End
        Move (sTime + String(iSeconds) + "." + String(iMilliSeconds)) to sTime

        Function_Return sTime
    End_Function

    // ToDo: Should probably be done by the function in the library.
    Procedure RemoveReportLogFiles String sPath
        Boolean bOK
        tRefactorSettings RefactorSettings

        Get pRefactorSettings of ghoRefactorFunctionLibrary to RefactorSettings
        Get vFolderFormat sPath to sPath
        Send Info_Box "To be done! (RemoveReportLogFiles)"
//        If (RefactorSettings.bUnusedSourceFiles = True) Begin
//            Get vDeleteFile (sPath + CS_BackupFolder + CS_DirSeparator + CS_UnusedSourceLogFile) to bOK
//        End
    End_Procedure

    Function pbShouldSave Returns Boolean
        Boolean bChanged bIsReadOnly
        Handle hoEditor

        Get phoEditor to hoEditor
        If (hoEditor <> 0) Begin
            Get CM_IsModified of hoEditor to bChanged
            Get CM_IsReadOnly of hoEditor to bIsReadOnly
        End
        Function_Return (bChanged = True and bIsReadOnly = False)
    End_Function

    Procedure Request_Save
        Handle hoEditor
        Boolean bChanged

        Get phoEditor to hoEditor
        Get pbShouldSave to bChanged
        If (hoEditor <> 0 and bChanged = True) Begin
            Send SaveFile of hoEditor
        End  
        Forward Send Request_Save
    End_Procedure

    Procedure Request_Clear
        Handle hoEditor
        Get phoEditor to hoEditor
        If (hoEditor <> 0) Begin
            Send Delete_Data of hoEditor
        End
        Send UpdateStatusBar "" False   
        Forward Send Request_Clear
    End_Procedure

    Procedure Request_Clear_All
        Handle hoEditor
        Get phoEditor to hoEditor
        If (hoEditor <> 0) Begin
            Send Delete_Data of hoEditor
        End
        Send UpdateStatusBar "" False  
        // ToDo: I don't quite understand this, but if we forward send
        // it activates the EditorView.vw!!??
        // Forward Send Request_Clear_All
    End_Procedure

    Procedure UpdateStatusBar String sText Boolean bIdleTextOnly Integer iLi Integer iChrs
        Handle hoStatusBar
        Integer iLines iCharacters

        Move (StatusBar_Id(Self)) to hoStatusBar
        If (num_arguments > 2) Begin
            Move iChrs to iCharacters
            If (iCharacters = 0) Begin
                Move 0 to iLines
            End                 
            Else Begin
                Move iLi to iLines
            End
            Set NumberOfEditorLines      of hoStatusBar to iLines
            Set NumberOfEditorCharacters of hoStatusBar to iCharacters
        End
        Else Begin
            If (bIdleTextOnly = True) Begin
                Set psIdleText of hoStatusBar to sText
                Set ActionText of hoStatusBar to ""
            End
            Else Begin
                Set ActionText of hoStatusBar to sText
            End
        End
    End_Procedure

    // To enable Ctrl+MouseWheel in the grid to change font size.
    Procedure OnWmMouseWheel Integer wParam Integer lParam
       Integer iKeys iClicks iX iY iCONTROL
       Short iDelta     // Short signed integer
       Boolean bok 
       
       Move 0 to iDelta
       Move (Low(wParam)) to iKeys           // any keys down when pressed
       Move (MemCopy(AddressOf(iDelta),AddressOf(wParam)+2,2)) to bok
       // C_WHEELDATA is 120 as defined by MS as the delta to react to. Once click is usually 120
       Move (iDelta/C_WHEELDELTA) to iClicks // Number of clicks to react to
       Move (Low(lParam)) to iX  // cursor position
       Move (Hi(lParam)) to iY   

       Move (iKeys iand MK_CONTROL ) to iCONTROL  //$008
       If (iCONTROL) Begin
            Broadcast Recursive Send ScaleFont iClicks
       End

       // Tell windows that we've handled the event.    
       Set Windows_Override_State to True    
    End_Procedure
        
End_Class
