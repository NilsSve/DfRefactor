Replace sChr In sTag with (uppercase(sChr))
Send Find to Self EQ 1
If "Support Classes" in sShow Set pbDontShowMNS of (VDFCLS_DD(Self)) to TRUE
If iPos Eq 0 Move (Pos(Character(9),sVal))  to iPos
If (psWrkSpcOpenFileName(ghoApplication)) Ne "" Send WrkSpcDoForAllFiles  to ghoApplication Msg_CAOpenFile (oClientArea(oMain(Self)))
If iParXt_Next Eq 0 Move "to"   to sLabel


  
Declare_Datafile Customer 

Procedure Start
    Variant[][] vData
    Integer iA iB iRow
    
    While ((Found) and (iA Eq iB))
    Loop

    If (iA > iB) Move (Trim (Customer.Zip) * Trim (Customer.City)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String

End_Procedure

  // From OldFMACCommands.pkg
#IFDEF SELECT
#ELSE
    #Replace SELECT |!C
#ENDIF      








Function _ Global String sVar Returns String
End_Function




Function TranslateTesting returns string
    Function_Return (wsDoTranslate(Self,3713,"January"))
end_function

    Procedure Logg String sVal
    End_Procedure
    
    Procedure Test
        String sErrMess sText sTemp sFileName
        Integer iYesNo  
        
        Append sErrMess ("-" + wsDoTranslate(Self,2941,"You can't book this item.") + "\n")
        Append sText (wsDoTranslate(Self,678,"Credit limit exceeded")) "  " (wsDoTranslate(Self,678,"Continue to order?"))
        Get YesNo_Box (wsDoTranslate(Self,3798,"File exists") + " " + (sTemp + sFileName) + "\n" + wsDoTranslate(Self,3798,"Would you like to replace it") + "?") to iYesNo

        Send Logg (wsDoTranslate(Self,2686,"Customer no missing!"))
        Send Combo_Add_Item  (wsDoTranslate(Self,3319,"0 - Select")) "0"
        Set Value to (wsDoTranslate(Self,538,"1 - Reservdelar")) "1"
    End_Procedure
    
    [FindErr] Set color of ghoApplication to clWhite
    [FindErr] Set color of ghoApplication to clWhite

    [not Seqeof] Repeat
    [not Seqeof] Loop
    While [SeqEof]
    Loop
    
    [Found] Reread // End comment
    Indicate Select as Windowindex Eq Fieldindex // Comment
    [Select] Indicate Select as Windowindex Eq Fieldindex // Comment

integer iPosX iCommasX
string sRowX
    If ((mid(sRowX,1,iPosX)) eq ",") Add 1 to iCommasX
        
        If 1 eq 2 Begin
            If 1 gt 2 Begin
                If 1 ne 2 Begin
                    [Found] Begin
                        If 1 lt 2 Begin
                        End // If Begin
                    End // [Found] Begin

                End // If bTrasig Begin
            End // If  Begin
        End // [Found] Begin

Person_etikett_false:

    // If you set Current_radio you must set this after the
    // radio objects have been created AND after Notify_select_State has been
    // created. i.e. Set in bottom-code at end!!
    //Set Current_Radio to 0

Register_Object oButton

    Procedure One
        Date From_date  
        String sVal
        Address aAddress
        Boolean bState
        String[] asArray
        Integer[] aiArray
         
        [not Seqeof] Begin
        End
        
        Move "Yes" to asArray[0]
        Move "No"  to asArray[1]
        Move 1     to aiArray[0]
        Move aiArray[0] to sVal 
        GetAddress of sVal to aAddress

        Set Shadow_State of (oApplication(Self)) to False // Comment here
        Get Shadow_State to bState // Other comment
        Set Shadow_State of oButton to (Not(bState))
        
        Move True to bState
        Set Shadow_State of ghoapplication to bState // Third comment
        Set Object_Shadow_state to True

        If sVal NE ""  Begin
            Move True to bState
        End   
    
        //*****
        If (Uppercase("a")) EQ (Uppercase("b")) Begin
        End
        If (From_date EQ "" or not(IsDateValid(From_date)) or From_date LT 1/1/1900) Begin
        End
    End_Procedure
    
    [not Seqeof] Repeat
    [not Seqeof] Loop
    While [Seqeof]
    Loop
    [Found] Reread // End comment
    [FindErr] Set color of ghoApplication to clWhite
    [FindErr] Set color of ghoApplication to clWhite
    Repeat
    Until [Seqeof]  
    
    Repeat
    Until [not Found]
    
Declare_Datafile Flexerrs

    Procedure OnConstrain
        Constrain FlexErrs.Recnum gt 10
    End_Procedure
        
    Find Eq Flexerrs by Recnum
    
Procedure Test2
    Date dToday
    Sysdate4 dToday

    Indicate Found as True
    Indicate Found as (windowindex < fieldindex)

    Set piRowToInsert of AvgiftGrid to -1

    Send Stop_box (wsDoTranslate(Self,3837,"Please press the button 'Change Customer Number"))
End_Procedure    

    Object AvgiftGrid is a Grid
        Property Integer piRowToInsert -1
        Property Integer piCallbackObject 0
        Property String psCustomerIDToInsert ""
        Property Boolean pbOpenInEditModeRepeat False
        Property Boolean pbOpenPos False
    End_Object

    // Comment about the procedure
    //    Procedure Deactivating
    //        Forward Send Deactivating
    //        Send Beginning_of_Data 
    //    End_Procedure

Use Windows.pkg
Use DfConfrm.pkg

Function StringFromRightOfChar String sIn String sOut Returns String
End_Function

Object Renames is an Array
End_Object

Register_Object oMain

    //OnChange is called on every changed character
    Procedure OnChange
    End_Procedure
    
    // fires when the button is clicked
    Procedure OnClick
    End_Procedure

Procedure Test3
    String sOutConnStr
    Integer iStart iRetVal

    If (iStart = 1) Begin
        Procedure_Return
    End

    Get Confirm (wsDoTranslate(Self,1986,"Start")) to iRetVal
    Set Value of (oMain(Current_Object))  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
    Set Status_Help to "Enter fields to be renamed in format FILE.OLDFIELD,NEWFIELD, e.g. CUSTOMER.CUST,CUSTNO"
    Set Value to (wsDoTranslate(Self,2686,"Customer number is missing!"))
End_Procedure
    
Function ParseFolderName Global String sFileName Returns String
    String sFile sResult sFolderName sDirSep
    Integer iLength

    ZeroString iLength to sResult

    Move "" to sFolderName
    Move (sysconf(SYSCONF_DIR_SEPARATOR)) To sDirSep
    If sDirSep In sFileName Begin
        Move (StringFromRightOfChar(sFileName,sDirSep)) To sFile
        Move (Replace(sFile,sFileName,"")) to sFolderName
    End
    Else If ":" In sFileName Begin
        Move (StringFromRightOfChar(sFileName,":")) To sFile
        Move (Replace(sFile,sFileName,"")) to sFolderName
    End
    Function_Return sFolderName
End_Function // ParseFolderName

   Procedure Add_Row string sRow
      local integer bRename
      local Integer iPos
      local integer iCommas
      Move dfTrue to bRename
      if ((left(sRow,1)) ne "#") move dfFalse to bRename
      If (bRename) Begin
         for iPos from 1 to (length(sRow))
            If ((mid(sRow,1,iPos)) eq ",") Add 1 to iCommas
         loop//iPos
         If (iCommas ne 2) Move dfFalse to bRename
      end
      If (bRename) Set Value of (Renames(Self)) Item (Item_Count(Renames(Self))) to (replace("#",sRow,""))
      else Set Value item (Item_Count(self)) to sRow
   End_Procedure//Add_Row

            Object oWorkspace is a cObject
            End_Object
            Object oKey is a cObject
            End_Object
            Object oDFPath is a cObject
            End_Object

            Function PathRow Returns String
                local String  retval
                If ((Current_Radio(Self)) eq 0) Move (Append("W",(Value(oWorkspace(Self),0)))) to retval
                If ((Current_Radio(Self)) eq 1) Move (Append("K",(Value(oKey(Self),0)))) to retval
                If ((Current_Radio(Self)) eq 2) Move (Append("P",(Value(oDFPath(Self),0)))) to retval
                Function_Return retval
            End_Function//PathRow

    Move False to Found
    [Found] Repeat
        Move Windowindex to Fieldindex
    [Found] Loop

    Function ScalaUtpris String Utpris Returns String
        Number L D P  
        String sName

        Trim Utpris to Utpris
        Length Utpris to L
        Pos "," In Utpris to P
        If p ne 0 Begin
            Move (L-P) to D
            If d eq  1 Begin
                Append Utpris "0"
            End
            If d gt  2 Begin
                Move (Left(Utpris, (P+2))) to Utpris
            End
        End
        If p eq  0 Begin
            Append Utpris ".00"
        End
    
        Length UTPRIS to L
        While L lt 13
            Insert " " In UTPRIS At 1
            Length UTPRIS to L
        End
        
        Move (Replace("A", sName, "B")) to sName
        Replace  "A"  In  sName  With "B"
        
        Function_Return Utpris
    End_Function
