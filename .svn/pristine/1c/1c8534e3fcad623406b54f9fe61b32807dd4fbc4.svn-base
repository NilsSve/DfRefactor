Use cCJCommandBarSystem.pkg

{Visibility=Private}
Class cCJTextEditButtonMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object

        Set peControlStyle to xtpButtonIcon
        Set pbVisible to False
    End_Procedure
End_Class

Class cCJTextEditMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        {Category="Appearance" InitialValue=180}
        Property Integer piWidth                180
        {Category="Appearance"}
        Property String  psEditHint             "Enter Search Text"
        {Category="Appearance"}
        Property Boolean pbShowPromptButton     True
        {Category="Appearance"}
        Property String  psPromptButtonImage    "ActionPrompt.ico"

        {Visibility=Private}
        Property Handle  phoPromptButton

        Set psCaption to "Search"
        Set peControlStyle to xtpButtonCaption
        Set peControlType  to xtpControlEdit
    End_Procedure

    Procedure End_Construct_Object
        Handle  hoControl
        Boolean bButton

        Forward Send End_Construct_Object
        Get pbShowPromptButton to bButton
        If (bButton) Begin
            Delegate Get Create (RefClass(cCJTextEditButtonMenuItem)) to hoControl
            Set psImage of hoControl to (psPromptButtonImage(Self))
            Set phoPromptButton to hoControl
        End
    End_Procedure

    Procedure OnCreateControl Handle hoObj
        Integer iWidth iId
        String  sHint
        Boolean bButton
        Handle  hoButton

        Get piWidth    to iWidth
        Get psEditHint to sHint
        Get pbShowPromptButton to bButton

        Set ComWidth    of hoObj to iWidth
        Set ComEditHint of hoObj to sHint

        If (bButton) Begin
            Get phoPromptButton to hoButton
            If (hoButton>0) Begin
                Get piId of hoButton to iId
                Set ComBuddyButtonId of hoObj to iId
            End
        End
    End_Procedure

    Procedure Set psEditText String sText
        Handle hoEdit
        Boolean bCreated

        Get IsComObjectCreated to bCreated
        If (bCreated) Begin
            Get CreateFirstProxyControl to hoEdit
            If (hoEdit) Begin
                Set ComText of hoEdit to sText
                Send Destroy of hoEdit
            End
        End
    End_Procedure

    Function psEditText Returns String
        Handle hoEdit
        String sText
        Boolean bCreated

        Get IsComObjectCreated to bCreated
        If (bCreated) Begin
            Get CreateFirstProxyControl to hoEdit
            If (hoEdit) Begin
                Get ComText of hoEdit to sText
                Send Destroy of hoEdit
            End
        End
        Function_Return (Trim(sText))
    End_Function
End_Class

//
// And then this can be added to your toolbar or ribbon bar simply as follows:
//
//Code:
//Object oTextEditControlToolbar is a cCJToolbar
//    Object oTextEditMenuItem is a cCJTextEditMenuItem
//
//        Procedure OnExecute Variant vCommandBarControl
//            String sValue
//
//            Get psEditText to sValue
//            If (sValue="") Begin
//                Move "None" to sValue
//            End
//            Send Info_Box sValue
//        End_Procedure
//    End_Object
//End_Object
//
// Note that in order to invoke OnExecute of the cCJTextEditMenuItem control when the button is clicked
// you will need to add the following code to your CommandBarSystem object
//
//
//        Procedure OnComControlNotify Variant llControl Integer llCode Variant llNotifyData Variant llHandled
//            Handle  hoControl hoAction hoActionPointer
//            Variant vAction
//
//            Forward Send OnComControlNotify llControl llCode llNotifyData llHandled
//            If (llCode=XTP_EN_BUDDYBUTTONCLICK) Begin
//                Get Create (RefClass(cCJCommandBarControl)) to hoControl
//                Get Create (RefClass(cCJCommandBarAction))  to hoAction
//
//                Set pvComObject of hoControl to llControl
//                Get ComAction of hoControl to vAction
//                If (not(IsNullComObject(vAction))) Begin
//                    Set pvComObject of hoAction to vAction
//                    Get ComTag of hoAction to hoActionPointer
//                End
//
//                Send Destroy of hoAction
//                Send Destroy of hoControl
//
//                If (hoActionPointer>0) Begin
//                    Send Execute of hoActionPointer llControl
//                End
//            End
//        End_Procedure