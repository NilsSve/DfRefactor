<!DOCTYPE html>

<html>
	
<head>
	<title>What is refactoring?</title>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="description" content="" />
    <meta name="generator" content="HelpNDoc Professional Edition 7.7.0.519" />
	
	
	
	<link type="text/css" rel="stylesheet" media="all" href="css/reset.css" />
	<link type="text/css" rel="stylesheet" media="all" href="css/base.css" />
	<link type="text/css" rel="stylesheet" media="all" href="css/hnd.css" />
	<!--[if lte IE 8]>
		<link type="text/css" rel="stylesheet" media="all" href="css/ielte8.css" />
	<![endif]-->

	<style type="text/css">
		#topic_header
		{
			background-color: #EFEFEF;
		}
	</style>

	

	<script type="text/javascript" src="js/chmRelative.js"></script>
	
	
</head>

<body>



	
	
	<div id="topic_content">
		
<h1 class="rvps8"><span class="rvts0"><span class="rvts20">DFRefactor - Automated Code Refactoring for DataFlex</span></span></h1>
<h1 class="rvps9"><span class="rvts0"><span class="rvts31">Why refactoring and what is it?</span></span></h1>
<h2 class="rvps7"><span class="rvts0"><span class="rvts26">What is code refactoring?</span></span></h2>
<p class="rvps6"><span class="rvts13"><br/></span></p>
<p class="rvps6"><span class="rvts13">Code refactoring is a disciplined technique for restructuring existing computer code - altering its </span><span class="rvts27">internal</span><span class="rvts13"> structure without changing its functionality (</span><span class="rvts27">external</span><span class="rvts13"> behavior).</span></p>
<p class="rvps6"><span class="rvts13">It consists of small, incremental changes that leave the code in a better state than when it was found.</span></p>
<p class="rvps6"><span class="rvts13">We expect cleaner code when done.</span></p>
<p class="rvps6"><span class="rvts16"><br/></span></p>
<p class="rvps3"><span class="rvts14">What is </span><span class="rvts28">not</span><span class="rvts14"> code refactoring?</span></p>
<p class="rvps6"><span class="rvts13"><br/></span></p>
<p class="rvps6"><span class="rvts13">Changing an algorithm to something much faster is obviously </span><span class="rvts28">not</span><span class="rvts13"> refactoring, because the external behavior is changed.</span></p>
<p class="rvps6"><span class="rvts13">We do </span><span class="rvts28">not</span><span class="rvts13"> expect new behavior with refactoring.</span></p>
<h2 class="rvps7"><span class="rvts0"><span class="rvts26">Why refactoring code?</span></span></h2>
<p class="rvps6"><span class="rvts27"><br/></span></p>
<p class="rvps6"><span class="rvts27">"By continuously improving the design of code, we make it easier and easier to work with. This is in sharp contrast to what typically happens: little refactoring and a great deal of attention to expediently adding new features. If you get into the hygienic habit of refactoring continuously, you'll find that it is easier to extend and maintain code."</span></p>
<p class="rvps10"><span class="rvts27">- Joshua Kerievsky, Refactoring to Patterns&nbsp;</span></p>
<p class="rvps3"><span class="rvts27"><br/></span></p>
<p class="rvps3"><span class="rvts14">There are two general categories of benefits when it comes to refactoring</span></p>
<p class="rvps3"><span class="rvts14"><br/></span></p>
<p class="rvps6"><span class="rvts13">1. Maintainability. It is easier to fix bugs because the source is easy to read and the intent of its author is easy to grasp. This might be achieved by reducing large monolithic routines into a set of individually concise, well-named, single-purpose methods. It might be achieved by moving a method to a more appropriated class,or removing misleading comments.</span></p>
<p class="rvps6"><span class="rvts13"><br/></span></p>
<p class="rvps6"><span class="rvts13">2. Extensibility. It is easier to extend the capabilities of the application if it uses recognizable design patterns, and it provides some flexibility where none before may have existed.</span></p>
<h2 class="rvps7"><span class="rvts0"><span class="rvts30">Why automated refactoring?</span></span></h2>
<p class="rvps3"><span class="rvts29"><br/></span></p>
<p class="rvps6"><span class="rvts29">Manual refactoring, while giving the optimal refactoring freedom, can be extremely tedious and quite easily become error prone. With automated refactoring on the other hand, you use a specified set of refactoring routines of which each and every one has been intensively tested and proven to work, thus minimizing the risk that the external structure of your program gets compromised.</span><span class="rvts8"></span></p>

	</div>
	
	
		<div id="topic_footer">

			<div id="topic_footer_content">
				Copyright &copy; 2018-2020 by RDC Tools International. All Rights Reserved. Portions Copyright by DataAccess Worldwide.
			</div>
		</div>
	

	<div id="custom_footer"></div>

	
	

	
</body>
	
</html>

