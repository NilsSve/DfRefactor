What is Refactoring?

- Refactoring is the process of changing a sofware system in a way that does not alter the *external* behaviour of the code yet improves its *internal* structure.

- It consists of small, incremental changes that leave the code in a better state than when it was found. We expect cleaner code when done.


There are two general categories of *benefits* when it comes to refactoring:

1. Maintainability. It is easier to fix bugs because the source is easy to read and the intent of its author is easy to grasp. This might be achieved by reducing large monolithic routines into a set of individually concise, well-named, single-purpose methods. It might be achieved by moving a method to a more appropriated class,or removing misleading comments.

2. Extensibility. It is easier to extend the capabilities of the application if it uses recognizable design patterns, and it provides some flexibility were none before may have existed.


Why automated refactoring?

Manual refactoring, while giving the optimal refactoring freedom, can be tedious and error prone. With automated refactoring on the other hand, you use a specified set of refactoring routines of which each and every one has been intensively tested and proven to work.
 