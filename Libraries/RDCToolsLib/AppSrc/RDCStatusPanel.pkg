// StatPnl.pkg - creates the standard status_panel object.
//
//
// This is the default Status Panel object used by any of the Visual DataFlex classes that
// invoke the standard status panel. The standard has always been that the package name
// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
// changes in the way the status panel operates The Sentinel based external status panel used in
// prior revisions has been replace with status panel that is part of the application.
// This should work much better and faster than the old sentinel based solution.
// While the way this operates has changed, the interface has not and therefore this should work
// with most applications.
//
// As of 12.0, we have added a global handle that contains the object ID of this status panel.
// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
// a cleaner more robust interface.
//
//
// Compatibility Note:
//
// When used in the standard way, this change will require no changes. A developer will only need to
// change their code if they've modified the sentinel program, which was a difficult thing to do.
//
// If for some reason you application will not work using this as a replacement for the old status
// panel, you've probably done something special with the old status-panel. If you don't want to
// figure out how to use the new one and you want to continue using the old one you are going to need
// to add some code to include the old status panel in your application. Add the following to your project (your src).
//
// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
//
// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
// can still access the new object via the ghoStatusPanel handle.
//
//
// Creating your own Status Panel objects
//
// If a developer wishes to create a custom panel, they should use this package as their template.
// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
// with a different file and object name and direct your status panel request to the new object.
//
// If the new panel changes the interface and updates objects that are not currently defined, you
// want to make sure you send the message ProcessEvents after you've updated the object. This allows
// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
// e.g.
//       Procedure UpdateStatusBar
//           Send DoAdvance of oProgressBar
//           Send ProcessEvents
//       End_Procedure
//
// of course, if you use the standard interfaces in status bar and your forward send these
// messages this will be done for you.
//
// the standard Interface for status panels are:
//
// Send Initialize_StatusPanel - initializes values for caption, title & message
// Send Start_StatusPanel      - start the status panel
// Send Stop_StatusPanel       - stop the status panel
// Send Update_StatusPanel     - update the status panel's action area
// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
//
// Get/Set Caption_Text - updates the caption bar
// Get/Set Title_Text   - updates the title area
// Get/Set Message_Text - updates the Message area
// Get/Set Action_Text  - updates the action area
// Get/Set Button_Text  - updates the button area
//
// Get/Set Allow_cancel_state - determines if panel can be canceled
// Send EnableCancelButton - code you should provide to enable/disable cancel button
//
// ghoStatusPanel - global handle that points to the standard status panel.
Use cProcessStatusPanel.pkg
Use cCJSkinFramework.pkg
Use cProgressBar.pkg
Use Windows.pkg

#IFNDEF ghoStatusPanel
    Global_Variable Handle ghoStatusPanel // will contain the ID of the global StatusPanel object
    Move 0 to ghoStatusPanel
#ENDIF

#IFNDEF ghoProgressBar
    Global_Variable Handle ghoProgressBar // will contain the ID of the embedded progress bar.
    Move 0 to ghoProgressBar
#ENDIF

#IFNDEF ghoProgressBarOverall
    Global_Variable Handle ghoProgressBarOverall // will contain the ID of the embedded progress bar with overall results
    Move 0 to ghoProgressBarOverall
#ENDIF

Object Status_Panel is a cProcessStatusPanel
    Set Size to 148 222
    Set Border_Style to Border_Dialog
//    Set Sysmenu_Icon to False
//    Set Icon to "DbUpdateFrameworkdf19.ico"
    Set Icon to "Default.ico"
    Move Self to ghoStatusPanel // this can be used throughout the applicaton to access this object

    Property Boolean Cancel_Button_Visible_State True

    Procedure Activate
        Integer iSizeBefore
        Get GuiSize to iSizeBefore
        Forward Send Activate
        Set GuiSize to (Hi(iSizeBefore)) (Low(iSizeBefore))
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object
        Set Label of oTitleTxt      to ""
        Set Label of oTableNameTxt  to ""
        Set Label of oMessageTxt    to ""
        Set Label of oActionTxt     to ""
    End_Procedure

    Object oTitleTxt is a TextBox
        Set Location to 5 21
        Set Size to 8 179
        Set Auto_Size_State to False
        Set Justification_Mode  to jMode_Center
        Set Label to "This is the Title Text"
    End_Object

    Object oTableNameTxt is a TextBox
        Set Size to 19 204
        Set Location to 18 9
        Set Auto_Size_State to False
        Set Justification_Mode to JMode_Left
        Set Label to "This is the TableName Text"
    End_Object

    Object oMessageTxt is a TextBox
        Set Location to 39 9
        Set Size to 19 204
        Set Auto_Size_State to False
        Set Justification_Mode to JMode_Left
        Set Label to "This is the Message text"
    End_Object

    Object oActionTxt is a TextBox
        Set Size to 16 204
        Set Location to 60 9
        Set Auto_Size_State to False
        Set Justification_Mode to JMode_Left
        Set Label to "This is the Action Text"
    End_Object

    Object oStopButton is a Button
        Set Location to 120 82
        Set Label to C_$Cancel

        Procedure OnClick
            Send Close_panel
        End_Procedure

    End_Object

    Object oPercentage_tb is a TextBox
        Set Location to 74 196
        Set Size to 10 25
//        Set Label to "% Done"
    End_Object

    Object oCopyRight is a TextBox
        Set Location to 137 21
        Set Size to 9 197
        Set FontPointHeight to 8
        Set Auto_Size_State to False
        Set Justification_Mode  to jMode_Center
        Set Label to "Copyright 2001-2019 RDC Tools International"
    End_Object

    Object oProgressBar is a cProgressBar
        Set Size to 10 179
        Set Location to 83 22
        Set pbVisible to True // default
        Move Self to ghoProgressBar // this can be used throughout your application to access the progress bar
    End_Object

    Procedure Set Progress_Bar_Visible_State Boolean bVisible
        Set pbVisible of ghoProgressBar to bVisible
    End_Procedure

    Function Progress_Bar_Visible_State Returns Boolean
        Boolean bVisible
        Get pbVisible of ghoProgressBar to bVisible
        Function_Return (bVisible)
    End_Function

    Object oProgressBarOverall is a cProgressBar
        Set Size to 10 179
        Set Location to 104 22
        Set pbVisible to True // default
        Move Self to ghoProgressBarOverall // this can be used throughout your application to access the progress bar
    End_Object

    Object oOverallProgress_tb is a TextBox
        Set Size to 10 65
        Set Location to 95 24
        Set Label to "Overall Progress"
    End_Object

    Procedure Set Progress_Bar_Overall_Visible_State Boolean bVisible
        Set pbVisible of ghoProgressBarOverall to bVisible
    End_Procedure

    Function Progress_Bar_Overall_Visible_State Returns Boolean
        Boolean bVisible
        Get pbVisible of ghoProgressBarOverall to bVisible
        Function_Return (bVisible)
    End_Function

    // These messages bind the standard cProcessStatusPanel interface to the actual
    // objects defined within this instance of the status panel.

    // note: all of the messages that change text should be forwarded
    // as the forwarded messages allows the panel to paint when in a tight loop

    Procedure Set Message_Text String sText
        Set Label of oMessageTxt to sText
        Forward Set Message_Text to sText
    End_Procedure

    Function Message_Text Returns String
        Function_Return (Label(oMessageTxt))
    End_Function

    Procedure Set Action_Text String sText
        Set Label of oActionTxt to sText
        Forward Set Action_Text to sText
    End_Procedure

    Function Action_Text Returns String
        Function_Return (Label(oActionTxt))
    End_Function

    Procedure Set Button_Text String sText
        Set Label of oStopButton to sText
        Forward Set Button_Text to sText
    End_Procedure

    Function Button_Text Returns String
        Function_Return (Label(oStopButton))
    End_Function

    Procedure Set Title_Text String sText
        Set Label of oTitleTxt to sText
        Forward Set Title_Text to sText
    End_Procedure

    Function Title_Text Returns String
        Function_Return (Label(oTitleTxt))
    End_Function

    Procedure Set TableName_Text String sText
        Set Label of oTableNameTxt to sText
    End_Procedure

    Function TableName_Text Returns String
        Function_Return (Label(oTableNameTxt))
    End_Function

    Procedure Set License_Text String sText
//        Set Label of oLicense_txt to sText
    End_Procedure

    // gets called when status panel is activated passing whether a button
    // should appear
    Procedure EnableCancelButton Boolean bEnable
        Boolean bVisible
        Get Cancel_Button_Visible_State to bVisible
        If (bEnable = False) Begin
            Set Visible_State of oStopButton to bVisible
        End
        Set Enabled_State of oStopButton to bEnable
    End_Procedure

    Procedure Reset_StatusPanel
        Set Allow_Cancel_State of ghoStatusPanel to True
        Set Cancel_Button_Visible_State of ghoStatusPanel to True
        Set Progress_Bar_Visible_State  of ghoStatusPanel to True
        Set Progress_Bar_Overall_Visible_State of ghoProgressBarOverall to False
    End_Procedure

    Procedure UpdateStatusBar Number nByX
        Number nBy
        If (num_arguments = 0) Begin
            Move 1 to nBy
        End              
        Else Begin
            Move nByX to nBy
        End
        Send DoAdvanceBy of oProgressBar nBy
        Send ProcessEvents
    End_Procedure

//    Object oProgressBar is a cProgressBar
//        Move Self to ghoProgressBar
//        Set Location to 1 25
//        Set Size to 9 173
//        Set piMinimum        to 0
//        Set piMaximum        to 2000
//        Set piAdvanceBy      to 100
//        Set pbSmooth to True
//
//        // For some weird reason the application skin makes the coloring of the progressbar
//        // to malfunction. By telling the CodeJock SkinFramework to skip this object, the
//        // color will show correctly.
//        Procedure Page Integer iPageObject
//            Handle hWin
//            Forward Send Page iPageObject
//            If (ghoSkinFramework <> 0) Begin
//                Get Window_Handle to hWin
//                Send ComRemoveWindow of ghoSkinFramework hWin
//            End
//        End_Procedure
//    End_Object

End_Object

