Use RefactorStatusPanel.pkg
Use LanguageText.pkg

// English
#IFSame Language$Current = Language$English
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Dutch
#IFSame Language$Current = Language$Nederlands
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Swedish
#IFSame Language$Current = Language$Svenska
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_Reindex_Tables      for "Omsortering av data"
    Define CS_Reindexing          for "Sorterar..."
    Define CS_Sorting_Table       for "Sortererar tabell"
    Define CS_The_Table           for "Tabellen"
    Define CS_number              for "nummer"
    Define CS_Is_in_use           for "anvÑnds av ett annat program eller anvÑndare och kan dÑrfîr ej omsorteras. StÑng det andra programmet och fîrsîk igen."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "Databasen har blivit reparerad/omsorterad."
    Define CS_Problem_In_Use      for "Problem uppstod under reparationen. StÑng îvriga program som anvÑnder de hÑr dataregistren och fîrsîk igen."
    Define CS_NoReindex_Read_Only for "Kunde ej sortera om databasen. Kanske Ñr filattributet 'Read-Only' satt fîr *.dat filerna?"
    Define CS_DuplicatesFound     for "Dublett-poster upptÑcktes i"
    Define CS_CheckForBadFiles    for "register. Var god kontrollera .BAD filer i programmets Data katalog."
    Define CS_PressOKButton       for "Tryck pÜ OK knappen fîr att starta om programmet."
    Define CS_RepairCheck         for "Kontrollerar om filreparation Ñr nîdvÑndigt"
    Define CS_FileRepair          for "Filreparation..."
    Define CS_RepairingFile       for "Reparerar fil"
    Define CS_Backup_Exists       for "En backup med dagens datum existerar redan. Skriv îver den?"
    Define CS_BackupFolderError   for "Kunde ej skapa backup-katalogen. Du saknar fîrmodligen rÑttigheter fîr att skapa kataloger under programmets Data katalog."
    Define CS_PleaseTryAgain      for "Var vÑnlig ÜtgÑrda och fîrsîk igen."
    Define CS_BackupUpData        for "SÑkerhetskopierar data"
    Define CS_BackingUpTable      for "SÑkerhetskopierar data fîr tabell"
    Define CS_CopyingRecords      for "Kopierar poster"
    Define CS_Skipping            for "Hoppar îver"
    Define CS_BackupCreated       for "En backup-kopia av databasen har framgÜngsrikt skapats i katalogen"
    Define CS_BackupNotCreated    for "Ett fel uppstod och databasen har EJ sÑkerhetskopierats korrekt."
    Define CS_SelectBackupFolder  for "VÑlj en katalog vars namn startar med 'Backup' . fîljt av ett datum."
    Define CS_RestoringData       for "èterstÑller backup-data"
    Define CS_RemovingRecords     for "Tar bort nuvarande data ifrÜn tabell"
    Define CS_SelectedFolder      for "Den valda katalogen:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "èterstÑller data fîr tabell"
    Define CS_DatabaseRecreated   for "Databasen har framgÜngsrikt Üterskapats ifrÜn backupen"
#ENDIF

// German
#IFSame Language$Current = Language$Deutsch
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Danish
#IFSame Language$Current = Language$Dansk
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Danish
#IFSame Language$Current = Language$Dansk
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Portugues
#IFSame Language$Current = Language$Portugues
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// French
#IFSame Language$Current = Language$Francais
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Italic
#IFSame Language$Current = Language$Italiano
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Spanish
#IFSame Language$Current = Language$Espanol
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Norwegian
#IFSame Language$Current = Language$Norsk
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Russian
#IFSame Language$Current = Language$Russian
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Polish
#IFSame Language$Current = Language$Polish
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

// Hungarian
#IFSame Language$Current = Language$Hungarian
    Define CS_DbErrorDetected     for "The database needs to be repaired/reindexed. This is probably caused by the usage of a different DF_Collate.cfg (collating sequence) file."
    Define CS_StartRepairNow      for "OK?"
    Define CS_ElseQuitProgram     for "If you press No, the program will be closed."
    Define CS_ReindexAllTables    for "All tables will now be reindexed. Important! All other programs that uses the database must first be closed. Are all such programs closed?"
    Define CS_Reindex_Tables      for "Reindexing of records"
    Define CS_Reindexing          for "Sorting..."
    Define CS_Sorting_Table       for "Sortering table"
    Define CS_The_Table           for "The table"
    Define CS_number              for "number"
    Define CS_Is_in_use           for "is in use by another program or user and cannot be reindexed. Close the other program and try again."
    Define CS_Is_in_use_by_Studio for "is in use. Probably by the Studio and cannot be reindexed. Close the Studio and try again."
    Define CS_Database_Reindexed  for "The database has been reindexed."
    Define CS_Problem_In_Use      for "Problem occured when repairing the database. Close other programs that might have these tables open and try again."
    Define CS_NoReindex_Read_Only for "Failed to sort the database. Are the *.dat files set to 'Read-Only'?"
    Define CS_DuplicatesFound     for "Duplicates found in"
    Define CS_CheckForBadFiles    for "tables. Check for *.BAD files in the Data folder."
    Define CS_PressOKButton       for "Press the OK button to restart the program."
    Define CS_RepairCheck         for "Checking if repair is needed"
    Define CS_FileRepair          for "File repair..."
    Define CS_RepairingFile       for "Repairing file"
    Define CS_Backup_Exists       for "A backup for the current date already exists. Overwrite?"
    Define CS_BackupFolderError   for "Could not create the backup folder. You probably don't have enough rights for creating folders under the programs Data folder."
    Define CS_PleaseTryAgain      for "Please ensure you have enough rights and try again."
    Define CS_BackupUpData        for "Backing up data"
    Define CS_BackingUpTable      for "Backing up data for table"
    Define CS_CopyingRecords      for "Copying records"
    Define CS_Skipping            for "Skipping"
    Define CS_BackupCreated       for "A back-up copy was succesfully created in folder"
    Define CS_BackupNotCreated    for "An error occured and the database was NOT backed up."
    Define CS_SelectBackupFolder  for "Select a folder name that starts with 'Backup' - followed by a date."
    Define CS_RestoringData       for "Restoring backup data"
    Define CS_RemovingRecords     for "Removing records from data table"
    Define CS_SelectedFolder      for "The selected folder:"
    Define CS_DatabaseMissing     for "innehÜller ej nîdvÑndiga data fîr att ÜterstÑlla databasen. Var vÑnlig vÑlj en annan backup-katalog."
    Define CS_RestoringTable      for "Restoring data for table"
    Define CS_DatabaseRecreated   for "The database was successfully recreated from the backup"
#ENDIF

#IFNDEF ghoDatabaseFunctions
    Global_Variable Handle ghoDatabaseFunctions
#ENDIF

// Important: Only use _ONE_ instance of this object - it is using a global handle: ghoDatabaseFunctions
Class cDatabaseFunctions is a cObject

    Procedure Construct_Object
        Forward Send Construct_Object
        Move Self to ghoDatabaseFunctions
        Property Boolean pbReindexCodeFiles True
    End_Procedure

    // *** MAIN PROCEDURES ***

    // Reindex all files.
    Procedure ReindexAll
        Integer[] aiFileIsMaster aiFileIsAlias
        Get AllMasterAndAliasFiles (&aiFileIsMaster) to aiFileIsAlias 
        Close DF_ALL DF_PERMANENT
        Send SubReindexAllFiles aiFileIsMaster aiFileIsAlias
    End_Procedure

    // Repair & reindex all files.
    Procedure RepairAll
        Integer[] aiFileIsMaster aiFileIsAlias
        Get AllMasterAndAliasFiles (&aiFileIsMaster) to aiFileIsAlias
        Close DF_ALL DF_PERMANENT
        Send SubRepairAllFiles aiFileIsMaster aiFileIsAlias
    End_Procedure

    // Backs up all data tables to sub-folder of the Data folder.
//    Procedure DoBackupData
//        Integer[] iFileIsMaster aiFileIsAlias
//
//        Send DoSetAllMasterAndAlias
//        Get AllMasterAndAliasFiles (&iFileIsMaster) to aiFileIsAlias
//        Send SubBackupData iFileIsMaster aiFileIsAlias
//        Send DoOpenAllFiles iFileIsMaster aiFileIsAlias
//    End_Procedure
//
    // Restores all data tables from sub-folder of the Data folder.
//    Procedure DoRestoreData
//        Integer[] iFileIsMaster aiFileIsAlias
//        Send DoSetAllMasterAndAlias
//        Get AllMasterAndAliasFiles (&iFileIsMaster) to aiFileIsAlias
//        Close DF_ALL
//        Send SubRestoreData iFileIsMaster aiFileIsAlias
//        Send DoOpenAllFiles iFileIsMaster aiFileIsAlias
//        Broadcast Recursive Send Refresh of (Client_ID(ghoCommandBars)) Mode_Find_or_Clear_Set
//    End_Procedure

    // *** Helper procedures/functions ***

    // Find the given name in DFPath. If it exists, return the full name.
    Function FindFile String sFileName Returns String
        String  sFullName sPath sPathSep sDir sMessage
        Integer iSeparator iSepPos
        Boolean bFileExists

        // Only check if there are no sDirectory iSeparators in the name.
        Move "" to sFullName
        Move 0  to iSeparator
        If (sFileName contains (Sysconf(SYSCONF_Dir_Separator))) Begin
            Move 1 to iSeparator
        End
        If (not(iSeparator)) Begin
            Move 0 to bFileExists
            Move (Sysconf(SYSCONF_Path_Separator)) to sPathSep
            Get_Attribute DF_OPEN_Path to sPath
            If (Length(sPath)) Begin
                Repeat
                    Move (Pos(sPathSep,sPath)) to iSepPos
                    If iSepPos Begin
                        Move (Left(sPath, (iSepPos - 1))) to sDir
                        Move (Right(sPath, (Length(sPath) - iSepPos))) to sPath
                        If (Length(sDir)) Begin
                            Append sDir (Sysconf(SYSCONF_Dir_Separator)) sFileName
                            File_Exist sDir bFileExists
                            If bFileExists Begin
                                Move sDir to sFullName
                            End
                        End
                    End
                Until ((not(iSepPos)) or bFileExists)

                If (not(bFileExists)) Begin
                    If (Length(sPath)) Begin
                        Move sPath to sDir
                        Append sDir (Sysconf(SYSCONF_Dir_Separator)) sFileName
                        File_Exist sDir bFileExists
                        If bFileExists Begin
                            Move sDir to sFullName
                        End
                    End
                End
            End
            Else Begin
                Move "." to sDir
                Append sDir (Sysconf(SYSCONF_Dir_Separator)) sFileName
                File_Exist sDir bFileExists
                If bFileExists Begin
                    Move sDir to sFullName
                End
            End
        End
        Else Begin
            Move sFileName to sFullName
        End

        Function_Return sFullName
    End_Function
    
    // Re-index all tables in the filelist.
    // *** Add test to exclusively open CodeMast/CodeType, and handle if not successful! ***
    //
    Procedure SubReindexAllFiles Integer[] aiFileIsMaster Integer[] aiFileIsAlias
        String sRootName sSortString sReadyMsg sLogicalName sProgram
        Integer iTableNum iNumTables iNumTablesAdjusted iRetval iFileAlias iRecords
        Boolean bErrTables bBadExists bTableIsOpen bVerbose bReindexCodeFiles bOK bSystemTable

        Move False to Err
        // Should CodeMast & CodeType be reindexed?
        // Note: They are kept open by the Studio, which creates problems if the program is run from there.
        Get pbReindexCodeFiles to bReindexCodeFiles
        If (bReindexCodeFiles = True) Begin
            Send Ignore_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
            Open CodeMast DF_EXCLUSIVE
            If (Err = False) Begin
                Open CodeType DF_EXCLUSIVE
            End
            Send Trap_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
            If (Err = True) Begin
                If (ghoStatusPanel > 0) Begin
                    Send Stop_StatusPanel of ghoStatusPanel
                End
                Send Info_Box (CS_The_Table * "CodeMast" * String("(" + CS_number * "=" * String(CODEMAST.File_Number)) + ")" * CS_Is_in_use_by_Studio)
                Procedure_Return
            End
        End
        // This will tell the error object to _not_ display
        // error numbers and source number lines, while reindexing.
        Get pbVerboseState of Error_Object_Id to bVerbose
        Set pbVerboseState of Error_Object_Id to False

        // Start the status panel
        If (ghoStatusPanel <> 0) Begin
            Send Initialize_StatusPanel to ghoStatusPanel CS_Reindex_Tables CS_Reindexing "" "" //(psAviFile(Self))
            Send Start_StatusPanel to ghoStatusPanel
            Set piPosition  of ghoProgressBarOverall to 0
            Set piAdvanceBy of ghoProgressBarOverall to 1
            Set piMaximum   of ghoProgressBarOverall to (SizeOfArray(aiFileIsMaster))
        End

        // Initialize table number; we will start searching the filelist at this number.
        Move 0 to iTableNum
        Move 0 to iNumTables
        Move 0 to iNumTablesAdjusted
        Move 0 to bErrTables

        Repeat
            // Get next used table number
            Get_Attribute DF_FILE_NEXT_USED of iTableNum to iTableNum
            If iTableNum Begin
                // Count the tables
                Increment iNumTables
                Send DoAdvance of ghoProgressBarOverall

               // Skip FlexErrs
                Get_Attribute DF_FILE_ROOT_NAME of iTableNum to sRootName 
                Open iTableNum
                Get_Attribute DF_FILE_IS_SYSTEM_FILE of iTableNum to bSystemTable
                Move (Uppercase(Trim(sRootName)) <> "FLEXERRS" and bSystemTable = False) to bOK
                If (bOK and bReindexCodeFiles = False) Begin
                    Move (iTableNum <> 253 and iTableNum <> 254) to bOK    
                End
                If (bOK = True) Begin
                    If ghoStatusPanel Begin
                        Set Title_Text of ghoStatusPanel to  (CS_Sorting_Table * sRootName)
                    End

                    Send Ignore_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
                    // Open the table exclusively, we want to change it later.
                    Open iTableNum Mode DF_EXCLUSIVE
                    Get_Attribute DF_FILE_OPENED of iTableNum to bTableIsOpen
                    Send Trap_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION

                    If (bTableIsOpen = False) Begin
                        Close iTableNum
                        // Open in normal mode and check if alias file:
                        Open iTableNum
                        Get_Attribute DF_FILE_LOGICAL_NAME of iTableNum to sLogicalName
                        Get IsFileMasterAlias iTableNum aiFileIsMaster aiFileIsAlias to iFileAlias
                        If (iFileAlias = DF_FILE_IS_ALIAS) Begin
                            Close iTableNum
                            Move (False) to Err
                            Move 0 to LastErr
                        End
                        Else Begin
                            Move False to bTableIsOpen
                            If (ghoStatusPanel > 0) Begin
                                Send Stop_StatusPanel of ghoStatusPanel
                            End
                            Send Info_Box (CS_The_Table * sRootname * String("(" + CS_number * "=" * String(iTableNum)) + ")" * CS_Is_in_use)
                        End
                    End

                    Else If (bTableIsOpen = True) Begin
                        Get IndexString iTableNum to sSortString
                        If (sSortString <> "") Begin
                            Increment iNumTablesAdjusted

                            // Check for bad file and remove if exists
                            Get vFilePathExists (sRootName + ".BAD") to bBadExists
                            If (bBadExists = True) Begin
                                Get vDeleteFile (FindFile(sRootName + ".BAD")) to iRetval
                            End

                            // **** Re-index all table indexes ****
                            Get_Attribute DF_FILE_RECORDS_USED of iTableNum to iRecords
                            Set piPosition  of ghoProgressBar to 0
                            Set piAdvanceBy of ghoProgressBar to 1
                            Set piMaximum   of ghoProgressBar to iRecords
                            Sort iTableNum sSortString (DF_SORT_OPTION_BAD_DATA_FILE ior DF_SORT_OPTION_DUP_DATA_FILE)

                            Close iTableNum
                            // Check for bad file: if it exists, something went wrong
                            Get vFilePathExists (sRootName + ".BAD") to bBadExists
                            If (bBadExists = True) Begin
                                Increment bErrTables
                            End
                        End
                    End
                End
            End
        Until (iTableNum = 0)

        Set pbVerboseState of Error_Object_Id to bVerbose

        // Stop progress messages
        If ghoStatusPanel Begin
            Send Stop_StatusPanel of ghoStatusPanel
        End

        // Show that we are ready
        If (Err = False) Begin
            Move CS_Database_Reindexed to sReadyMsg
        End
        Else Begin
            If (LastErr = DFERR_FILE_ACCESS_VIOLATION) Begin
                Move CS_Problem_In_Use to sReadyMsg
            End
            Else Begin
                Move CS_NoReindex_Read_Only to sReadyMsg
            End
        End
        If (bErrTables = True) Begin
            Move (Append(sReadyMsg, ("\n" + CS_DuplicatesFound * String(bErrTables) * CS_CheckForBadFiles))) to sReadyMsg
        End
        Move (sReadyMsg + "\n\n" + CS_PressOKButton) to sReadyMsg

        Send Info_Box sReadyMsg
        Move (Module_Name(Desktop)) to sProgram 
        #IFDEF Is$Win64
            Append sProgram "64"
        #ENDIF
        // Restart program.
        Runprogram (sProgram - ".exe")
    End_Procedure

    // Determine the available indexes of a table.
    //
    // Arguments:
    //   Integer iTableNum - The number of the table
    //
    // Returns:
    //   String - The string to be used in the sort command if you want
    //   to re-index all indexes of the table
    Function IndexString Integer iTableNum Returns String
        String  sSortString
        Integer iLastIndex iNumSegments iCount

        Move "" to sSortString
        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of iTableNum to iLastIndex

        For iCount from 1 to iLastIndex
            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iTableNum iCount to iNumSegments
            If iNumSegments Begin
                If (Length(sSortString)) ;
                    Move (Append(sSortString, " ")) to sSortString
                Move (Append(sSortString, iCount)) to sSortString
            End
        Loop

        Function_Return sSortString
    End_Function

    // Checks if any of the DataFlex data-files needs to be repaired.
    // After the header has been repaired - also do a re-index.
    Procedure SubRepairAllFiles Integer[] aiFileIsMaster Integer[] aiFileIsAlias
        String sRootName sSortString sReadyMsg sRepair sLogicalName sProgram
        Integer iTableNum iNumTables iNumTablesAdjusted iRetval iFileAlias
        Boolean bErrTables bBadExists bTableIsOpen bVerbose bWasOpen

        Move False to Err

        // This will tell the error object to _not_ display
        // error numbers and source number lines.
        Get pbVerboseState of Error_Object_Id to bVerbose
        Set pbVerboseState of Error_Object_Id to False

        // Start the status panel
        If ghoStatusPanel Begin
            Send Initialize_StatusPanel to ghoStatusPanel CS_RepairCheck CS_FileRepair "" "" //(psAviFile(Self))
            Send Start_StatusPanel to ghoStatusPanel
        End

        // Initialize table number; we will start searching the filelist at this number.
        Move 0 to iTableNum
        Move 0 to iNumTables
        Move 0 to iNumTablesAdjusted
        Move False to bErrTables

        Repeat
            // Get next used table number
            Get_Attribute DF_FILE_NEXT_USED of iTableNum to iTableNum
            If (iTableNum <> 0) Begin
                // Count the tables
                Increment iNumTables

               // Skip FlexErrs
                Get_Attribute DF_FILE_ROOT_NAME of iTableNum to sRootName
                If (Uppercase(Trim(sRootName)) <> "FLEXERRS") Begin
                    If ghoStatusPanel Begin
                        Set Title_Text of ghoStatusPanel to (CS_RepairingFile * sRootName)
                    End
                    Send Ignore_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION

                    // Do not open table exclusively, the RepairNeeded message further down needs a normal open.
                    Open iTableNum
                    Get_Attribute DF_FILE_OPENED of iTableNum to bTableIsOpen
                    Send Trap_Error   of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION

                    If (bTableIsOpen = False) Begin
                        // Open in normal mode and check if alias file:
                        Open iTableNum
                        Get_Attribute DF_FILE_LOGICAL_NAME of iTableNum to sLogicalName
                        Get IsFileMasterAlias iTableNum aiFileIsMaster aiFileIsAlias to iFileAlias
                        If (iFileAlias = DF_FILE_IS_ALIAS) Begin
                            Close iTableNum
                            Move (False) to FindErr
                            Move 0 to LastErr
                        End
                        Else Begin
                            Move False to bTableIsOpen
                            Send Info_Box (CS_The_Table * sRootname * String("(" + CS_number * "=" * String(iTableNum)) + ")" * CS_Is_in_use)
                            Send Stop_StatusPanel of ghoStatusPanel
                        End
                    End

                    Else If (bTableIsOpen = True) Begin
                        Get IndexString iTableNum to sSortString
                        If (sSortString <> "" ) Begin
                            Increment iNumTablesAdjusted

                            // Check for bad file and remove if exists
                            Get vFilePathExists (sRootName + ".BAD") to bBadExists
                            If (bBadExists = True) Begin
                                Get vDeleteFile (FindFile(sRootName + ".BAD")) to iRetval
                            End

                            // **** Repair and reindex the table. ****
                            Get RepairNeeded iTableNum sRootName to sRepair

                            If (Uppercase(sRepair) <> "NONE") Begin
                                Get RepairDataFlexTable sRootName to iRetval
                            End

                            // Even if the head was repaired we still need to reindex
                            // Re-index all indexes for the table
                            Open iTableNum Mode DF_EXCLUSIVE
                            Sort iTableNum sSortString (DF_SORT_OPTION_BAD_DATA_FILE ior DF_SORT_OPTION_DUP_DATA_FILE) Self

                            Send UpdateStatusBar of ghoStatusPanel
                            Close iTableNum

                            // Check for bad file: if it exists, something went wrong
                            Get vFilePathExists (sRootName + ".BAD") to bBadExists
                            If (bBadExists = True) Begin
                                Increment bErrTables
                            End
                        End
                    End
                End
            End
        Until (iTableNum = 0 or FindErr = True)

        Set pbVerboseState of Error_Object_Id to bVerbose

        // Stop progress messages
        If ghoStatusPanel Begin
            Send Stop_StatusPanel of ghoStatusPanel
        End

        // Show message that we are ready
        If (Err = False) Begin
            Move CS_Database_Reindexed to sReadyMsg
        End
        Else Begin
            If (LastErr = DFERR_FILE_ACCESS_VIOLATION) Begin
                Move CS_Problem_In_Use to sReadyMsg
            End
            Else Begin
                Move CS_NoReindex_Read_Only to sReadyMsg
            End
        End
        If (bErrTables = True) Begin
            Move (Append(sReadyMsg, ("\n" +CS_DuplicatesFound * String(bErrTables) * CS_CheckForBadFiles))) to sReadyMsg
        End
        Move (sReadyMsg + "\n\n" + CS_PressOKButton) to sReadyMsg
        Send Info_Box sReadyMsg
        Move (Module_Name(Desktop)) to sProgram
        // Start program again.
        Runprogram (sProgram - ".exe")
    End_Procedure

    // Message will open all files in filelist and set all master & alias attributes correctly.
    // Takes two params:
    //   An array with all master tables
    //   An array with all alias tables
    Procedure DoOpenAllFiles Integer[] aiFileIsMaster Integer[] aiFileIsAlias
        Integer hTable iFileAlias iSize iFileNumber
        Boolean bOpen bIs

        Move 0 to hTable
        Repeat
            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
            If (hTable <> 0) Begin
                Open hTable
                Get_Attribute DF_FILE_OPENED of hTable to bOpen
                If (bOpen = True) Begin
                    Get IsFileMasterAlias hTable aiFileIsMaster aiFileIsAlias to iFileAlias
                    If (iFileAlias = DF_FILE_IS_MASTER) Begin
                        Set_Attribute DF_FILE_ALIAS of hTable to DF_FILE_IS_MASTER
                    End
                    Else If (iFileAlias = DF_FILE_IS_ALIAS) Begin
                        Set_Attribute DF_FILE_ALIAS of hTable to DF_FILE_IS_ALIAS
                    End
                End

            End
        Until (hTable = 0)
    End_Procedure

    // Helper function.
    // Returns _two_ arrays.
    // Returns all files that are Master files in array ByRef aiFileIsMaster
    // Also returns all files that are Alias files in a second array.
    // IMPORTANT: All master & alias files _must_ have been included into
    //            the DoSetAllMasterAndAlias message above.
    Function AllMasterAndAliasFiles Integer[] ByRef aiFileIsMaster Returns Integer[]
        Integer[] aiFileIsAlias
        Integer hTable iFileAlias iSize
        Boolean bOpen

        Move 0 to hTable
        Repeat
            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
            If (hTable <> 0) Begin
                Open hTable
                Get_Attribute DF_FILE_OPENED of hTable to bOpen
                If (bOpen = True) Begin
                    Get_Attribute DF_FILE_ALIAS of hTable to iFileAlias
                    If (iFileAlias = DF_FILE_IS_MASTER) Begin
                        Move (SizeOfArray(aiFileIsMaster)) to iSize
                        Move hTable to aiFileIsMaster[iSize]
                    End
                    Else If (iFileAlias = DF_FILE_IS_ALIAS) Begin
                        Move (SizeOfArray(aiFileIsAlias)) to iSize
                        Move hTable to aiFileIsAlias[iSize]
                    End
                End
            End
        Until (hTable = 0)

        Function_Return aiFileIsAlias
    End_Function

    // Helper function
    // Takes two params:
    //   1. An array with all master table numbers
    //   2. An array with all alias table numbers
    // Returns:
    //  DF_FILE_ALIAS_DEFAULT if no master or alias
    //  DF_FILE_IS_MASTER if master
    //  DF_FILE_IS_ALIAS if alias
    Function IsFileMasterAlias Handle hTable Integer[] aiFileIsMaster Integer[] aiFileIsAlias Returns Integer
        Integer i iSize
        Boolean bMatch

        Move (SizeOfArray(aiFileIsMaster)) to iSize
        Decrement iSize
        For i from 0 to iSize
            If (hTable = aiFileIsMaster[i]) Begin
                Function_Return DF_FILE_IS_MASTER
            End
        End

        Move (SizeOfArray(aiFileIsAlias)) to iSize
        Decrement iSize
        For i from 0 to iSize
            If (hTable = aiFileIsAlias[i]) Begin
                Function_Return DF_FILE_IS_ALIAS
            End
        End

        Function_Return DF_FILE_ALIAS_DEFAULT
    End_Function

    // Is a repair of the data-header necessary?
    Function RepairNeeded Integer hTable String sTableName Returns String
        String sMode sRepair
        Integer iRepairNeeded

        Move "0" to sMode

        Call_Driver hTable "DATAFLEX" Function FLEX_GET_REPAIRS_NEEDED Callback 0 Passing sTableName sMode 0 Result iRepairNeeded

        Case Begin
            Case (iRepairNeeded = FLEX_HEADER_OK)
                Move "None" to sRepair
                Case Break
            Case (iRepairNeeded = FLEX_BLOCK0_BAD)
                Move "Bad Block 0" to sRepair
                Case Break

            Case (iRepairNeeded = FLEX_HEADER_BAD)
                Move "Bad Header" to sRepair
                Case Break

            Case (iRepairNeeded = FLEX_HEADER_INTEGRITY_OFF)
                Move "Header Integrity Turned Off" to sRepair
                Case Break

            Case (iRepairNeeded = FLEX_HEADER_UNREADABLE)
                Move "Header Unreadable" to sRepair
        Case End

        Function_Return sRepair
    End_Function

    // Repair and reindex the named DataFlex data-table:
    Function RepairDataFlexTable String sTableName Returns Boolean
        String sMode
        Boolean bRepairComplete

        Move "0" to sMode   // 0=Reindex after repair.
        Call_Driver 0 "DATAFLEX" Function FLEX_REPAIR_FILE Callback 0 Passing  sTableName sMode 0 Result  bRepairComplete
        Function_Return bRepairComplete
    End_Function

//    Procedure SubBackupData Integer[] aiFileIsMaster Integer[] aiFileIsAlias
//        String sPath sToday sBackupFolder sRootName sDatFile sDateSep sDirSep
//        Integer iTableNum iNumTables iRetval iDateSep iFileAlias
//        Boolean bExist bSysfile
//        Handle hTempFile
//
//        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
//        Sysdate sToday
//        Get_Attribute DF_DATE_SEPARATOR to iDateSep
//        Move (Character(iDateSep))      to sDateSep
//        // We cannot use "/" when creating the Backup folder name, it is an illegal
//        // character, so we convert the "/" date separators to dashes (-) for folder names.
//        Move (Replaces(sDateSep, sToday, "-"))  to sToday
//        Move (SysConf(SYSCONF_DIR_SEPARATOR))   to sDirSep
//        Move (sPath + sDirSep + "Backup" + String(sToday)) to sBackupFolder
//        Move False to Err
//
//        Get vFilePathExists sBackupFolder to bExist
//        If (bExist = True) Begin
//            Get YesNo_Box CS_Backup_Exists to iRetval
//            If (iRetval = MBR_No) Begin
//                Procedure_Return
//            End
//        End
//
//        Else If (bExist = False) Begin
//            Get vCreateDirectory sBackupFolder to iRetval
//            Move (iRetval <> 0) to Err
//            If (Err = True) Begin
//                Send Info_Box (CS_BackupFolderError + "\n" + CS_PleaseTryAgain)
//                Procedure_Return
//            End
//        End
//
//        Move 0 to iTableNum
//
//        // Start the status panel
//        If (ghoStatusPanel <> 0) Begin
//            Send Initialize_StatusPanel to ghoStatusPanel CS_BackupUpData "" "" (psAviFile(Self))
//            Send Start_StatusPanel to ghoStatusPanel
//        End
//
//        Repeat
//            // Get next used table number
//            Get_Attribute DF_FILE_NEXT_USED of iTableNum to iTableNum
//            Get IsFileMasterAlias iTableNum aiFileIsMaster aiFileIsAlias to iFileAlias
//            If (iTableNum and iFileAlias <> DF_FILE_IS_ALIAS) Begin
//                // Count the tables
//                Increment iNumTables
//
//                Send UpdateStatusBar of ghoStatusPanel
//
//               // Skip FlexErrs
//                Get_Attribute DF_FILE_ROOT_NAME of iTableNum to sRootName
//                If (Uppercase(Trim(sRootName)) <> "FLEXERRS") Begin
//
//                    // To use the copy_db command the table needs to be closed.
//                    Close iTableNum DF_TEMPORARY
//
//                    // Check if the file already has been backuped.
//                    // If true 'Zerofile' it first.
//                    Move (sBackupFolder + sDirSep + sRootname + ".dat") to sDatFile
//                    Get vFilePathExists sDatFile to bExist
//                    Move (False) to bSysfile
//                    If (bExist = True) Begin
//                        Get_Attribute DF_FILE_NEXT_EMPTY of hTempFile to hTempFile
//                        Open sDatFile as hTempFile      // If success, sets the Found flag=true.
//                        Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTempFile to bSysfile
////                        If (bSysfile = True) Begin
//                            ZeroFile hTempFile
////                        End
////                        Else If (bSysfile = False and Found = True) Begin
////                            Set Message_Text of ghoStatusPanel to sRootName
////                            Send Update_StatusPanel of ghoStatusPanel "Tar bort gamla backup-poster"
////                            While (Found)
////                                Vfind hTempFile 0 GT
////                                If (Found) Delete hTempFile
////                                Send UpdateStatusBar of ghoStatusPanel
////                            Loop
////                        End
//                        Close hTempFile
//                    End
//                    Else Begin
//                        Set Message_Text of ghoStatusPanel to (CS_BackingUpTable * sRootName)
//                        Send Update_StatusPanel of ghoStatusPanel CS_CopyingRecords
//                    End
//
//                    Copy_db sRootname to (sBackupFolder + sDirSep + sRootname) Callback ghoValueObject
//                    Send UpdateStatusBar of ghoStatusPanel
//
//                    Open iTableNum
//                End
//                Else Begin
//                    Send Update_StatusPanel of ghoStatusPanel (CS_Skipping * sRootName)
//                End
//            End
//
//        Until (iTableNum = 0)
//
//        // Stop progress messages
//        If ghoStatusPanel Begin
//            Send Stop_StatusPanel of ghoStatusPanel
//        End
//        If (Err = False) Begin
//            Send Info_Box (CS_BackupCreated + "\n" + sBackupFolder)
//        End
//        Else If (Err = True) Begin
//            Send Info_Box CS_BackupNotCreated
//        End
//    End_Procedure
//
//    Procedure SubRestoreData Integer[] aiFileIsMaster Integer[] aiFileIsAlias
//        String sPath sBackupFolder sRootName sDatFile sDirSep sRecordID sCurrFiles
//        Integer iTableNum iNumTables iField iCount iRetval iFileAlias
//        Boolean bExist
//        Handle hTempFile
//
//        Get psDataPath of (phoWorkspace(ghoApplication)) to sPath
//        Get CJBrowseForFolder sPath "" (ToANSI(CS_SelectBackupFolder)) True to sBackupFolder
//        If (Length(sBackupFolder) = 0) Begin
//            Procedure_Return
//        End
//
//        Move (SysConf(Sysconf_Dir_Separator)) to sDirSep
//        // Start the status panel
//        If ghoStatusPanel Begin
//            Send Initialize_StatusPanel to ghoStatusPanel CS_RestoringData "" "" (psAviFile(Self))
//            Send Start_StatusPanel to ghoStatusPanel
//        End
//
//        Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE   // = 'File not open'
//
//        Repeat
//            // Get next used table number
//            Get_Attribute DF_FILE_NEXT_USED of iTableNum to iTableNum
//            Get IsFileMasterAlias iTableNum aiFileIsMaster aiFileIsAlias to iFileAlias
//            If (iTableNum and iFileAlias <> DF_FILE_IS_ALIAS) Begin
//                // Count the tables
//                Increment iNumTables
//
//                Send UpdateStatusBar of ghoStatusPanel
//
//               // Skip FlexErrs
//                Get_Attribute DF_FILE_ROOT_NAME of iTableNum to sRootName
//                If (Uppercase(Trim(sRootName)) <> "FLEXERRS") Begin
//                    // Show table
//                    Set Message_Text of ghoStatusPanel to (CS_RemovingRecords * sRootName)
//
//                    // Removes all data by deleting the whole data table (set).
//                    // It will ensure that the RowID's of saved files will be the same.
//                    Move (sBackupFolder + sDirSep + sRootname + ".dat") to sDatFile
//                    Get vFilePathExists sDatFile to bExist
//
//                    If (bExist = False) Begin
//                        If ghoStatusPanel Begin
//                            Send Stop_StatusPanel of ghoStatusPanel
//                        End
//                        Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
//                        Open iTableNum
//                        Send Info_Box (CS_SelectedFolder + "\n" + String(sBackupFolder) + "\n" + CS_DatabaseMissing)
//                        Procedure_Return
//                    End
//
//                    If (bExist = True) Begin
//                        Close iTableNum
//                        Move (sPath + sDirSep + sRootname + ".*") to sCurrFiles
//                        Get vDeleteFile sCurrFiles to iRetval
//                        If (iRetval <> 0) Begin
//                            If ghoStatusPanel Begin
//                                Send Stop_StatusPanel of ghoStatusPanel
//                            End
//                            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
//                            Open iTableNum
//                            Move (sPath + sDirSep + sRootname) to sDatFile
//                            Send Info_Box (CS_The_Table + "\n" + String(sDatFile) + "\" + CS_Is_in_use)
//                            Procedure_Return
//                        End
//                    End
//
//                    Set Message_Text of ghoStatusPanel to (CS_RestoringTable * sRootName)
//                    // Copy data record by record:
//                    Indicate Err False
//                    Copy_db (sBackupFolder + sDirSep + sRootname) to sRootname Callback ghoValueObject
//
//                    If (Err = True) Begin
//                        If ghoStatusPanel Begin
//                            Send Stop_StatusPanel of ghoStatusPanel
//                        End
//                        Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
//                        Open iTableNum
//                        Send Info_Box (CS_SelectedFolder + "\n" + String(sBackupFolder) + "\n" + CS_DatabaseMissing)
//                        Procedure_Return
//                    End
//
//                    Send UpdateStatusBar of ghoStatusPanel
//
//                    Open iTableNum
//                End
//                Else Begin
//                    Send Update_StatusPanel of ghoStatusPanel (CS_Skipping * sRootName)
//                End
//            End
//
//        Until (iTableNum = 0)
//
//        Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
//
//        // Stop progress messages
//        If ghoStatusPanel Begin
//            Send Stop_StatusPanel of ghoStatusPanel
//        End
//        Send Info_Box (CS_DatabaseRecreated * sBackupFolder)
//    End_Procedure

    // Stub message
    Procedure DoSetAllMasterAndAlias
    End_Procedure

End_Class

// Instantiation of the above class.
Object oDatabaseFunctions is a cDatabaseFunctions
    Move Self to ghoDatabaseFunctions
End_Object
