//****************************************************************************
// $Module type: Class
// $Module name: cRDCSuggestionIniForm
// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2018-09-05 @ 09:50 (Military date format: YY-MM-DD)
//
// Description : The class consists of a variant of DataAccess Worldwide's cSuggestionFormList
//               It has the added ability to save/retrieve values to the workspace .ws file.
//
// $Rev History:
//    2018-09-05  Module header created
//
//****************************************************************************
Use Windows.pkg
Use Windows.pkg
Use WinSuggestion.pkg
Use cIniFile.pkg            
Use cRDCForm.pkg
Use vWin32fh.pkg

#IFNDEF CS_cRDCSuggestionFormList
    Define CS_cRDCSuggestionFormList       for "Suggestion Form List"  // [Section Name]
    Define CS_cRDCSuggestionSaveItem       for "Saved Item"            // Key=Value
    Define CS_cRDCSuggestionFormTooltip    for "This is a suggestion form - start typing what you're looking for. Previously entered values are saved automatically."
#ENDIF

{ OverrideProperty=Aux_Value DesignTime=False }
{ OverrideProperty=Message DesignTime=False }
Class cRDCSuggestionIniForm is a cRDCForm

    Procedure Define_cRDCSuggestionControl_mixin

        { Visibility=Private }
        Property Integer piTimeOutTicks 0

        On_Key kEnter            Send SelectSuggestion
        On_Key Key_Escape        Send DeActivateSuggestionList
        On_Key Key_Up_Arrow      Send Up
        On_Key Key_Down_Arrow    Send Down

        // Added 'Home' & 'End' navigation keys for the drop-down list and the form object (and Ctrl+Home & Ctrl+End).
        On_Key Key_Home          Send Home
        On_Key Key_Ctrl+Key_Home Send Home
        On_Key Key_End           Send End
        On_Key Key_Ctrl+Key_End  Send End // Need this as well; else the Ctrl+Home/End keys generates a runtime error (always has).

        // Just can't seem to get the popup of the suggestion list with F4 to work.
        On_Key kPrompt           Send Prompt
    End_Procedure

    Import_Class_Protocol cSuggestionControl_mixin
    Import_Class_Protocol cSuggestion_mixin

    Procedure Construct_Object
        Forward Send Construct_Object
        Send Define_cRDCSuggestionControl_mixin
        Send Define_cSuggestion_mixin

        Set peSuggestionMode to smCustom
        Set pbFullText to True
        Set piStartAtChar to 1

        { Visibility=Private }
        Property String[] psSavedFormValues
        { Visibility=Private }
        Property String psIniFileSection
        Property Integer piSuggestionListMaxItems 99 // Max no of values saved/read to ini file
        Property Boolean pbUseWorkspaceIniFile True
        Property Boolean pbAutoCheckValueExistsAsFile True
        Property Boolean pbAskToRemoveMissingFile True
        // Note: pbUseWorkspaceIniFile has presedence over the psIniFileName setting.
        //       That means that if pbUseWorkspaceIniFile=True, psIniFilename will be set to the
        //       worspace .ws file on program startup.
        { InitialValue="Workspace File (.ws)" }
        Property String psIniFileName "RDCSuggestionForm.ini"
    End_Procedure

    { Visibility=Private }
    Procedure LocalPrompt
        Handle ho iVoid hWnd
        String sValue

        Get Value to sValue
        Get Prompt_Object to ho
        If (ho <> 0 and Length(sValue) = 0) Begin
            Send Prompt
            Procedure_Return
        End

        // Note: This only works as long as one character has already been entered in the form <Sigh!>
        Get Form_Window_Handle 0 to hWnd
        // Simulate press down [Spacebar]
        Move (SendMessage(hWnd,WM_KEYDOWN, VK_SPACE, EXTKEY)) to iVoid
        // Simulate release of [Spacebar]
        Move (SendMessage(hWnd,WM_KEYUP,   VK_SPACE, EXTKEY)) to iVoid
    End_Procedure

    { Visibility=Private }
    Procedure ShowSuggestions
        tSuggestion[] aResults
        Integer i iLines
        String sSearch


        Get pSearchResults to aResults
        Get Value to sSearch

        If (ghoSuggestionList <> 0) Begin
            Send Delete_Data of ghoSuggestionList
            Move (SizeOfArray(aResults)) to iLines
            For i from 0 to (iLines-1)
                Send ShowSuggestion aResults[i] sSearch
                If ((iLines-1)<>i) Begin
                    Send AppendTextLn of ghoSuggestionList ""
                End
            Loop
            Send AdjustSuggestionListSize iLines
        End

//        Set Cursor of Cursor_Control to IDC_ARROW
//        Send Activate of (Self)
//        Send Release_Mouse_Capture
    End_Procedure

    { Visibility=Private }
    Procedure Home
        If (Focus(Desktop) = Self and ghoSuggestionList) Begin
           Send ScrollHome
        End
        Else Begin
            Send Key VK_HOME
        End
    End_Procedure

    { Visibility=Private }
    Procedure ScrollHome
        Send SelectRow of ghoSuggestionList 0
    End_Procedure

    { Visibility=Private }
    Procedure End
        If (Focus(Desktop) = Self and ghoSuggestionList) Begin
           Send ScrollEnd
        End
        Else Begin
            Send Key VK_END
        End
    End_Procedure

    { Visibility=Private }
    Procedure ScrollEnd
        Integer iLine iLines
        Get Line_Count of ghoSuggestionList  to iLines
        Get SelectedRow of ghoSuggestionList to iLine
        // there can be an extra line at the end
        If (iLine < iLines - 1) Begin
            Send SelectRow of ghoSuggestionList (iLines - 1)
        End
    End_Procedure

    Procedure Activating
        String[] sSavedFormValues
        If (pbUseWorkspaceIniFile(Self) = True) Begin
            Get ReadWorkspaceIniFile to sSavedFormValues
            Set psSavedFormValues    to sSavedFormValues
        End
    End_Procedure

    Procedure Set psToolTip String sToolTip
        String sStatusHelp

        Get Status_Help to sStatusHelp
        If (sStatusHelp = "") Begin
            Set Status_Help to sToolTip
        End

        Move (sToolTip + String(Character(10)) + String(CS_cRDCSuggestionFormTooltip)) to sToolTip
        Forward Set psToolTip to sToolTip
    End_Procedure

    Function ReadWorkspaceIniFile Returns String[]
        String sWorkspaceFile sObjectName sValue
        String[] sSavedFormValues
        Handle hoIniFile
        Integer iItem iCount iSize
        Boolean bExists

        If (pbUseWorkspaceIniFile(Self) = False) Begin
            Function_Return sSavedFormValues
        End

        Move 0 to iItem
        Get Object_Label to sObjectName
        Move (psWorkspaceWSFile(phoWorkspace(ghoApplication))) to sWorkspaceFile
        Set psIniFileName to sWorkspaceFile
        Get Create (RefClass(cIniFile)) to hoIniFile
        Set psFileName of hoIniFile to sWorkspaceFile
        Get piSuggestionListMaxItems to iSize

        For iCount from 0 to iSize
            Get KeyExists of hoIniFile (CS_cRDCSuggestionFormList * String(sObjectName)) (CS_cRDCSuggestionSaveItem + String(iCount)) to bExists
            // We need to loop through all possible values because the list of items may not start at zero.
            Get ReadString of hoIniFile (CS_cRDCSuggestionFormList * String(sObjectName)) (CS_cRDCSuggestionSaveItem + String(iCount)) "" to sValue
            If (Trim(sValue) <> "") Begin
                Move sValue to sSavedFormValues[iItem]
                Increment iItem
            End
        Loop

        Send Destroy of hoIniFile
        Function_Return sSavedFormValues
    End_Function

    Procedure WriteWorkspaceIniFile
        String sWorkspaceFile sObjectName sValue
        String[] sSavedFormValues
        Handle hoIniFile
        Integer iSize iCount
        Boolean bExists

        If (pbUseWorkspaceIniFile(Self) = False) Begin
            Procedure_Return
        End

        Get Object_Label  to sObjectName
        Get psIniFileName to sWorkspaceFile
        Get Create (RefClass(cIniFile)) to hoIniFile
        Set psFileName    of hoIniFile to sWorkspaceFile
        Get SectionExists of hoIniFile (CS_cRDCSuggestionFormList * String(sObjectName)) to bExists
        If (bExists = True) Begin
            Send DeleteSection of hoIniFile (CS_cRDCSuggestionFormList * String(sObjectName))
        End

        Get psSavedFormValues to sSavedFormValues
        Move (SizeOfArray(sSavedFormValues)) to iSize
        Decrement iSize

        For iCount from 0 to iSize
            Move sSavedFormValues[iCount] to sValue
            Move (Trim(sValue)) to sValue
            Get vFilePathExists sValue to bExists
            If (bExists = True) Begin
                Send WriteString of hoIniFile (CS_cRDCSuggestionFormList * String(sObjectName)) (CS_cRDCSuggestionSaveItem + String(iCount)) sSavedFormValues[iCount]
            End
        Loop

        Send Destroy of hoIniFile
    End_Procedure

    Procedure Prompt      
        If (ghoSuggestionTimer=0) Begin
            Send CreateSuggestionTimer
        End
        Send ActivateSuggestionList
        Send FindSuggestions
        Set Visible_State of ghoSuggestionList to True
    End_Procedure 
    
    Procedure OnExitObject
        String sValue
        Boolean bExists
        String[] sSavedFormValues
        Integer iSize iIndex

        Forward Send OnExitObject

        If (pbUseWorkspaceIniFile(Self) = False) Begin
            Procedure_Return
        End

        Get Value to sValue
        Move (Trim(sValue)) to sValue
        Get psSavedFormValues to sSavedFormValues
        Move (SearchArray(sValue, sSavedFormValues)) to iIndex
        // Does it exist in the array already?
        If (iIndex <> -1) Begin
            Procedure_Return
        End
        Get vFilePathExists sValue to bExists
        If (bExists = False) Begin
            Procedure_Return
        End
        Move (SizeOfArray(sSavedFormValues)) to iSize
        Move sValue to sSavedFormValues[iSize]
        Set psSavedFormValues to sSavedFormValues
        Send WriteWorkspaceIniFile
    End_Procedure

    // Custom code to find all matches for the search
    Procedure OnFindSuggestions String sSearch tSuggestion[] ByRef aSuggestions
        String[] sSavedFormValues
        Integer i iLen iSize iCount

        Move (Lowercase(sSearch)) to sSearch
        Move (Length(sSearch)) to iLen
        Get psSavedFormValues to sSavedFormValues
        Move (SizeOfArray(sSavedFormValues)) to iSize
        Decrement iSize
        For i from 0 to iSize
            If (Lowercase(sSavedFormValues[i]) contains sSearch) Begin
                Move sSavedFormValues[i] to aSuggestions[iCount].sRowId
                Move sSavedFormValues[i] to aSuggestions[iCount].aValues[0]
                Increment iCount
            End
        Loop
    End_Procedure

    Procedure OnSelectSuggestion String sSearch tSuggestion Suggestion
        Boolean bExists bAutoCheckValueExistsAsFile bAskToRemoveMissingFile
        Integer iRetval iIndex
        String[] sSavedFormValues
        String sValue

//        Send Release_Mouse_Capture
        Move Suggestion.sRowId to sValue
        Move (Trim(sValue)) to sValue
        Get pbAutoCheckValueExistsAsFile to bAutoCheckValueExistsAsFile

        If (bAutoCheckValueExistsAsFile = True) Begin
            Get pbAskToRemoveMissingFile to bAskToRemoveMissingFile
            Get vFilePathExists sValue to bExists
            If (bExists = False) Begin
                If (bAskToRemoveMissingFile = True) Begin
                    Get YesNo_Box ("The file" * String(sValue) + "\nDoesn't exist. Do you want to remove it from the suggestion list?") to iRetval
                End
                // This will happen if bAskToRemoveMissingFile = False, and bAutoCheckValueExistsAsFile = True.
                // Then the missing file will just be removed from the saved list.
                Else Begin
                    Move MBR_Yes to iRetval
                End

                If (iRetval = MBR_Yes) Begin
                    Get psSavedFormValues to sSavedFormValues
                    Move (SearchArray(sValue, sSavedFormValues)) to iIndex
                    If (iIndex <> -1) Begin
                        Move (RemoveFromArray(sSavedFormValues, iIndex)) to sSavedFormValues
                        Set psSavedFormValues to sSavedFormValues
                        Send WriteWorkspaceIniFile
                        Set Value to ""
                        Procedure_Return
                    End
                End
            End
        End

        Set Value to Suggestion.sRowId
        Set Item_Changed_State to False
    End_Procedure

//    { MethodType=Event  NoDoc=True }
//    Procedure Mouse_Click Integer i1 Integer i2
//        Send Release_Mouse_Capture
//        Forward Send Mouse_click i1 i2
//    End_Procedure

End_Class

//    Procedure Mouse_Up for cRDCSuggestionList Integer iWindowNumber Integer iPosition
//        Handle hoObj
//        Send Release_Mouse_Capture
//        Get phoOwner to hoObj
//        Send Activate of hoObj // move focus to owner, which will close the list
//        Send SelectSuggestion of hoObj
//    End_Procedure // Mouse_Up

//    Function OnWindowsHook for cRDCSuggestionHookMouse Integer i1 Integer i2 Integer i3 Returns Integer
//        tWinMouseHookStruct MouseHook
//        Integer ivoid hObj
//        Handle hoOwner hoParent
//        If (i1=0 and (i2=WM_LBUTTONDOWN or i2=WM_RBUTTONDOWN or i2=WM_MBUTTONDOWN or ;
//                      i2=WM_NCLBUTTONDOWN or i2=WM_NCRBUTTONDOWN or i2=WM_NCMBUTTONDOWN)) Begin
//            Send Release_Mouse_Capture
//            Move (CopyMemory(AddressOf(MouseHook), i3, SizeOfType(tWinMouseHookStruct))) to iVoid
//            GET_OBJECT_FROM_WINDOW MouseHook.hwnd to hObj
//            If (hObj = Cursor_Control) Begin
//                Move (Focus(Desktop)) to hObj
//            End
//            Get Parent to hoParent
//            Get phoOwner of hoParent to hoOwner
//            If (not(hObj) or (hObj<>hoParent and hObj<>hoOwner)) Begin
//                Send DisableWindowsHook
//                Send DeActivateSuggestionList of hoOwner
//            End
//        End
//    End_Function

