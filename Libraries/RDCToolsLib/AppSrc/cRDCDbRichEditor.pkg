//****************************************************************************
// $Module type: Package
// $Module name: cRDCDbRichEditor.pkg
//
// $Author     : Nils G. Svedmyr, RDC Tools International and Vincent Oorsprong.
// Copyright (c) 2013 RDC Tools International and Vincent Oorsprong
//
// E-mail      : <support@rdctools.com>
// Web-site    : http://www.rdctools.com
//
// Created     : 2013-02-03 @ 16:04 (Military date format - Year-Month-Day)
//
// The base class was deveoped by Vincent Oorsprong and improved by me.
//
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
//Use DfTxtWin.Pkg
Use cDbRichEdit.pkg
Use oRichEditFind.dg
Use oRichEditFindReplace.dg
Use ShellExecute.Pkg
Use ShellExecuteErrors.Pkg
Use cCJStandardCommandBarSystem.pkg

Object ocDbRichEditorMenuObject is a cCJContextMenu

    Object oUndoMenuItem is a cCJUndoMenuItem
    End_Object

    Object oCutMenuItem is a cCJCutMenuItem
        Set pbControlBeginGroup to True
    End_Object

    Object oCopyMenuItem is a cCJCopyMenuItem
    End_Object

    Object oPasteMenuItem is a cCJPasteMenuItem
    End_Object

    Object oDeleteItem is a cCJDeleteEditMenuItem
    End_Object

    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
        Set pbControlBeginGroup to True
        Set psImage to "SelectAllText016N32.ico"
    End_Object

    Object oFindMenuItem is a cCJMenuItem
        Set pbControlBeginGroup to True
        Set psCaption   to "&Find"
        Set psToolTip to "Find text"
        Set psDescription to "Find text"
        Set pbActiveUpdate to True
        Set psShortcut to "Ctrl+F"
        Set psCategory to C_$CategoryEdit
        Set psImage to "FindInText.ico"
        Procedure OnExecute Variant vCommandBarControl
            Forward Send OnExecute vCommandBarControl
            Send DoFind to (Focus(Self))
        End_Procedure
    End_Object

    Object oSearchAndReplaceMenuItem is a cCJMenuItem
        Set pbControlBeginGroup to True
        Set psCaption   to "Searc&h and Replace"
        Set psToolTip to "Search and Replace text"
        Set psDescription to "Search and Replace text"
        Set pbActiveUpdate to True
        Set psShortcut to "Ctrl+H"
        Set psCategory to C_$CategoryEdit
        Set psImage to "FindReplace.ico"

        Procedure OnExecute Variant vCommandBarControl
            Forward Send OnExecute vCommandBarControl
            Send DoFindReplace to (Focus(Self))
        End_Procedure

        Function IsEnabled Returns Boolean
            Boolean bReadOnly
            Get Read_Only_State of (Focus(Self)) to bReadOnly
            Function_Return (not(bReadOnly))
        End_Function

    End_Object


End_Object


Class cRDCDbRichEditor is a cDbRichEdit
    //****************************************************************************
    //  Create the object and set default property values
    //****************************************************************************
    Procedure Construct_Object
        Forward Send Construct_Object

        Set Floating_Menu_Object to ocDbRichEditorMenuObject

        { DesignTime = False }
        Property String psLastSearchText
        { DesignTime = False }
        Property Integer peLastSearchOptions
        { DesignTime = False }
        Property Boolean pbIsRichEdit True

        Property Handle phoSearch (oRichEditFind(Self))
        Property Handle phoSearchAndReplace (oRichEditFindReplace(Self))

        // *** Change NGS 2012-07-13
        Property Integer piStreamLength 0
        Property Integer piCharactersLeft 0
        Set pbAutoUrl to True

        #IF (Required_FMAC_Version >= 17)
            Set pbBypassDDFieldBuffer to False
        #ENDIF

        Set OEM_Translate_State to False
        Set Label_Justification_Mode to jMode_Right
        Set Label_Col_Offset to 2

        On_Key Key_Ctrl+Key_F Send DoFind
        On_Key Key_Ctrl+Key_H Send DoFindReplace
        On_Key Key_F3 Send DoRepeatFind
        On_Key Key_Escape Send None
        On_Key kCancel Send None
        On_Key kExit_Function Send None
    End_Procedure

    // *** 2012-07-19 Change NGS ***
    // Added to retrieve the number of characters left to type piCharactersLeft
    // Also introduces two new properties, to make it complete.
    Procedure OnChange
        Forward Send OnChange
        Integer iStreamLength iMaxChars

        Get CharCount  to iStreamLength
        Set piStreamLength to iStreamLength
        Get piMaxChars to iMaxChars
        Set piCharactersLeft to (iMaxChars - iStreamLength)
    End_Procedure

    //****************************************************************************
    //  This method will change the pbWrap property value of the object but to
    //  make it effective the object needs to be repaged.
    //****************************************************************************
    Procedure ChangeWrapState Boolean bWrapText
        Set pbWrap To bWrapText
        Send Page_Object False
        Send Page_Object True
    End_Procedure

    //****************************************************************************
    //  If the user clicks a hyperlink this event fires and we simply let the
    //  shell deside if it can handle the link.
    //****************************************************************************
    Procedure OnLinkClicked integer iPositionStart integer iPositionEnd
        String sLinkText sErrorText
        Integer iRetval
        Handle hWnd

        Get TextRange iPositionStart iPositionEnd To sLinkText

        If (sLinkText <> "") Begin
            Get Window_Handle To hWnd
            Move (ShellExecute (hWnd, "open", sLinkText, "", "", SW_SHOWDEFAULT)) To iRetval
            If (iRetval <= 32) Begin
                Move C_SE_BASE_ERROR_TEXT to sErrorText
                Case Begin
                    Case (iRetval = ERROR_FILE_NOT_FOUND)
                        Move (sErrorText + C_ERROR_FILE_NOT_FOUND) to sErrorText
                        Case Break
                    Case (iRetval = ERROR_PATH_NOT_FOUND)
                        Move (sErrorText + C_ERROR_PATH_NOT_FOUND) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_ACCESSDENIED)
                        Move (sErrorText + C_SE_ERR_ACCESSDENIED) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_OOM)
                        Move (sErrorText + C_SE_ERR_OOM) to sErrorText
                        Case Break
                    Case (iRetval = ERROR_BAD_FORMAT)
                        Move (sErrorText + C_ERROR_BAD_FORMAT) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_SHARE)
                        Move (sErrorText + C_SE_ERR_SHARE) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_ASSOCINCOMPLETE)
                        Move (sErrorText + C_SE_ERR_ASSOCINCOMPLETE) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_DDETIMEOUT)
                        Move (sErrorText + C_SE_ERR_DDETIMEOUT) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_DDEFAIL)
                        Move (sErrorText + C_SE_ERR_DDEFAIL) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_DDEBUSY)
                        Move (sErrorText + C_SE_ERR_DDEBUSY) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_NOASSOC)
                        Move (sErrorText + C_SE_ERR_NOASSOC) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_DLLNOTFOUND)
                        Move (sErrorText + C_SE_ERR_DLLNOTFOUND) to sErrorText
                        Case Break
                    Case Else
                        Move (C_SE_NO_ERRORTEXT * String (iRetval)) to sErrorText
                        Case Break
                Case End
                Error DFERR_OPERATOR ("\n\n" - sErrorText)
            End
        End
    End_Procedure

    //****************************************************************************
    //  This method will here to make one unique method for all dbexplorer
    //  dataentry controls, some do not support read_only_state but fake it
    //  by setting noput on the item
    //****************************************************************************
    Function IsReadOnly Returns Boolean
        Boolean bIsReadOnly

        Get Read_Only_State To bIsReadOnly

        Function_Return bIsReadOnly
    End_Function

    //****************************************************************************
    //  This function returns true to make the record pulldown and the button
    //  bar to work.
    //****************************************************************************
    Function Deo_Object Returns Integer
        Function_Return True
    End_Function

    //****************************************************************************
    //  Indents selected paragraph(s) by 0.5 inches
    //****************************************************************************
    Procedure DoIndent
        Integer iTwipsPerInch iParagraphIndent

        // number of twips per inch
        Move 1440 to iTwipsPerInch

        // indent 0.5 inches from current indentation
        Get piParagraphIndent to iParagraphIndent
        Move (iParagraphIndent + (iTwipsPerInch * 0.5)) to iParagraphIndent
        Set piParagraphIndent to iParagraphIndent
    End_Procedure

    //****************************************************************************
    //  Outdents selected paragraph(s) by 0.5 inches
    //****************************************************************************
    Procedure DoOutdent
        Integer iTwipsPerInch iParagraphIndent

        // number of twips per inch
        Move 1440 to iTwipsPerInch

        // indent 0.5 inches from current indentation
        Get piParagraphIndent to iParagraphIndent
        Move (iParagraphIndent - (iTwipsPerInch * 0.5)) to iParagraphIndent
        Set piParagraphIndent to iParagraphIndent
    End_Procedure

    //****************************************************************************
    //  Calls find dialog in oRichEditFind.dg to let the user enter a search
    //  string. Called by Ctrl+F or from the toolbar
    //****************************************************************************
    Procedure DoFind
        Handle hoSearch

        Get phoSearch to hoSearch
        If (hoSearch > 0) Begin
            Send DoSearch of hoSearch Self
        End
        Else Begin
            Error DFERR_PROGRAM "Search Dialog property has no value"
        End
    End_Procedure

    //****************************************************************************
    //  This method gets called from the Find text dialog (in oRichEditFind.Dg)
    //  and searches for a text string with given options. If there is no text
    //  passed the search is not performed. If the text cannot be found a popup
    //  box appeares to inform the user about the failure. To make repeated search
    //  possible the last searchtext and options are stored in properties.
    //****************************************************************************
    Procedure DoSearch String sSearchText Integer eSearchOptions
        Integer iStart iSelEnd

        If (sSearchText = "") Begin
            Procedure_Return
        End

        Get FindText sSearchText eSearchOptions To iStart

        // was search successful?
        If (iStart <> -1) Begin
            // get length of search text
            Move (Length (sSearchText) + iStart) To iSelEnd
            // select search text found
            Send SetSel iStart iSelEnd

            Set psLastSearchText To sSearchText
            Set peLastSearchOptions To eSearchOptions
        End
        Else Begin
            Send Info_Box ("Text '" + sSearchText + "' not found") "Information"

            Set psLastSearchText To ""
            Set peLastSearchOptions To 0
        End
    End_Procedure

    //****************************************************************************
    //  Gets called from F3 in this object. Will repeat the last search operation
    //  (if any)
    //****************************************************************************
    Procedure DoRepeatFind
        String sSearchText
        Integer eSearchOptions

        Get psLastSearchText To sSearchText
        Get peLastSearchOptions To eSearchOptions

        Send DoSearch sSearchText eSearchOptions
    End_Procedure

    //****************************************************************************
    //  Calls find and replace dialog in oRichEditFindReplace.dg to let the user
    //  enter a search and a replace string. Called by Ctrl+H or from the toolbar
    //****************************************************************************
    Procedure DoFindReplace
        Handle hoSearchAndReplace
        Boolean bReadOnly

        Get phoSearchAndReplace to hoSearchAndReplace
        // 2013-01-30 NGS Added check for readonly state of the editor object.
        If (hoSearchAndReplace > 0) Begin
            Get Read_Only_State to bReadOnly
            If (bReadOnly = True) Begin
                Procedure_Return
            End
            Send DoReplace of hoSearchAndReplace Self
        End
        Else Begin
            Error DFERR_PROGRAM "Search and Replace Dialog property has no value"
        End
    End_Procedure

    //****************************************************************************
    //  This method gets called from find & replace dialog (in
    //  oRichEditFindReplace.dg) with the entered find and replace text strings
    //****************************************************************************
    Procedure DoReplace String sSearchText String sReplaceText Boolean bAll
        Integer iReplacementCount

        // do not replace all
        If (Not (bAll)) Begin
            Send ReplaceSel sReplaceText
        End
        Else Begin
            // do replace all
            Get ReplaceAll sSearchText sReplaceText To iReplacementCount
            // tell user how many replacements were made
            Send Info_Box (String (iReplacementCount) + " replacements were made") "Information"
        End
    End_Procedure

    Procedure Insert String sInsertText
        Integer iPos
        String sText

        Get SelStart to iPos
        Send SetSel iPos -1
        Get SelText to sText
        Move (sInsertText + sText) to sText
        Send ReplaceSel sText
    End_Procedure

    // *** Addition NGS 2012-07-13
//    Procedure Key Integer iKeyValue Returns Integer
//        Integer iShift iRetval
//        Boolean bShiftKey
//        Get Shift_State to iShift  // iShift = 1024 if pressed
//        If (iShift = 0 and iKeyValue = kEnter) Begin
//    //            Move (5121) to iKeyValue  // 5121 = Shift+Enter
//            Move (1024 iand Key_Shift)   to bShiftKey
//            Move (iKeyValue - bShiftKey) to iKeyValue
//        End
//        Forward Get msg_key iKeyValue to iRetval
//        Procedure_Return iRetval
//    End_Procedure

    // *** Addition NGS 2012-07-13
    // Limit input to the size of the data field.
    Procedure End_Construct_Object
        Integer iFile iField iSize iLimit

        Forward Send end_construct_object

        Get Data_File  to iFile
        Get Data_Field to iField
        If ((iFile>0) and (iField>0)) Begin
            Get_Attribute DF_FIELD_LENGTH of iFile iField to iSize
            Move (0.99 * iSize) to iLimit
            Set piMaxChars to iLimit
        End
        Else Begin
            Set piMaxChars to 50000
        End
    End_Procedure

    { MethodType=Property }
    Procedure Set TextFile String sFileName Boolean bEmbedFile
        String sPath sSep
        Move (psHelpPath(phoWorkSpace(ghoApplication))) to sPath
        Move (SysConf(sysconf_dir_separator)) to sSep
        Send DoReadFile (sPath - sSep - sFileName) bEmbedFile
    End_Procedure

    Procedure DoReadFile String sFileName Boolean bEmbedFile
        String sText
        Integer iCharCount iCh iSize

        Get CharCount to iCharCount
        If (iCharCount > 0) Begin
            Procedure_Return // Then file is already read.
        End

        Get Seq_New_Channel to iCh           // Get free channel for input
        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Send Info_Box "No Channel Available for Process" "Error"
            Procedure_Return
        End

        Direct_Input channel iCh sFileName
            Get_Channel_Size     iCh to iSize
            Read_Block channel   iCh sText iSize
            Set piMaxChars to iSize
            Set Value to sText               // Send AppendText doesn't work, but this will.
        Close_Input channel  iCh
        Send Seq_Release_Channel iCh
    End_Procedure

End_Class
