//****************************************************************************
// $Module type: Package
// $Module name: cRDCRichEditor.pkg
//
// $Author     : Nils G. Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2013-02-03 @ 16:04 (Military date format - Year-Month-Day)
//
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
Use cRichEdit.pkg
Use seq_chnl.pkg
Use ShellExecute.pkg

Class cRDCRichEditor is a cRichEdit

    Procedure Construct_Object
        Forward Send Construct_Object

    End_Procedure

    Procedure End_Construct_Object
        String sTooltip sStatus_Help

        Forward Send End_Construct_Object

#IF (Required_FMAC_Version > 15)
        Get psToolTip   to sTooltip
        Get Status_Help to sStatus_Help
        If (sTooltip = "" and sStatus_Help <> "") Begin
            Set psToolTip to sStatus_Help
        End
#ENDIF
    End_Procedure

    Procedure Set TextFile String sFileName Boolean bEmbedFile
        String sPath sSep
        Move (psHelpPath(phoWorkSpace(ghoApplication))) to sPath
        Move (SysConf(sysconf_dir_separator)) to sSep

        Send DoReadFile (sPath - sSep - sFileName) bEmbedFile
    End_Procedure

    Procedure DoReadFile String sFileName Boolean bEmbedFile
        String sText
        Integer iCharCount iCh iSize

        Get CharCount to iCharCount
        If (iCharCount > 0) Begin
            Procedure_Return // Then file is already read.
        End

        Get Seq_New_Channel to iCh           // Get free channel for input
        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Send Info_Box "No Channel Available for Process" "Error"
            Procedure_Return
        End

        Direct_Input channel iCh sFileName
            Get_Channel_Size     iCh to iSize
            Read_Block channel   iCh sText iSize
            Set piMaxChars to iSize
            Set Value to sText               // Send AppendText doesn't work, but this will.
        Close_Input channel  iCh
        Send Seq_Release_Channel iCh
    End_Procedure

    Procedure OnLinkClicked Integer iPositionStart Integer iPositionEnd
        String sLinkText sErrorText
        Integer iRetval
        Handle hWnd

        Get TextRange iPositionStart iPositionEnd to sLinkText

        If (sLinkText <> "") Begin
            Get Window_Handle to hWnd
            Move (ShellExecute (hWnd, "open", sLinkText, "", "", SW_SHOWDEFAULT)) to iRetval
            If (iRetval <= 32) Begin
                Move C_SE_BASE_ERROR_TEXT to sErrorText
                Case Begin
                    Case (iRetval = ERROR_FILE_NOT_FOUND)
                        Move (sErrorText + C_ERROR_FILE_NOT_FOUND) to sErrorText
                        Case Break
                    Case (iRetval = ERROR_PATH_NOT_FOUND)
                        Move (sErrorText + C_ERROR_PATH_NOT_FOUND) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_ACCESSDENIED)
                        Move (sErrorText + C_SE_ERR_ACCESSDENIED) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_OOM)
                        Move (sErrorText + C_SE_ERR_OOM) to sErrorText
                        Case Break
                    Case (iRetval = ERROR_BAD_FORMAT)
                        Move (sErrorText + C_ERROR_BAD_FORMAT) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_SHARE)
                        Move (sErrorText + C_SE_ERR_SHARE) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_ASSOCINCOMPLETE)
                        Move (sErrorText + C_SE_ERR_ASSOCINCOMPLETE) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_DDETIMEOUT)
                        Move (sErrorText + C_SE_ERR_DDETIMEOUT) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_DDEFAIL)
                        Move (sErrorText + C_SE_ERR_DDEFAIL) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_DDEBUSY)
                        Move (sErrorText + C_SE_ERR_DDEBUSY) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_NOASSOC)
                        Move (sErrorText + C_SE_ERR_NOASSOC) to sErrorText
                        Case Break
                    Case (iRetval = SE_ERR_DLLNOTFOUND)
                        Move (sErrorText + C_SE_ERR_DLLNOTFOUND) to sErrorText
                        Case Break
                    Case Else
                        Move (C_SE_NO_ERRORTEXT * String (iRetval)) to sErrorText
                        Case Break
                Case End
                Error DFERR_OPERATOR ("\n\n" - sErrorText)
            End
        End
    End_Procedure

End_Class
