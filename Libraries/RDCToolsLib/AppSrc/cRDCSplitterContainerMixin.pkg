// contains mixin support for SplitterContainer and SplitterContainerChild classes. This is required
// because we support the non-db (cSplitterContainer / cSplitterContainerChild) and the
// db ( cDbSplitterContainer / cDbSplitterContainerChild) classes/
// Changes 2015 by [tbs] - Clive Richmond at Triumph Business Systems.

Use Windows.Pkg
Use cSplitter.pkg

Enum_List
    Define fpFixFirstPanel      // Top panel height remains fixed on resize
    Define fpFixLastPanel   // Bottom panel height remains fixed on resize
End_Enum_List

Define C_SplitterWidth for 3


Class cSplitterContainerMixin is a Mixin

    { Visibility=Private}
    Procedure Define_cSplitterContainerMixin

        // Split vertical or horizontal
        { Category=Appearance }
        Property Boolean pbSplitVertical True

        // determines which panel's height remains fixed during parent resize events
        { Category=Behavior }
        { EnumList="fpFixFirstPanel, fpFixLastPanel" }
        Property Integer peFixedPanel fpFixFirstPanel

        { PropertyType=Color }
        { EnumList="clScrollBar, clBackground, clActiveCaption, clInactiveCaption, clMenu, clWindow, clWindowFrame, clMenuText, clWindowText, clCaptionText, clActiveBorder, clInactiveBorder" }
        { EnumList+="clAppWorkSpace, clHighlight, clHighlightText, clBtnFace, clBtnShadow, clGrayText, clBtnText, clInactiveCaptionText, clBtnHighlight, cl3DDkShadow, cl3DLight, clInfoText, clInfoBk, clDefault, clNone" }
        { EnumList+="clAqua, clBlack, clBlue, clDkGray, clFuchsia, clGray, clGreen, clLime, clLtGray, clMaroon, clNavy, clOlive, clPurple, clRed, clSilver, clTeal, clWhite, clYellow" }
        { InitialValue=clBtnFace }
        { Category=Appearance }
        Property Integer piSplitterColor clBtnFace

        // these are normally maintained by the class
        { DesignTime=False }
        Property Handle phoFirstPanel 0
        { DesignTime=False }
        Property Handle phoLastPanel 0
        { DesignTime=False }
        Property Handle phoSplitter 0

        { Visibility=Private }
        Property Integer piPrivateSplitterLocation 0
        { Visibility=Private }
        Property Integer piPrivateMinSplitterLocation 20
        { Visibility=Private }
        Property Integer piPrivateMaxSplitterLocation 20

        { Category=Appearance }
        Property Integer piSplitterWidth C_SplitterWidth //[tbs]

        Set Border_Style to Border_None

    End_Procedure

    { MethodType=Property }
    { InitialValue=20 }
    { Category=Behavior }
    Procedure Set piMinSplitterLocation Integer iLocation
        Handle hoSplitter
        Boolean bVert
        Set piPrivateMinSplitterLocation to iLocation
        // if splitter exists update the splitter with Gui Units
        Get phoSplitter to hoSplitter
        If hoSplitter Begin
            Get pbSplitVertical to bVert
            Get DialogToGui iLocation iLocation to iLocation
            Set piMinLocation of hoSplitter to (If(bVert,Low(iLocation),Hi(iLocation)))
        End
    End_Procedure

    { MethodType=Property }
    Function piMinSplitterLocation Returns Integer
        Integer iLocation
        Get piPrivateMinSplitterLocation to iLocation
        Function_Return iLocation
    End_Function

    { MethodType=Property }
    { InitialValue=20 }
    { Category=Behavior }
    Procedure Set piMaxSplitterLocation Integer iLocation
        Handle hoSplitter
        Boolean bVert
        Set piPrivateMaxSplitterLocation to iLocation
        // if splitter exists update the splitter with Gui Units
        Get phoSplitter to hoSplitter
        If hoSplitter Begin
            Get pbSplitVertical to bVert
            Get DialogToGui iLocation iLocation to iLocation
            Set piMaxLocation of hoSplitter to (If(bVert,Low(iLocation),Hi(iLocation)))
        End
    End_Procedure

    { MethodType=Property }
    Function piMaxSplitterLocation Returns Integer
        Integer iLocation
        Get piPrivateMaxSplitterLocation to iLocation
        Function_Return iLocation
    End_Function

    { MethodType=Property }
    { DesignTime=False }
    Procedure Set piGuiSplitterLocation Integer iPos
        Handle hWnd
        Get Window_Handle to hWnd
        If hWnd Begin
            Get SizeSplitterComponents iPos to iPos
        End
        Set piPrivateSplitterLocation to iPos
    End_Procedure

    { MethodType=Property }
    Function piGuiSplitterLocation Returns Integer
        Integer iPos
        Get piPrivateSplitterLocation to iPos
        Function_Return iPos
    End_Function

    { MethodType=Property }
    { InitialValue=0 }
    { Category=Appearance }
    Procedure Set piSplitterLocation Integer iPos
        Boolean bVert
        Get pbSplitVertical to bVert
        Get DialogToGui iPos iPos to iPos
        Set piGuiSplitterLocation to (If(bVert, low(iPos), Hi(iPos)))
    End_Procedure

    { MethodType=Property }
    Function piSplitterLocation Returns Integer
        Integer iPos
        Boolean bVert
        // we will get the gui units and convert to dialog
        Get piPrivateSplitterLocation to iPos
        Get pbSplitVertical to bVert
        Get GuiToDialog iPos iPos to iPos
        Function_Return (If(bVert, low(iPos), Hi(iPos)))
    End_Function

    // create the appropriate splitter for the object. This could be augmented
    // to return a different object class
    { Visibility=Private}
    Function CreateSplitter Returns Handle
        Boolean bVertical
        Handle hoSplitter

        Get pbSplitVertical to bVertical

        If bVertical Begin
            Get Create (RefClass(cVerticalSplitter)) to hoSplitter
        End
        Else Begin
            Get Create (RefClass(cHorizontalSplitter)) to hoSplitter
        End

        Function_Return hoSplitter
    End_Function

    // augmented to test that all components are bound properly and
    // to set the initial sizes
    { NoDoc=True }
    Procedure Page Integer iPageObject
        Handle hoSplitter hoFirst hoLast
        Integer iColor iClientSize
        Boolean bVertical
        Integer iLoc
        Integer iVal

        Forward Send Page iPageObject

        If iPageObject Begin

            // make the container the size of the parent clientarea
            // We use GetContainerClientSize instead of GuiClientSize because
            // GetContainerClientSize has a special augmentation in tab pages that
            // makes anchors work properly with unpaged tab-pages
            Delegate Get GetContainerClientSize to iClientSize
            Set GuiSize to (Hi(iClientSize)) (Low(iClientSize))
            Set GuiLocation to 0 0
            Send Adjust_Logicals

            // destroy existing splitter and create a new one
            Get phoSplitter to hoSplitter
            If (hoSplitter) Begin
                Send Destroy of hoSplitter
            End
            Get CreateSplitter to hoSplitter
            Set phoSplitter to hoSplitter
            Get phoFirstPanel to hoFirst
            Get phoLastPanel to hoLast
            If (hoSplitter=0 or hoFirst=0 or hoLast=0) Begin
                Error DFERR_OPERATOR "Splitter container is missing a child splitter or container component"
                Procedure_Return
            End

            // set various splitter propertues directly in splitter
            Get piSplitterColor to iColor
            Set Color of hoSplitter to iColor
            Get pbSplitVertical to bVertical
            Set pbSplitVertical of hoSplitter to bVertical
            // Once phoSplitter is set, reseting these will update the splitter as needed
            Get piMinSplitterLocation to iVal
            Set piMinSplitterLocation to iVal
            Get piMaxSplitterLocation to iVal
            Set piMaxSplitterLocation to iVal

            // this will force a resize
            Get piGuiSplitterLocation to iLoc
            Set piGuiSplitterLocation to iLoc
        End

    End_Procedure

    // called everytime the parent is resized
    { NoDoc=True }
    Procedure DoApplyAnchors Integer Arg1 Integer Arg2
        If (Window_Handle(Self)) Begin
            Send ResizeSplitterContainer
        End
    End_Procedure

    // parent has been resized. Adjust everything.
    { Visibility=Private }
    Procedure ResizeSplitterContainer
        Integer iClientSize
        Handle  hoFirstPanel hoLastPanel
        Integer cxy cxClient cyClient
        Boolean bVertical
        Integer iFirstSize
        Integer eFixedPanel

        // make the container the size of the parent clientarea
        Delegate Get GuiClientSize to iClientSize
        Move (Hi(iClientSize))  to cyClient
        Move (Low(iClientSize)) to cxClient
        Set GuiSize to cyClient cxClient
        Set GuiLocation to 0 0

        // resize child objects by determining the size of the first child container
        Get pbSplitVertical to bVertical
        Get peFixedPanel to eFixedPanel
        If (eFixedPanel = fpFixFirstPanel) Begin
            // Resize the panels keeping the size of the first panel fixed
            Get phoFirstPanel to hoFirstPanel
            Get GuiSize of hoFirstPanel to cxy
            If bVertical Begin
                Move (Low(cxy)) to iFirstSize
            End
            Else Begin
                Move (Hi(cxy)) to iFirstSize
            End
        End
        Else Begin
            // Resize the panels keeping the size of the last panel fixed
            Get pholastPanel to hoLastPanel
            Get GuiSize of hoLastPanel to cxy
            If bVertical Begin
                //Move (cxClient - low(cxy) - C_SplitterWidth) to iFirstSize [tbs]
                Move (cxClient - Low(cxy) - piSplitterWidth(Self)) To iFirstSize //[tbs]
            End
            Else Begin
                //Move (cyClient - Hi(cxy) - C_SplitterWidth) to iFirstSize [tbs]
                Move (cyClient - Hi(cxy) - piSplitterWidth(Self)) To iFirstSize //[tbs]
            End
        End
        Set piGuiSplitterLocation to iFirstSize
    End_Procedure

    // set size of all child objects passing the GUI size of the first child panel
    { Visibility=Private }
    Function SizeSplitterComponents Integer iFirstSize Returns Integer
        Handle  hoFirstPanel hoLastPanel hoSplitter
        Integer cyFirstPanel
        Integer cxFirstPanel
        Integer cxy cxClient cyClient
        Integer iMin iMax
        Boolean bVertical

        Get phoFirstPanel    to hoFirstPanel
        Get phoLastPanel to hoLastPanel
        Get phoSplitter    to hoSplitter
        Get pbSplitVertical to bVertical
        Get GuiClientSize to cxy
        Move (Hi(cxy))  To cyClient
        Move (Low(cxy)) to cxClient

        Get piMinSplitterLocation to iMin
        Get piMaxSplitterLocation to iMax
        Get DialogToGui iMin iMin to iMin
        Move (If(bVertical,Low(iMin),Hi(iMin))) to iMin
        Get DialogToGui iMax iMax to iMax
        Move (If(bVertical,Low(iMax),Hi(iMax))) to iMax

        If (iFirstSize=0) Begin
            Move (If(bVertical, cxClient, cyClient)/2) to iFirstSize
        End

        Move (iFirstSize max iMin) to iFirstSize
        Move (iFirstSize min (If(bVertical, cxClient, cyClient) - iMax)) to iFirstSize

        If bVertical Begin
            Move iFirstSize to cxFirstPanel

            // position the splitter
            Set GuiLocation of hoSplitter to 0 cxFirstPanel
            //Set GuiSize     of hoSplitter to cyClient C_SplitterWidth [tbs]
            Set GuiSize     Of hoSplitter To cyClient (piSplitterWidth(Self)) //[tbs]

            // position the left panel
            Set GuiLocation of hoFirstPanel to 0 0
            Set GuiSize     of hoFirstPanel to  cyClient cxFirstPanel

            // position the right panel
            //Set GuiLocation of hoLastPanel to 0 (cxFirstPanel + C_SplitterWidth) [tbs]
            //Set GuiSize     of hoLastPanel to cyClient (cxClient - cxFirstPanel - C_SplitterWidth) [tbs]
            Set GuiLocation Of hoLastPanel To 0 (cxFirstPanel + piSplitterWidth(Self)) //[tbs]
            Set GuiSize     Of hoLastPanel To cyClient (cxClient - cxFirstPanel - piSplitterWidth(Self)) //[tbs]
            Move cxFirstPanel to iFirstSize
        End
        Else Begin
            Move iFirstSize to cyFirstPanel

            // position the splitter
            Set GuiLocation of hoSplitter to cyFirstPanel 0
            //Set GuiSize     of hoSplitter to C_SplitterWidth cxClient [tbs]
            Set GuiSize     Of hoSplitter To (piSplitterWidth(Self)) cxClient //[tbs]

            // position the top panel
            Set GuiLocation of hoFirstPanel to 0 0
            Set GuiSize     of hoFirstPanel to cyFirstPanel cxClient

            // position the bottom panel
            //Set GuiLocation of hoLastPanel to (cyFirstPanel + C_SplitterWidth) 0 [tbs]
            //Set GuiSize     of hoLastPanel to (cyClient - cyFirstPanel - C_SplitterWidth) cxClient [tbs]
            Set GuiLocation Of hoLastPanel To (cyFirstPanel + piSplitterWidth(Self)) 0 //[tbs]
            Set GuiSize     Of hoLastPanel To (cyClient - cyFirstPanel - piSplitterWidth(Self)) cxClient //[tbs]
            Move cyFirstPanel to iFirstSize
        End

        Function_Return iFirstSize
    End_Function

    // move splitter by passed GUI units. Usually called by splitter control
    Procedure MoveSplitter Integer iGuiTrack
        Integer cxy
        Integer iFirstSize
        Handle hoFirstPanel
        Boolean bVertical

        Get pbSplitVertical to bVertical

        Get phoFirstPanel to hoFirstPanel
        Get GuiSize of hoFirstPanel to cxy
        If bVertical Begin
            Move (Low(cxy) + iGuiTrack) to iFirstSize
        End
        Else Begin
            Move (Hi(cxy) + iGuiTrack) to iFirstSize
        End

        Set piGuiSplitterLocation to iFirstSize
    End_Procedure

End_Class


Class cSplitterContainerChildMixin is a Mixin

    { Visibility=Private}
    Procedure Define_cSplitterContainerChildMixin
        Handle hoObj

        // by default we use object order to determine which is the first panel and
        // which is the second panel. This class is only valid within a SplitterContainer and
        // an error will be raised here if this is not the case
        Delegate Get phoFirstPanel to hoObj
        If (hoObj=0) Begin
            Delegate Set phoFirstPanel to Self
        End
        Else Begin
            Delegate Set phoLastPanel to Self
        End
    End_Procedure

End_Class

