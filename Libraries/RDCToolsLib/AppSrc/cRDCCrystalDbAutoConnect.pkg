//****************************************************************************
// $Module type: Class
// $Module name: cCrystalDbAutoConnect
// $Author     : Nils G. Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2016-09-07 @ 06:02 (Military date format: YY-MM-DD)
//
// Description : To make it easy to "auto-connect" to an MS-SQL database
//               for a Crystal Report without the Crystal login
//               popup dialog.
//
// See Also    : Read the important note for the "OnInitializeReport" event at the near bottom of this package.
//
// Usage       : Use cCrystalDbAutoConnect.pkg in your program. At the end of
//               this package there is an instantiation of the class. You can
//               there set your "auto-log" properties for your Crystal Reports
//               and your MS SQL database.
//
//               The *main* function is "DatabaseLogin", which return True if successful.
//               Instead of setting the login properties for the ghoCrystalDbAutoConnect
//               object you may pass the login parameters to the "DatabaseLogin" function instead (or override them).
//
// Properties  : The main login properties are:
//                 psServerName     e.g. "My_Machine\SQLEXPRESS" NB! The server name is case sensitive!
//                 psDatabaseName   e.g. "OrderEntry"
//                 psUserID         e.g. "sa"
//                 psPassword       e.g. "password"
//                 Sample: "Set psServerName of ghoCrystalDbAutoConnect to "MYMACHINE\SQLEXPRESS" // Remember that psServerName is case sensitive!
//
// $Rev History:
//    2016-09-07  Module header created
//****************************************************************************
Use cCrystal.Pkg
Use StatPnl.pkg

Define CS_CrystalServerType  for "OLE DB"
Define CS_CrystalSQLDriver   for "crdb_p2s_res_en.dll"  // Crystal Reports XI MS-SQL driver
Define CS_CrystalDbADODriver for "crdb_ado.dll"

// Global object handle to the oCrystalDbAutoConnect object
// that is created at the bottom of this package.
// The object handle can be used to set properties and/or to call messages
// of the object from anywhere in your program.
#IFNDEF ghoCrystalDbAutoConnect
    Global_Variable Handle ghoCrystalDbAutoConnect
    Move 0 to ghoCrystalDbAutoConnect
#ENDIF

Class cCrystalDbAutoConnect is a cCrystal

    Procedure Construct_Object
        Forward Send Construct_Object

        { Visibility=Private }
        Property Handle phoCrystalReport (Create(Self, RefClass(cCrystalReport)))

        // Property to hold if Crystal Reports RDC components are loaded
        { MethodType=Property Visibility=Private }
        Property Boolean pbCrystalLoaded False

        // Property to hold if Crystal Reports XI CDO can be loaded
        { MethodType=Property Visibility=Private }
        Property Boolean pbCrystalCDOLoaded False

        // Property to hold the version information about parts of the Crystal connection (.dll files).
        { MethodType=Property Visibility=Private }
        Property tDLLVersion[] pVersionInfoArray

        { MethodType=Property Visibility=Public }
        Property Boolean pbShowStatusPanel False            // Displays a statuspanel with info during connection to CR.

        { MethodType=Property Visibility=Public }
        Property String psServerType CS_CrystalServerType   // "OLE DB"
        { MethodType=Property Visibility=Public }
        Property Boolean pbAutoCrystalDbLogin False
        { MethodType=Property Visibility=Public }
        Property Boolean pbTrusted            False

        // Important: When you pass an empty string ("") for these parameters, the program uses the value that's already set in the report!
        { MethodType=Property Visibility=Public }
        Property String psServerName          ""            // Note: Case sensitive!
        { MethodType=Property Visibility=Public }
        Property String psDatabaseName        ""
        { MethodType=Property Visibility=Public }
        Property String psUserID              ""
        { MethodType=Property Visibility=Public }
        Property String psPassword            ""

//        Property String psProvider

    End_Procedure

    Procedure End_Construct_Object
        Move Self to ghoCrystalDbAutoConnect

        Forward Send End_Construct_Object
    End_Procedure

    // *** Main Database Login function ***
    //
    // Returns True if successful.
    // Note 1: You do _not_ need to pass the parameters to the function as long as you have defined/setup the
    // class properties of the ghoCrystalDbAutoConnect object at the bottom of this package.
    // If you have _not_ set the login parameters in the object you _must_ pass all of the parameters.
    // Note 2: The "sServerName" parameter value is case sensitive (don't ask; Crystal weirdness!)
    Function DatabaseLogin String sSvrName String sDbName String sID String sPw Returns Boolean
        Handle[] hoTables
        Boolean bOK
        String sReport sServerType
        String sConnectionType sName
        String sServerName sDatabaseName sUserID sPassword
        Handle hcReportObject hoReport hoDatabase hoDatabaseTable hoApplicationObject
        Integer iTableCount iTableItem iRetval
        Variant vReport

        Move 1 to iRetval
        Get psReportName to sReport
        // Note: This object will be destroyed automatically by the cCrystal
        //       class when the report is closed.
        Get phcReportObject to hcReportObject
        Get Create hcReportObject to hoReport
        If (not(hoReport)) Begin
            Error DFERR_CRYSTAL_REPORT (SFormat(C_$ErrorOpeningReport, sReport))
            Procedure_Return
        End

        Set Name of hoReport  to "oReport"          // for debugging purposes only
        Set phoReportObject   to hoReport           // Important!
        Get ApplicationObject to hoApplicationObject
        Get ComOpenReport     of hoApplicationObject sReport crOpenReportByDefault to vReport
        Set pvComObject       of hoReport to vReport

        If (num_arguments > 0) Begin
            Move sSvrName       to sServerName
            Move sDbName        to sDatabaseName
            Move sID            to sUserID
            Move sPw            to sPassword
            Set psServerName    to sServerName
            Set psDatabaseName  to sDatabaseName
            Set psUserID        to sUserID
            Set psPassword      to sPassword
        End
        Else Begin
            Get psServerName    to sServerName
            Get psDatabaseName  to sDatabaseName
            Get psUserID        to sUserID
            Get psPassword      to sPassword
        End
        Get psServerType        to sServerType

        // I'm not sure if we should have error trapping here or not...
//        Send Ignore_Error  of Error_Object_Id DFERR_COM_OBJECT_METHOD_INVOCATION_ERROR
//        Send Ignore_Error  of Error_Object_Id DFERR_ILLEGAL_CONVERSION
        Get DatabaseObject of hoReport to hoDatabase
//        Send Trap_Error    of Error_Object_Id DFERR_COM_OBJECT_METHOD_INVOCATION_ERROR
//        Send Trap_Error    of Error_Object_Id DFERR_ILLEGAL_CONVERSION

        If (hoDatabase <> 0) Begin

            Move False to Err
            Move False  to bOK
            // NGS 2016-09-08 I don't beleive it is necessary to use the ComLogOnServerEx function that is a bit more flexible.
            // Instead we use the more simple ComLogonServer function.

            // It seems like either of these two objects are fine.
//            Send ComLogOnServer of hoApplicationObject CS_CrystalSQLDriver sServerName sDatabaseName sUserID sPassword
            Send ComLogOnServer of hoDatabase CS_CrystalSQLDriver sServerName sDatabaseName sUserID sPassword

            Get TableObjects of hoDatabase to hoTables
            Move (SizeOfArray(hoTables)) to iTableCount
            Decrement iTableCount
            For iTableItem from 0 to iTableCount
                Move hoTables[iTableItem] to hoDatabaseTable
                If (hoDatabaseTable) Begin
                    Get ComDllName of hoDatabaseTable to sConnectionType
                    Get ComName    of hoDatabaseTable to sName
                    If (sConnectionType = CS_CrystalDbADODriver) Begin
                        Get Crystal_ADO_Settings of hoReport hoDatabaseTable sServerName sDatabaseName sUserID sPassword to bOk
                    End
                End
            Loop
            Move Err to iRetval
        End

        Function_Return (hoDatabase <> 0 and iRetval = 0 and bOK = True)
    End_Function

    // Main interface for running a report
    // It first checks that CR is properly installed and then run the report
    //DOC/ Interface=Public
    { MethodType=Property Visibility=Public }
    Procedure RunReport
        Boolean bCrystalOK
        Boolean bOK

        Get CheckCrystalEnvironment to bCrystalOK

        If (bCrystalOK) Begin
            Set pbHasErrors to False
            // Direct to local error handler
            Set Old_Error_Object_id to Error_Object_id
            Move Self to Error_Object_id

            Send CloseReport
            Get OpenReport to bOK
            If (bOK) Begin
                Send OutputReport
                Send CloseReport
            End

            // Restore error handler
            Get Old_Error_Object_id to Error_Object_id
        End
        Else Begin
            Send Info_Box "Crystal Reports XI is not properly installed on this machine. Can't run the report."
        End

    End_Procedure

    // Use to construct a proper CR connection string.
    // If bTrusted = True, then sUserID & sPassword can be blank.
    // Note that if a sPassword is passed it must have been decrypted first.
    Function CreateConnectionString String sProvider String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
        String  sResult

        Move ("Provider="   + sProvider + ;
              "; Server="   + sServer   + ;
              "; Database=" + sDatabase) to sResult
        If (bTrusted) Begin
            Move (sResult + "; Trusted_Connection=yes;") to sResult
        End
        Else Begin
            Move (sResult + "; User ID="  + sUserID   + ;
                            "; Password=" + sPassword + ";") to sResult
        End

        Function_Return sResult
    End_Function
    //
    Function Crystal_ADO_Settings Handle hoDatabaseTable String sDataSource String sInitialCatalog String sUserID String sPassword Returns Boolean
        Handle  hoConnectionProperties
        Variant vConnectionProperties
        Boolean bAttached
        Boolean bOK

        Move False to bOK

        Get Create (RefClass(cCrystalConnectionProperties))   to hoConnectionProperties

        Get ComConnectionProperties of hoDatabaseTable        to vConnectionProperties
        Set pvComObject             of hoConnectionProperties to vConnectionProperties
        Get IsComObjectCreated      of hoConnectionProperties to bAttached

        If (bAttached = True) Begin
            Get CrystalConnectionProperty hoConnectionProperties "Data Source"      sDataSource     to bOk
            Get CrystalConnectionProperty hoConnectionProperties "Initial Catalog"  sInitialCatalog to bOk
            Get CrystalConnectionProperty hoConnectionProperties "User ID"          sUserID         to bOk
            Get CrystalConnectionProperty hoConnectionProperties "Password"         sPassword       to bOk
        End
        Send Destroy of hoConnectionProperties

        Function_Return bOK
    End_Function

    // Helper function to the Crystal_ADO_Settings function.
    // Sets a Crystal connection property.
    // Returns True if successful
    Function CrystalConnectionProperty Handle hoConnectionProperties String sProperty String sValue Returns Boolean
        Handle  hoConnectionProperty
        Variant vProperty
        Boolean bAttached
        Boolean bOK

        If (sValue <> "") Begin
            If (sValue = "XqXqXqX") Begin
                Move "" to sValue
            End
            Get Create (RefClass(cCrystalConnectionProperty)) to hoConnectionProperty
            Get ComItem of hoConnectionProperties sProperty to vProperty
            Set pvComObject of hoConnectionProperty to vProperty
            Get IsComObjectCreated of hoConnectionProperty to bAttached
            If (bAttached) Begin
                Set ComValue of hoConnectionProperty to sValue
                Move True to bOK
            End
            Send Destroy of hoConnectionProperty
        End
        Else Begin
            Move True to bOK
        End

        Function_Return bOK
    End_Function

    // *** Crystal Report Component Checkings ***
    // Messages to check that Crystal Report is properly installed.
    //

    // *** Main Crystal Reports Environment Checking function ***
    // Checks that both Crystal Reports "RDC" & "CDO" pieces necessary for a report to run can be used.
    // Returns = True if all is OK. (No user interface, but generates error message if something is wrong.)
    //DOC/ Interface=Public
    { MethodType=Property Visibility=Public }
    Function CheckCrystalEnvironment Returns Boolean
        Boolean bCR bCDO

        Get pbCrystalLoaded    to bCR
        Get pbCrystalCDOLoaded to bCDO

        If (bCR = False) Begin
            Get CheckForCrystalRDC to bCR
        End

        If (bCDO = False) Begin
            Get CheckForCrystalCDO to bCDO
        End

        Function_Return (bCR and bCDO)
    End_Function

    // Check if Crystal Reports RDC components can be loaded
    Function CheckForCrystalRDC Returns Boolean
        Boolean bCrystalLoaded
        Handle  hoApplicationObject
        String  sError

        Get pbCrystalLoaded to bCrystalLoaded
        If (not (bCrystalLoaded)) Begin
            Send SetStatusMsg "Loading Crystal RDC Components. Please wait..."
            Send PopupStatusPanel
            Get ApplicationObject to hoApplicationObject
            Send DeactivateStatusPanel
            If (hoApplicationObject <> 0) Begin
                Move True to bCrystalLoaded
            End
            Else Begin
                Move "Could not connect to the Crystal RDC Application Object." to sError
                Error DFERR_CRYSTAL_REPORT sError
            End
        End

        Set pbCrystalLoaded to bCrystalLoaded

        Function_Return bCrystalLoaded
    End_Function

    // Check if Crystal Reports CDO component can be created
    Function CheckForCrystalCDO Returns Boolean
        Boolean bCDOFunctional
        String sError
        Handle hoCDO

        // Try to create CDO object
        Get Create (RefClass(cCrystalCrystalComObject)) to hoCDO
        Send CreateComObject of hoCDO
        Get IsComObjectCreated of hoCDO to bCDOFunctional
        If (not (bCDOFunctional)) Begin
            Move "Error creating Crystal Reports CDO object." to sError
            Move (sError * "Make sure Crystal Data Object is installed and properly registered on your machine.") to sError
            Error DFERR_CRYSTAL_REPORT sError
        End

        Set pbCrystalCDOLoaded to bCDOFunctional
        Send Destroy of hoCDO

        Function_Return bCDOFunctional
    End_Function

    // Helper message. Add version info to the class array property "pVersionInfoArray" for the passed .dll file.
    Procedure AddVersionInfo String sDLLName
        tDLLVersion[] VersionInfo
        Integer iElements iElement iArrayElement
        Integer iVersionMajor iVersionMinor iVersionRelease iVersionBuild
        Handle hoVersionInfo
        Boolean bIncluded

        Get pVersionInfoArray to VersionInfo

        Move (SizeOfArray (VersionInfo)) to iElements
        Move iElements to iArrayElement
        Decrement iElements
        For iElement from 0 to iElements
            If (VersionInfo[iElement].sDLLName = sDLLName) Begin
                Move iElement to iArrayElement
            End
        Loop

        Get Create (RefClass(cVersionInfo)) to hoVersionInfo
        If (hoVersionInfo > 0) Begin
            Send DoCreate of hoVersionInfo sDLLName
            Get pbIncluded of hoVersionInfo to bIncluded
            If (bIncluded) Begin
                Get piVersionMajor   of hoVersionInfo to iVersionMajor
                Get piVersionMinor   of hoVersionInfo to iVersionMinor
                Get piVersionRelease of hoVersionInfo to iVersionRelease
                Get piVersionBuild   of hoVersionInfo to iVersionBuild
            End
            Move sDLLName to VersionInfo[iArrayElement].sDLLName
            Move (SFormat ("%1.%2.%3.%4", iVersionMajor, iVersionMinor, iVersionRelease, iVersionBuild)) to VersionInfo[iArrayElement].sVersion
            Send Destroy of hoVersionInfo
        End

        Set pVersionInfoArray to VersionInfo
    End_Procedure

    // Messages for the Status_Panel object
    Procedure SetStatusMsg String sMsg
        If (pbShowStatusPanel(Self) = True) Begin
            Send Initialize_StatusPanel of Status_Panel "Crystal Reports" "" sMsg
        End
    End_Procedure

    Procedure PopupStatusPanel
        If (pbShowStatusPanel(Self) = True) Begin
            Send Start_StatusPanel of Status_Panel
        End
    End_Procedure

    Procedure DeactivateStatusPanel
        Send Stop_StatusPanel of Status_Panel
    End_Procedure

End_Class

{ MethodType=Event Visibility=Public }
// N.B!
// This is the cCrystal OnInitializeReport event that has been augmented because we need a hook
// that does the "auto-login" logic. It is therefore crucial that _all_ Crystal reportviews that has
// an OnInitializeReport, that this event is _FORWARD SEND_ ! Else this code is never executed and
// the auto-login logic won't work and the Crystal login dialog will popup.
Procedure OnInitializeReport for cCrystal Handle hoReport
    String[][2] sSubReportFormulas
    Handle[] SubReportArray
    Boolean bOK
    Boolean bAutomaticCrystalDatabaseLogin
    Integer iReportCount iReportItem hoSubReport
    String sReportName sPath

    // Login to the database: (Only for an ADO connection)
    Get pbAutoCrystalDbLogin of ghoCrystalDbAutoConnect to bAutomaticCrystalDatabaseLogin
    If (bAutomaticCrystalDatabaseLogin = True) Begin
        // If the message was called from a reportview's "OnInitializeReport", we may have not
        // set the psReportName of the ghoCrystalDbAutoConnect. Which is needed by the DatabaseLogin
        // function. So we ask for the reportname of the passed hoReport and set it accordingly.
        // This will make the login work "auto-magically".
        Get psReportName of hoReport to sReportName
        Get ParseFolderName sReportName to sPath
        If (sPath = "") Begin
            Get_File_Path sReportName to sReportName
        End
        Get vFilePathExists sReportName to bOK
        If (bOK = True) Begin
            Set psReportName of ghoCrystalDbAutoConnect to sReportName
        End
        Else Begin
            Send UserError ("The report name:" * String(sReportName) * "was not found.")
        End

        Get DatabaseLogin of ghoCrystalDbAutoConnect to bOK

        If (bOK = True) Begin
            // Also make logins for supreports:
            Get SubReportObjects of hoReport to SubReportArray
            Move (SizeOfArray(SubReportArray)) to iReportCount
            Decrement iReportCount
            For iReportItem from 0 to iReportCount
                Move SubReportArray[iReportItem] to hoSubReport
                If (hoSubReport) Begin
                    Get DatabaseLogin of ghoCrystalDbAutoConnect to bOK
                End
            Loop
        End
    End
End_Procedure

Object oCrystalDbAutoConnect is a cCrystalDbAutoConnect
    Set psServerName         to "(local)\SQLEXPRESS" // Note: Case sensitive!
    Set psDatabaseName       to "OrderEntry"
    Set psUserID             to "sa"
    Set psPassword           to "password"

//    Set pbShowStatusPanel    to True
//    Set psProvider           to ""
    Set pbAutoCrystalDbLogin to True
//    Set pbTrusted            to False // Use Windows trusted platform as login? Else a User_ID & Password must be given.
//    Set psServerType         to CS_CrystalServerType     // = "OLE DB"
End_Object
