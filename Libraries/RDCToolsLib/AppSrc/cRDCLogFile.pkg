//****************************************************************************
// $Module type: Class
// $Module name: cLogFile.pkg
// $Author     : Nils G. Svedmyr
// Created     : 2009-10-07 @ 09:01
//
// Description : Class that logs events to a text-file
//               The class have three distinct features:
//               1) It uses the "StartLogging" & "StopLogging" messages
//                  to temporary delay writing of send LogEvent messages.
//                  It is not until the "StopLogging" message is send,
//                  that the group of log messages are actually
//                  written to the log file. The psLogOutputText property
//                  is used for this purpose.
//                  Send LogEvent "some text" to log an event, after an
//                  initial StartLogging message has been send.
//               2) Log texts are added to the _top_ of the log-file.
//               3) All events are time stamped. Format: DATE HH:MM:SS 'Event text'
//
// $Rev History:
//    2009-10-07  Module header created
//    2014-11-30  Update of logic and made it into a class.
//****************************************************************************
Use cApplication.pkg
Use seq_chnl.pkg
Use vWin32fh.pkg

#IFNDEF ghoLogObject
    Global_Variable Integer ghoLogObject
    Move 0 to ghoLogObject
#ENDIF

Class cLogTextFile is a cObject

    Procedure Construct_Object
        Forward Send Construct_Object
        Move Self to ghoLogObject

        Property String  psLogFileName "LogFile.txt"
        Property Boolean pbLogAlarm False
        Property String  psLogOutputText

    End_Procedure

    Procedure StartLogging
        Set psLogOutputText to ""
    End_Procedure

    Procedure LogEvent String sText
        Integer iPos
        String  sTime sCurrentText sCRLF

        If (pbLogAlarm(Self) = False) Begin
            Procedure_Return
        End

        Get psLogOutputText to sCurrentText
        Move (Character(13) + String(Character(10))) to sCRLF
        Move (CurrentDateTime()) to sTime
        Move (Pos(",", sTime))   to iPos
        Move (Left(sTime, (iPos - 1))) to sTime
        If (sCurrentText = "") Begin
            Set psLogOutputText to (sTime + "  " + sText)
        End
        Else Begin
            Set psLogOutputText to (sCurrentText + sCRLF + sTime + "  " + sText)
        End

    End_Procedure

    Procedure StopLogging
        String sLogOutputText
        Integer iCh

        If (pbLogAlarm(Self) = False) Begin
            Procedure_Return
        End

        Get Seq_New_Channel to iCh
        If (iCh=DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Send Info_Box "No channel available to log events" "Error"
            Procedure_Return
        End

        Get psLogOutputText to sLogOutputText
        Send InsertLogString iCh sLogOutputText
    End_Procedure

    Procedure InsertLogString Integer iCh String sText
        String sData sFile
        Integer iSize iArg

        Get LogFileName to sFile
        Move (sText + Character(13) + Character(10) + Character(13) + Character(10)) to sText

        Direct_Input channel iCh ("Binary: "+ sFile)
            Get_Channel_Size iCh to iSize
            Get_Argument_Size to iArg
            If (iSize > iArg) Begin
                Set_Argument_Size (iSize + 10)
            End
            Read_Block channel iCh sData iSize
        Close_Input channel iCh

        Direct_Output channel iCh ("Binary: " + sFile)
            Writeln   channel iCh sText
            Write     channel iCh sData
        Close_Output  channel iCh

        Send Seq_Release_Channel iCh
        Set_Argument_Size iArg

    End_Procedure

    Function LogFileName Returns String
        String sPath sFile sRetval

        Get psLogFileName to sFile
        Get psProgramPath of (phoWorkspace(ghoApplication)) to sPath
        Get vFolderFormat sPath to sPath
        Move (sPath + sFile) to sRetval
        Function_Return sRetval
    End_Function

End_Class
