//****************************************************************************
// $Module type: Class
// $Module name: cRDCExternalProgramResult
// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2014-07-28 @ 23:53
//
// Description : To Run an external process (DOS program) and capture the output via memory pipe.
//               The byref sOutput will contain the piped output result as a string array.
//               The returned integer is the exit code from the process and thus will depend
//               on the program run.
//
// Acknoledgement: The main function was created by Bernhard Ponemayr.
//
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License.
// License: LGPLv3 - GNU LESSER GENERAL PUBLIC LICENSE Version 3 - http://www.gnu.org/licenses/lgpl.txt
//
// $Rev History:
//    2014-07-28  NGS Module header created
//    2014-09-21  NGS Removed all old syntax like TYPEDEF's, PUT GETADDRESS et al to instead
//                use Structs and added "EPR" prefix to all variables to make them unique.
//                Enclosed all structs with #IFNDEF's
//****************************************************************************
Use VdfBase.pkg
Use Winuser.pkg
Use Winkern.pkg
Use vWin32fh.pkg

// ***** CONSTANTS & STRUCT DECLARATIONS *****
//
Define EPR_STARTF_USESHOWWINDOW         for |CI$00000001
Define EPR_STARTF_USESIZE               for |CI$00000002
Define EPR_STARTF_USEPOSITION           for |CI$00000004
Define EPR_STARTF_USECOUNTCHARS         for |CI$00000008
Define EPR_STARTF_USEFILLATTRIBUTE      for |CI$00000010
Define EPR_STARTF_RUNFULLSCREEN         for |CI$00000020  // ignored for non-x86 platforms
Define EPR_STARTF_FORCEONFEEDBACK       for |CI$00000040
Define EPR_STARTF_FORCEOFFFEEDBACK      for |CI$00000080
Define EPR_STARTF_USESTDHANDLES         for |CI$00000100
Define EPR_STARTF_USEHOTKEY             for |CI$00000200
Define EPR_STILL_ACTIVE                 for 259

#IF (!@ < 191)
#IFNDEF get_ZeroString
  // This is the one function that keeps DataFlex versions from before DF19.0 from using
  // modern syntax, so we declare it instead.
  Function ZeroString Global Integer iSize Returns String
    String sRetVal
    Move (Repeat(Character(0), iSize)) to sRetVal
    Function_Return sRetVal
  End_Function
#ENDIF
#ENDIF

#IFNDEF _struct_tEPR_WinSecurityAttributes
    Struct tEPR_WinSecurityAttributes
        DWord nLength
        Pointer lpDescriptor
        Boolean bInherit
    End_Struct
#ENDIF

#IFNDEF _struct_tEPR_StartInfo
    Struct tEPR_StartInfo
        DWord cb
        Pointer lpReserved
        Pointer lpDesktop
        Pointer lpTitle
        DWord dwX
        DWord dwY
        DWord dwXSize
        DWord dwYSize
        DWord dwXCountChars
        DWord dwYCountChars
        DWord dwFillAttribute
        DWord dwFlags
        UShort wShowWindow
        UShort cbReserved2
        Pointer lpReserved2
        Handle hStdInput
        Handle hStdOutput
        Handle hStdError
    End_Struct
#ENDIF

#IFNDEF _struct_tEPR_ProcessInfo
    Struct tEPR_ProcessInfo
        Handle hProcess
        Handle hThread
        DWord dwProcessId
        DWord dwThreadId
    End_Struct
#ENDIF

// ***** External Function Declarations *****
//
#IFNDEF get_CloseHandleEf
    External_Function CloseHandleEf "CloseHandle" KERNEL32.DLL Handle hObject Returns Integer
#ENDIF

#IFNDEF get_CreatePipeEf
    External_Function CreatePipeEf "CreatePipe" kernel32.dll Handle hReadPipe Handle hWritePipe Pointer lpPipeAttributes DWord nbSize Returns Boolean
#ENDIF

#IFNDEF get_CreateProcessEf
    External_Function CreateProcessEf "CreateProcessA" kernel32.dll Pointer pName Pointer pCmdL Pointer lpPAttr Pointer lpTAttr Integer bInherit Integer dwCrFlag Pointer pEnv Pointer lpCurDir Pointer lpStartup Pointer lpProcInfo Returns Integer
#ENDIF

#IFNDEF get_GetExitCodeProcessEf
    External_Function GetExitCodeProcessEf "GetExitCodeProcess" kernel32.dll Handle hProcess Pointer lpExitCode Returns Integer
#ENDIF

#IFNDEF get_CreatePipeEf
    External_Function CreatePipeEf "CreatePipe" kernel32.dll Handle hReadPipe Handle hWritePipe Pointer lpPipeAttributes DWord nbSize Returns Boolean
#ENDIF

#IFNDEF get_PeekNamedPipeEf
    External_Function PeekNamedPipeEf "PeekNamedPipe" kernel32.dll Handle hPipe Pointer lpBuffer DWord nBufferSize Pointer lpBytesRead Pointer lpTotalBytesAvailable Pointer lpBytesLeftThisMessage Returns Boolean
#ENDIF

#IFNDEF get_ReadFileEf
    External_Function ReadFileEf "ReadFile" kernel32.dll Handle hFile Pointer lpBuffer DWord dwNumberOfBytesToRead Pointer lpdwNumberOfBytesRead Pointer lpOverlapped Returns Boolean
#ENDIF

#IFNDEF get_SleepEf
    External_Function SleepEf "Sleep" kernel32.dll Integer iMilliSeconds Returns Integer
#ENDIF

Class cRDCExternalProgramResult is a cObject

    // *** MAIN MESSAGE ***
    // To Run an external process (DOS program) and capture the output via memory pipe.
    // Parameters:
    //   sCommand is the command line program to run
    //   sParams are the parameters to pass to the program on the command line. If more than one ; surround with quotes
    //   sPath is the path to the commmand line program
    // Retruns:
    //   sOutput is a ByRef string array that will contain the output from the command line program
    //   iRetval is an integer with the exit code from the command line program. Usually a zero means
    //   the process was successful, but you need to query the command line program for details.
    //
    // Acknowledgement: This code is curtesy of Bernhard Ponemayr.
    Function ExternalProgramResult String sCommand String sParams String sPath String[] ByRef sOutput Returns Integer
        String sCmd sPara sWorkDir sExitCode sBuffer sLine
        Pointer pCmd pWorkDir pStartup pProcessInfo pExitCode
        Integer iRet iError iExitCode
        Handle hProcess hThread hReadPipe hWritePipe
        Boolean bRet
        DWord dwBytesRead dwBytesLeft dwBytesTotal
        String[] sReturn
        tEPR_WinSecurityAttributes aAttributes
        tEPR_ProcessInfo ProcessInfo
        tEPR_StartInfo StartInfo

        // Change 9th of March 2014.
        // In some rare cases the sCommand needs to be surrounded by double quotes for the CreateProcess function
        // to work properly.
        If (Left(sCommand, 1) <> '"' and (Left(sCommand, 1) <> "'")) Begin
            Move ('"' + sCommand + '"') to sCommand
        End

        Move (sCommand + " " + sParams + (Character(0))) to sCmd                        // Take Program and CmdLines
        Move (sPath + (Character(0))) to sWorkDir
        Move (AddressOf(sCmd)) to pCmd
        Move (AddressOf(sWorkDir)) to pWorkDir
        Move (OemToAnsi(pCmd, pCmd)) to iRet                                            // Convert to ANSI
        Move (OemToAnsi(pWorkDir, pWorkDir)) to iRet
        If (Trim(sPath) = "" or Trim(sPath) = ".") Begin
            Move 0 to pWorkDir                                                          // If the Directory is empty or . use the current threads directory
        End

        Move (SizeOfType(tEPR_StartInfo)) to StartInfo.cb
        Move (EPR_STARTF_USESHOWWINDOW ior EPR_STARTF_USESTDHANDLES) to StartInfo.dwFlags
        Move SW_HIDE to StartInfo.wShowWindow

        Move (SizeOfType(tEPR_WinSecurityAttributes)) to aAttributes.nLength
        Move 0 to aAttributes.lpDescriptor
        Move True to aAttributes.bInherit
        Move 0 to hReadPipe
        Move 0 to hWritePipe

        // 2013-06-04 Some programs output a _lot_ of data and the returned value
        // was to big for the memory pipe, resulting in an endless loop.
        // This should fix it. (Increased to 512K characters).
        Move (CreatePipeEf(AddressOf(hReadPipe), AddressOf(hWritePipe), AddressOf(aAttributes), 512000)) to bRet

        If (bRet = False) Begin
            Function_Return -1
        End

        Move hWritePipe to StartInfo.hStdOutput
        Move hWritePipe to StartInfo.hStdError

        Move (AddressOf(StartInfo))    to pStartup
        Move (AddressOf(ProcessInfo))  to pProcessInfo

        Move (CreateProcessEf(0, pCmd, 0, 0, True, 0, 0, pWorkDir, pStartup, pProcessInfo)) to iRet   // Create the process
        Move (GetLastError()) to iError

        If (iRet = 0) Begin
            Function_Return -1                                                               // if creation failed return -1
        End
        Move ProcessInfo.hProcess to hProcess
        Move ProcessInfo.hThread  to hThread
        Move (ZeroString(32)) to sExitCode

        Move (AddressOf(sExitCode)) to pExitCode
        Move (GetExitCodeProcessEf(hProcess, pExitCode)) to iRet                             // Get the Process Exit Code
        If (iRet = 0) Begin                                                                  // Return 0 if the Exit Code could not be retrieved
            If (hProcess) Begin
                Move (CloseHandleEf(hProcess)) to iRet                                       // Take care to Destroy the Handles
            End
            If (hThread) Begin
                Move (CloseHandleEf(hThread)) to iRet
            End
            Function_Return 0
        End
        Move (BytesToDword(sExitCode, 1)) to iExitCode

        While (iExitCode = EPR_STILL_ACTIVE)                                                 // Loop as long the Exit code is STILL_ACTIVE
            Move (SleepEf(100)) to iRet                                                      // Very interesting how much faster the program is executed by this line :-)
            Move (ZeroString(32)) to sExitCode
            Move (AddressOf(sExitCode)) to pExitCode
            Move (GetExitCodeProcessEf(hProcess, pExitCode)) to iRet                         // All the same as above
            If (iRet = 0) Begin
                If (hProcess) Begin
                    Move (CloseHandleEf(hProcess)) to iRet
                End
                If (hThread) Begin
                    Move (CloseHandleEf(hThread)) to iRet
                End
                Function_Return 0
            End
            Move (BytesToDword(sExitCode, 1)) to iExitCode
        End

        Move (ZeroString(1024)) to sBuffer
        Move 0 to dwBytesRead
        Move 0 to dwBytesTotal
        Move 0 to dwBytesLeft
        If (PeekNamedPipeEf(hReadPipe, AddressOf(sBuffer), 1024, AddressOf(dwBytesRead), AddressOf(dwBytesTotal), AddressOf(dwBytesLeft))) Begin
            // Init Return Array
            Move "" to sReturn[0]
            While (dwBytesTotal <> 0)
                Move (ZeroString(1024)) to sBuffer
                Move 0 to dwBytesRead
                Move (ReadFileEf(hReadPipe, AddressOf(sBuffer), 1024, AddressOf(dwBytesRead), 0)) to bRet
                Move (dwBytesTotal - dwBytesRead) to dwBytesTotal

                // 2014-07-07 It is possible that a process writes a Char[] and not a String. A Char[] has a Character(0) after each Char resulting in a truncated Return.
                // We therefor check if a CString of the Buffer returns a one character String and if the dwBytesRead (the length the String should have) is greater than 1,
                // then do a simple Char[] to String conversion by replacing all Character(0) with nothing and adding a Character(0) at the end to get a standard
                // C-String again.
                If ( (Length(CString(sBuffer)) = 1) and (dwBytesRead > 1) ) Begin
                    Move (Replaces(Character(0), sBuffer, "")) to sBuffer
                    Move (sBuffer + (Character(0))) to sBuffer
                End

                Move (AnsiToOem(AddressOf(sBuffer), AddressOf(sBuffer))) to iRet
                Move (CString(sBuffer)) to sBuffer
                // Replace all CR+LF with CR
                Move (Replaces((Character(13) + (Character(10))), sBuffer, (Character(13)))) to sBuffer
                // Replace all LF with CR
                Move (Replaces(Character(10), sBuffer, Character(13))) to sBuffer
                // now CR is the one and only Line Break

                While (sBuffer <> "")
                    // No CR in Buffer, append Buffer to the last Return Line
                    If (Pos(Character(13), sBuffer) = 0) Begin
                        Move (sReturn[(SizeOfArray(sReturn) -1)] + sBuffer) to sReturn[(SizeOfArray(sReturn)-1)]
                        Move "" to sBuffer
                    End
                    // CR in Buffer, take line, append it to last Return Line and start a new one
                    Else Begin
                        Move (Left(sBuffer, (Pos(Character(13), sBuffer)))) to sLine
                        Move (Replace(sLine, sBuffer, "")) to sBuffer
                        Move (Replace(Character(13), sLine, "")) to sLine
                        Move (sReturn[(SizeOfArray(sReturn) -1)] + sLine) to sReturn[(SizeOfArray(sReturn) -1)]
                        Move "" to sReturn[(SizeOfArray(sReturn))]
                    End
                Loop
            Loop
        End

        Move (CloseHandleEf(hWritePipe)) to iRet
        Move (CloseHandleEf(hReadPipe)) to iRet
        If (hProcess) Begin
            Move (CloseHandleEf(hProcess)) to iRet                                // Destroy the handles
        End
        If (hThread) Begin
            Move (CloseHandleEf(hThread)) to iRet
        End
        Move sReturn to sOutput
        Function_Return iExitCode                                                 // Return the delivered exit-code
    End_Function

End_Class

#IFNDEF ghoExternalProgramResult
    Global_Variable Integer ghoExternalProgramResult
    Move 0 to ghoExternalProgramResult
#ENDIF

Object oRDCExternalProgramResult is a cRDCExternalProgramResult
    Move Self to ghoExternalProgramResult
    Move 0 to ghoExternalProgramResult
End_Object
