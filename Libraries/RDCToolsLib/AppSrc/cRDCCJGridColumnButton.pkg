// buttons in cjgrid
// 25/11/2014
// Ivan Schoof
//
Use cCJGrid.pkg
Use cCJGridColumn.pkg

#IFNDEF Get_GetCapture
Use cTimer.pkg

Global_Variable Handle ghoReleaseMouse
Move 0 to ghoReleaseMouse

Struct strect
    Integer Left
    Integer top
    Integer Right
    Integer bottom
End_Struct

External_Function GetCapture "GetCapture" User32.dll Returns Integer

Class cReleaseMouse is a cTimer
    Procedure Construct_Object
        Forward Send Construct_Object
        Set pbEnabled to True
        Set piTimeout to 2000
        Property Integer pimaxwidth 0
        Property Integer pimaxheight 0
        Property Integer picont 0
    End_Procedure

    Procedure OnTimer
        strect trecta
        Handle hocapture
        //Integer icont
        Boolean bok
        Move (GetCapture()) to hocapture
        //Get picont of ghoReleaseMouse to icont
        //Increment icont
        //Set picont of ghoReleaseMouse to icont
        If hocapture Begin
            Move 0 to trecta.left
            Move (GetWindowRect(hocapture,AddressOf(trecta))) to bok
            If (((trecta.right-trecta.left)<=pimaxwidth(ghoReleaseMouse) ) and ((trecta.bottom-trecta.top)<=pimaxheight(ghoReleaseMouse))) Begin
                Send Release_Mouse_Capture
            End
            //Showln icont " " hocapture " " trecta.left " " trecta.top " " trecta.right " " trecta.bottom
        End
    End_Procedure
End_Class
#ENDIF

Class cCJGridColumnButton is a cCJGridColumn

    Procedure Construct_Object
        Forward Send Construct_Object
        Set pbResizable to False
        Set pbEditable to False
        Property Integer piIconButton -1
        Property Integer piIconButtonNormal -1
        Property Integer piIconButtonHot -1
        Property Integer piIconButtonPressed -1
        Property Integer piIconButtonDisabled -1

        Property Integer piWidthButton 70
        Property Integer piHeightButton 18
        Property Integer piSizeWidth 0
        Property Integer piSizeHigh  0
        Property Integer piAlignmentButton xtpReportItemControlUnknown //xtpReportItemControlRight xtpReportItemControlLeft
        Property Boolean pbThemedButton True // False
        Property Boolean pbEnableButton True // False
        Property String  psIconButton "" //All states set.
        Property String  psIconButtonNormal "" //This is the image displayed when the item is displayed normally.
        Property String  psIconButtonHot "" //This is the image displayed when the mouse Pointer is positioned over the item.
        Property String  psIconButtonPressed "" //This is the image displayed when the item is in currently pressed my the mouse cursor.
        Property String  psIconButtonDisabled "" //This is the image displayed when the item is in disabled.

        Property String psCaptionButton "My Button"
        Property Integer piCaptionColorButton clGreen
        Property String psFontNameButton "Algerian" //"Book Antiqua"
        Property Integer piFontSizeButton 8
        Property Integer piFontWeightButton 10
        Property Handle phoFont (Create(Self,RefClass(cComStdFont)))
        Property Handle phoReportItemButton (Create(Self,RefClass(cCJReportItemButton)))
        Property Handle phoReportItemControls (Create(Self,RefClass(cCJReportItemControls)))
        If (not(ghoReleaseMouse)) Begin
            Get Create of Desktop (RefClass(cReleaseMouse)) to ghoReleaseMouse
        End
    End_Procedure

    Procedure OnCreateColumn
        Forward Send OnCreateColumn
        Integer iImage
        If (Length(psIconButton(Self))) Begin
            Delegate Get AddImage (psIconButton(Self)) 0 to iImage
            Set piIconButton to iImage
        End
        Else Begin
            Set piIconButton to -1
        End
        If (Length(psIconButtonNormal(Self))) Begin
            Delegate Get AddImage (psIconButtonNormal(Self)) 0 to iImage
            Set piIconButtonNormal to iImage
        End
        Else Begin
            Set piIconButtonNormal to -1
        End
        If (Length(psIconButtonHot(Self))) Begin
            Delegate Get AddImage (psIconButtonHot(Self)) 0 to iImage
            Set piIconButtonHot to iImage
        End
        Else Begin
            Set piIconButtonHot to -1
        End
        If (Length(psIconButtonPressed(Self))) Begin
            Delegate Get AddImage (psIconButtonPressed(Self)) 0 to iImage
            Set piIconButtonPressed to iImage
        End
        Else Begin
            Set piIconButtonPressed to -1
        End
        If (Length(psIconButtonDisabled(Self))) Begin
            Delegate Get AddImage (psIconButtonDisabled(Self)) 0 to iImage
            Set piIconButtonDisabled to iImage
        End
        Else Begin
            Set piIconButtonDisabled to -1
        End
    End_Procedure

    Procedure ButtonAction Integer iRow Integer iCol Short llButton Short llShift
    End_Procedure

    Function ButtonPaint Handle hoGridItemMetrics Integer iRow String ByRef sValue Returns Boolean
        Function_Return False
    End_Function

    Procedure OnSetDisplayMetrics Handle hoGridItemMetrics Integer iRow String ByRef sValue
        Handle hoItem hoReportItemControls hoReportItemButton hoFont
        Variant vItemControls vReportItemButton vFont
        Boolean bButton
        Get phoReportRecordItem to hoItem
        Get ComItemControls of hoItem to vItemControls
        Get phoReportItemControls to hoReportItemControls
        Set pvComObject of hoReportItemControls to vItemControls
        Send ComRemoveAll of hoReportItemControls
        //Send ComRemoveAt of hoReportItemControls 0
        Get ButtonPaint hoGridItemMetrics iRow (&sValue) to bButton
        If bButton Begin
            Get ComAddButton of hoReportItemControls 0 to vReportItemButton
            Get phoReportItemButton to hoReportItemButton
            Set pvComObject of hoReportItemButton to vReportItemButton
            //Send ComSetSize of hoReportItemButton 0 0
            Set ComWidth of hoReportItemButton to (piWidthButton(Self))
            Set ComHeight of hoReportItemButton to (piHeightButton(Self))
            Set ComAlignment of hoReportItemButton to (piAlignmentButton(Self))
            Set ComThemed of hoReportItemButton to (pbThemedButton(Self))
            Set ComEnable of hoReportItemButton to (pbEnableButton(Self))
            // You can set caption and icon in the button ... I suggest only use one of them
            If (piIconButton(Self)>-1) Begin
                Send ComSetIconIndex of hoReportItemButton xtpReportItemButtonStateAll (piIconButton(Self))
            End
            If (piIconButtonNormal(Self)>-1) Begin
                Send ComSetIconIndex of hoReportItemButton xtpReportItemButtonStateNormal (piIconButtonNormal(Self))
            End
            If (piIconButtonHot(Self)>-1) Begin
                Send ComSetIconIndex of hoReportItemButton xtpReportItemButtonStateHot (piIconButtonHot(Self))
            End
            If (piIconButtonPressed(Self)>-1) Begin
                Send ComSetIconIndex of hoReportItemButton xtpReportItemButtonStatePressed (piIconButtonPressed(Self))
            End
            If (piIconButtonDisabled(Self)>-1) Begin
                Send ComSetIconIndex of hoReportItemButton xtpReportItemButtonStateDisabled (piIconButtonDisabled(Self))
            End
            Set ComCaption of hoReportItemButton to (psCaptionButton(Self))
            Set ComCaptionColor of hoReportItemButton to (piCaptionColorButton(Self))
            Get ComFont of hoGridItemMetrics to vFont
            If (not(IsNullComObject(vFont))) Begin
                Get phoFont to hofont
                Set pvComObject of hoFont to vFont
                Set ComName of hoFont to (psFontNameButton(Self))
                Set ComSize of hoFont to (piFontSizeButton(Self))
                Set ComWeight of hofont to (piFontWeightButton(Self))
                Set ComFont of hoReportItemButton to vFont
            End
            //Get ComType of hoReportItemButton to xtpReportItemControlTypeButton
            If (piSizeHigh(Self)>0 and piSizeWidth(Self)>0) Begin
                Send ComSetSize of hoReportItemButton (piSizeWidth(Self)) (piSizeHigh(Self))
            End
            If (piWidthButton(Self)>pimaxwidth(ghoReleaseMouse)) Begin
                Set pimaxwidth of ghoReleaseMouse to (piWidthButton(Self))
            End
            If (piHeightButton(Self)>pimaxheight(ghoReleaseMouse)) Begin
                Set pimaxheight of ghoReleaseMouse to (piHeightButton(Self))
            End
        End
    End_Procedure

    Procedure ReleaseComObject
        Handle hoReportItemControls hoReportItemButton hoFont
        Get phoReportItemControls to hoReportItemControls
        Set pvComObject of hoReportItemControls to (NullComObject())
        Get phoReportItemButton to hoReportItemButton
        Set pvComObject of hoReportItemButton to (NullComObject())
        Get phoFont to hofont
        Set pvComObject of hoFont to (NullComObject())
        Forward Send ReleaseComObject
    End_Procedure

    // call by cdbcjgrid and cdbcjgridpromplist
    Function ColumnOrdering Returns Integer
        Function_Return -1
    End_Function

End_Class

Procedure OnComMouseDown For cCJGrid Short llButton Short llShift Integer llx Integer lly
    Handle hoHitTest hoReportRow hoReportColumn hoItem hoReportItemControls hoItemControl
    Handle hoFocus
    Variant vHit vCol vRow vItem vItemControls vItemControl
    Integer iRow iCol icontrols iType icIndex iwidth itotal icon_width iAlign
    Handle[] hoCols
    Integer[] columnas
    Boolean bEnable bvis

    // THESE LINES COME FROM THE ORIGINAL ONCOMMOUSEDOWN
    Forward Send OnComMouseDown llButton llShift llx lly
    If (llButton=2) Begin
        Get Focus to hoFocus
        If (hoFocus<>Self) Begin
            Send Activate
        End
    End
    Set piLastKey to 0
    Set peGridMouseStatus to gmsMouseStatusDown

    Get ColumnObjectsInDisplayOrder to hoCols
    For icIndex From 0 to (SizeOfArray(hoCols)-1)
        Get piWidth of (hoCols[icIndex]) to iwidth
        Get pbVisible of (hoCols[icIndex]) to bvis
        If bvis Begin
            Move (itotal+iwidth) to itotal
        End
        Move itotal to columnas[icIndex]
    Loop
    Get Create (RefClass(cCJReportHitTestInfo)) to hoHitTest
    Get ComHitTest llx lly to vHit
    Set pvComObject of hoHitTest to vHit
    Get ComItem of hoHitTest to vItem
    If (not(IsNullComObject(vItem))) Begin
        Get phoReportRecordItem to hoItem
        Set pvComObject of hoItem to vItem
        Get ComItemControls of hoItem to vItemControls
        If (not(IsNullComObject(vItemControls))) Begin
            Get Create (RefClass(cCJReportItemControls)) to hoReportItemControls
            Set pvComObject of hoReportItemControls to vItemControls
            Get ComCount of hoReportItemControls to icontrols
            If icontrols Begin
                Get ComItem of hoReportItemControls 0 to vItemControl
                Get Create (RefClass(cCJReportItemButton)) to hoItemControl
                Set pvComObject of hoItemControl to vItemControl
                Get ComType of hoItemControl to iType
                Get ComEnable of hoItemControl to bEnable
                If (bEnable and iType=xtpReportItemControlTypeButton) Begin
                    Get ComRow of hoHitTest to vRow
                    Get phoReportRow to hoReportRow
                    Set pvComObject of hoReportRow to vRow
                    Get ComIndex of hoReportRow to iRow
                    Get phoReportColumn to hoReportColumn
                    Get ComColumn of hoHitTest to vCol
                    Set pvComObject of hoReportColumn to vCol
                    Get ComIndex of hoReportColumn to iCol
                    //Get piSizeWidth of hoCols[iCol] to icon_width
                    Get ComWidth of hoItemControl to icon_width
                    Get piWidth of (hoCols[iCol]) to iwidth
                    Move (icon_width min iwidth) to icon_width
                    Get ComAlignment of hoItemControl to iAlign
                    Send Destroy of hoItemControl
                    Send Destroy of hoReportItemControls
                    If ( Prompt_Object(hoCols[iCol]) and pbVisible(hoCols[iCol])) Begin
                        //If ((llx>(columnas[iCol]-icon_width)) and (llx<=columnas[iCol])) Begin
                        //   Send Prompt of hoCols[iCol]
                        //End
                        If (llx<=(columnas[iCol]-icon_width)) Begin
                            If (pbEditable(hoCols[iCol])) Begin
                                Send BeginEdit
                            End
                        End
                    End
                    Else If (pbEnableButton(hoCols[iCol])) Begin
                        If ( (iAlign=xtpReportItemControlRight and llx>(columnas[iCol]-icon_width)) ;
                            or ;
                            (iAlign=xtpReportItemControlLeft and llx<=(columnas[iCol]-iwidth+icon_width)) ;
                            or ;
                            (iAlign=xtpReportItemControlUnknown and llx<=(columnas[iCol]-iwidth+icon_width))) ;
                            Begin
                            Send MoveToRow iRow
                            Send ButtonAction to hoCols[iCol] iRow iCol llButton llShift
                        End
                    End
                End
                Else Begin
                    Send Destroy of hoItemControl
                End
            End
            Else Begin
                Send Destroy of hoReportItemControls
            End
        End
    End
    Send Destroy of hoHitTest
End_Procedure
