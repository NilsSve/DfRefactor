Use VdfBase.pkg
Use gFormatNumbers.pkg

Use DFUnit\Testing\Test.pkg
Use DFUnit\Testing\TestRunner.pkg
Use DFUnit\Fixturing\Fixture.pkg
Use DFUnit\Results\StatisticsCollector.pkg
Use DFUnit\Reporting\ReporterInterface.pkg

Use RGB.pkg
#IFNDEF clEditorBackGround
    Define clEditorBackGround for (RGB(36, 49, 68)) // HTML 243144
#ENDIF

Class cDFUnitLineBasedReporter_Mixin is a Mixin
    
    { Visibility=Private }
    Procedure Define_cDFUnitLineBasedReporter_Mixin
        { Visibility=Private }
        Property Integer piScope 0
        { Visibility=Private }
        Property Boolean pbNewLine True
        { Visibility=Private }
        Property String psLine "----------------------------------------------------------------------"
        
        { Visibility=Private }
        Property Integer piIndentationIncrease 4
    End_Procedure
    
    Procedure StartFixture Handle hEnv
        Handle hFixture
        Get Current_Fixture of hEnv to hFixture
        
        Send IncreaseScope
        Set TextBackColor to clEditorBackGround
        Send PrintLn (FixtureName(hFixture))
    End_Procedure
    
    Procedure EndFixture Handle hEnv
        Send DecreaseScope
    End_Procedure
    
    Procedure StartTest Handle hEnv
        Handle hTest
        Get Current_Test of hEnv to hTest
        
        Send IncreaseScope
        Send Print (TestName(hTest))
    End_Procedure
    
    Procedure Set Color Integer iColor
    End_Procedure
    
    Procedure Fail_Assert Handle hEnv String sAssertMessage String[] asMessages
        Handle hTest
        String sNose sTail
        Integer iPos iMessageIterator
        
        Get Current_Test of hEnv to hTest
//        Set Color to clRed   
        Set TextBackColor to clRed
        Send PrintLn (" " + CS_FailedClause)
        
        Send IncreaseScope
        Send PrintLn (SFormat("Assertion Failed: '%1'.", sAssertMessage))
        Send IncreaseScope
        // We format the "Should have been" and "but was" so they appear
        // on two aligned lines.
        For iMessageIterator from 0 to (SizeOfArray(asMessages) - 1)
            Move asMessages[iMessageIterator] to sNose
            Move (Pos("but was", sNose)) to iPos
            Move (Mid(sNose, Length(sNose), iPos)) to sTail
            Move (Replace("but was", sTail, "but was         ")) to sTail
            Move (Left(sNose, iPos -1)) to sNose
            Send PrintLn sNose
            Send PrintLn sTail
        Loop
        Send DecreaseScope
        Send DecreaseScope
        Set TextBackColor to clEditorBackGround
    End_Procedure
    
    Procedure Succeed_Assert Handle hEnv
    End_Procedure
    
    Procedure Error_Occured Handle hEnv tDFUnitErrorInfo oError
        Handle hTest
        Get Current_Test of hEnv to hTest
        
//        Set Color to clRed
        Set TextBackColor to clRed
        Send PrintLn (" " + CS_FailedClause)
        
        Send IncreaseScope
        
        String sErrorExtenders
        If (oError.bFatal) Begin
            Move "Fatal" to sErrorExtenders
        End
        If (oError.bUser) Begin
            Move (If(Length(sErrorExtenders) = 0, "User", " User")) to sErrorExtenders
        End
        
        Send PrintLn (SFormat("Unexpected %1 Error Occured:", sErrorExtenders))
        Send IncreaseScope
        Send PrintLn (SFormat("Line: %1.", oError.iErrLine))
        Send PrintLn (SFormat("Error Nr: %1.", oError.iErrorCode))
        Send PrintLn "Error Message:"
        
        Send IncreaseScope
        String sIndentation
        Get ScopeIndentation to sIndentation
        
        Move (Replaces("\n", oError.sErrText, Character(10) + sIndentation)) to oError.sErrText
        Move (Replaces("\r\n", oError.sErrText, Character(10) + sIndentation)) to oError.sErrText
        Move (Replaces(Character(10), oError.sErrText, Character(10) + sIndentation)) to oError.sErrText
        
        Send PrintLn ("'" + oError.sErrText + "'.")
        Send DecreaseScope
        
        Send PrintLn "CallStack:"
        Send IncreaseScope
        
        Move (Replaces("\n", oError.sCallStack, Character(10) + sIndentation)) to oError.sCallStack
        Move (Replaces("\r\n", oError.sCallStack, Character(10) + sIndentation)) to oError.sCallStack
        Move (Replaces(Character(10), oError.sCallStack, Character(10) + sIndentation)) to oError.sCallStack
        
        Send PrintLn oError.sCallStack
        Send DecreaseScope
        
        Send DecreaseScope
        Send DecreaseScope
    End_Procedure
    
    Procedure EndTest Handle hEnv
        Handle hTest
        Get Current_Test of hEnv to hTest
        
        If (Current_Test_Succeeded(hEnv)) Begin
            Set TextBackColor to clEditorBackGround
            Send PrintLn (" [Ok]")
        End
        Send DecreaseScope
    End_Procedure
    
    Procedure Finish Handle hEnv
        String sTotalAssertions
        Move (String(TotalAssertions(hEnv))) to sTotalAssertions
        
        Send Line
        Send PrintLn (SFormat("Assertions: %1/%2", TotalSucceededAssertions(hEnv), sTotalAssertions))
        Send PrintLn (SFormat("Tests: %1/%2", TotalSucceededTests(hEnv), TotalTests(hEnv)))
        Send PrintLn (SFormat("Errors: %1", TotalErrors(hEnv)))
        Send Line
        If (TestsSucceeded(hEnv)) Begin
//            Set Color to clLime
            Set TextBackColor to clEditorBackGround
            Send PrintLn "Tests: Succeeded!"
        End
        Else Begin
            Set TextBackColor to clRed 
            Send PrintLn ("Tests:" * CS_FailedClause)
        End
    End_Procedure
    
    { Visibility=Private }
    Function ScopeIndentation Returns String
        If (pbNewLine(Self) = False) ;
            Function_Return ""
            
        Integer iScope
        Get CurrentScope to iScope
        Function_Return (Repeat(" ", iScope * piIndentationIncrease(Self)))
    End_Function
    
    { Visibility=Private }
    Procedure IncreaseScope
        Integer iScope
        Get CurrentScope to iScope
        Increment iScope
        Set piScope to iScope
    End_Procedure
    
    { Visibility=Private }
    Procedure DecreaseScope
        Integer iScope
        Get CurrentScope to iScope
        Decrement iScope
        Set piScope to iScope
    End_Procedure
    
    { Visibility=Private }
    Function CurrentScope Returns Integer
        Function_Return (piScope(Self))
    End_Function
    
End_Class