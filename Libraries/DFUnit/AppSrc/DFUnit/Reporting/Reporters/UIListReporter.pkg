Use cRichEdit.pkg
#IFNDEF clEditorBackGround
    Define clEditorBackGround for (RGB(36, 49, 68)) // HTML 243144
#ENDIF

Use DFUnit\Reporting\LineBasedReporting.pkg

Class cDFUnitUIListInmediateReporter is a cRichEdit
        
    Import_Class_Protocol cDFUnitLineBasedReporter_Mixin
    Import_Class_Protocol IReporter_Mixin cDFUnitUIListInmediateReporter All No_Overwrite
    
    Procedure Construct_Object
        Forward Send Construct_Object
        
        Send HideSelection True 
        // It is very handy to be able to copy text from the output:
//        Set Focus_Mode to NonFocusable
//        Set Read_Only_State to False
//        Set Color to clWhite

        Set Color to clEditorBackGround   
        Set TextColor to clWhite    
        Send Define_cDFUnitLineBasedReporter_Mixin 
        // Set to  a fix typeface & a larger font size to make it easier to read.
        Set psTypeFace to "Cascadia Mono"
        // Set fontsize to 11 (* 20 twips) 
        Set piFontSize to (11 * 20)
    End_Procedure
    
    Procedure Set Color Integer iColor
        Forward Set Color to iColor
    End_Procedure
    
    Procedure Start Handle hEnv
        Send Select_All
        Send Delete
//        Set Color to clGray  
        Set Color to clEditorBackGround
    End_Procedure
    
    { Visibility=Private }
    Procedure Print String sLine
        String sIndentation
        
        Get ScopeIndentation to sIndentation
        Send AppendText (sIndentation + sLine)
        Set pbNewLine to False
    End_Procedure
    
    { Visibility=Private }
    Procedure PrintLn String sLine
        String sIndentation
        
        Get ScopeIndentation to sIndentation
        Send AppendTextLn (sIndentation + sLine)
        Set pbNewLine to True
    End_Procedure
    
    { Visibility=Private }
    Procedure Line
        If (pbNewLine(Self) = False) ;
            Send PrintLn ""
        Send AppendTextLn (psLine(Self))
    End_Procedure
    
End_Class

Class cDFUnitUIListReporter is a cDFUnitUIListInmediateReporter
    
    Procedure Construct_Object
        Forward Send Construct_Object
        
        { Visibility=Private }
        Property String[] paMessages
    End_Procedure
    
    Procedure Start Handle hEnv
        String[] aMessages
        
        Forward Send Start      
        // This will set the array to zero for each run:
        Move "" to aMessages[SizeOfArray(aMessages)]
        Set paMessages to aMessages
    End_Procedure
    
    Procedure Finish Handle hEnv
        Integer iIterator iMaxIndex iRow iPos
        String[] aMessages
        String sMessage
        
        Forward Send Finish hEnv
        Get paMessages to aMessages
        // Minus the last empty entry.
        Move (SizeOfArray(aMessages) - 1 - 1) to iMaxIndex
        Set TextBackColor to clEditorBackGround
        For iIterator from 0 to iMaxIndex
            Move aMessages[iIterator] to sMessage
            If (Lowercase(sMessage) contains Lowercase(CS_FailedClause)) Begin
                Get UnitTestFileLineNumber of ghoTestApplication sMessage to iRow
                If (iRow <> -1) Begin
                    Move (Pos("]", sMessage)) to iPos
                    If (iPos <> 0) Begin
                        Append sMessage " In procedure starting on line: " iRow
                        Move sMessage to aMessages[iIterator]
                    End
                End  
                Set TextBackColor to clRed
            End
//            If (Lowercase(sMessage) contains "[ok]") Begin
            Else Begin
                Set TextBackColor to clEditorBackGround
            End
            Send AppendTextLn aMessages[iIterator]
        Loop
    End_Procedure
    
    { Visibility=Private }
    Procedure Print String sLine
        String sIndentation
        String[] aMessages
        
        Get ScopeIndentation to sIndentation
        Get paMessages to aMessages
        
        If (pbNewLine(Self) = True) Begin
            Move (sIndentation + sLine) to aMessages[SizeOfArray(aMessages) - 1]
        End
        Else Begin
            Move (aMessages[SizeOfArray(aMessages) - 1] + sLine) to aMessages[SizeOfArray(aMessages) - 1]
        End
        
        Set paMessages to aMessages
        Set pbNewLine to False
    End_Procedure
    
    { Visibility=Private }
    Procedure PrintLn String sLine
        String[] aMessages
        
        Send Print sLine
        Get paMessages to aMessages
        Move "" to aMessages[SizeOfArray(aMessages)]
        Set paMessages to aMessages
        Set pbNewLine to True
    End_Procedure
    
    { Visibility=Private }
    Procedure Line
        String[] aMessages
        
        If (pbNewLine(Self) = False) ;
            Send PrintLn ""
        Get paMessages to aMessages
        Move (psLine(Self)) to aMessages[SizeOfArray(aMessages) - 1]
        Move "" to aMessages[SizeOfArray(aMessages)]
        Set paMessages to aMessages
    End_Procedure
    
End_Class