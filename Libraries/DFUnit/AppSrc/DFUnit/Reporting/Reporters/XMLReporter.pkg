Use seq_chnl.pkg
Use DFUNit\Results\ResultCollector.pkg

Define XML_NEWLINE_REPLACE for "&#10;"

Class cDFUnitXMLReporter is a cDFUnitResultCollector_Mixin
    
    Procedure Construct_Object
        Property String psFileName "test_results.xml"
        
        { Visibility=Private }
        Property Integer piChannel -1
        
        Send Define_cDFUnitResultCollector_Mixin
    End_Procedure
    
    {Visibility=Private}
    Procedure Write String sText
        Write channel (piChannel(Self)) sText
    End_Procedure
    
    {Visibility=Private}
    Procedure WriteTest tDFUnitTestResult oTestResult
        String[] asMessages
        TimeSpan tsTook
        String sMessage sErrorExtenders sTime
        Integer iIterator iMessageIterator iMaxIndex iMaxMessageIndex
        
        Move (oTestResult.dtEnded - oTestResult.dtStarted) to tsTook
        If (SpanTotalSeconds(tsTook) = 0) Begin
            Move ('time="0.' + String(SpanTotalMilliseconds(tsTook)) + '"') to sTime
        End
        Else Begin
            Move ('time="' + String(SpanTotalSeconds(tsTook)) + "." + String(SpanMilliseconds(tsTook)) + '"') to sTime
        End

        Send Write (SFormat('<testcase name="%1" assertions="%2" %3>', TestName(oTestResult.hTest), oTestResult.ulFailedAssertions + oTestResult.ulSucceededAssertions, Replaces(",", sTime, ".")))        
        
        Move (SizeOfArray(oTestResult.aErrors) - 1) to iMaxIndex
        For iIterator from 0 to iMaxIndex
            If (oTestResult.aErrors[iIterator].bFatal) Begin
                Move "Fatal" to sErrorExtenders
            End
            If (oTestResult.aErrors[iIterator].bUser) Begin
                Move (If(Length(sErrorExtenders) = 0, "User", " User")) to sErrorExtenders
            End
            
            Move (SFormat("Unexpected %1 Error Occured:" + XML_NEWLINE_REPLACE, sErrorExtenders)) to sMessage
            Move (Append(sMessage, (SFormat("Line: %1." + XML_NEWLINE_REPLACE, oTestResult.aErrors[iIterator].iErrLine)))) to sMessage
            Move (Append(sMessage, (SFormat("Error Nr: %1." + XML_NEWLINE_REPLACE, oTestResult.aErrors[iIterator].iErrorCode)))) to sMessage
            Move (Append(sMessage, "Error Message:" + XML_NEWLINE_REPLACE)) to sMessage
            Move (Append(sMessage, ("'" + oTestResult.aErrors[iIterator].sErrText + "'." + XML_NEWLINE_REPLACE))) to sMessage
            Move (Append(sMessage, "CallStack:" + XML_NEWLINE_REPLACE)) to sMessage
            Move (Append(sMessage, oTestResult.aErrors[iIterator].sCallStack)) to sMessage
            
            Move (Replaces("\n", sMessage, XML_NEWLINE_REPLACE)) to sMessage
            Move (Replaces("\r\n", sMessage, XML_NEWLINE_REPLACE)) to sMessage
            Move (Replaces(Character(10), sMessage, XML_NEWLINE_REPLACE)) to sMessage
            
            Send Write (SFormat('<error message="%1"></error>', sMessage))
        Loop
        
        Move (SizeOfArray(oTestResult.aFailedAssertions) - 1) to iMaxIndex
        For iIterator from 0 to iMaxIndex
            Move (oTestResult.aFailedAssertions[iMaxIndex].sAssertMessage + XML_NEWLINE_REPLACE) to sMessage
            
            Move oTestResult.aFailedAssertions[iIterator].asMessages to asMessages
            Move (SizeOfArray(asMessages) - 1) to iMaxMessageIndex
            For iMessageIterator from 0 to iMaxMessageIndex
                Move (Append(sMessage, asMessages[iMessageIterator] + XML_NEWLINE_REPLACE)) to sMessage
            Loop
            
            Move (Replaces("\n", sMessage, XML_NEWLINE_REPLACE)) to sMessage
            Move (Replaces("\r\n", sMessage, XML_NEWLINE_REPLACE)) to sMessage
            Move (Replaces(Character(10), sMessage, XML_NEWLINE_REPLACE)) to sMessage
            
            Send Write (SFormat('<failure message="%1"></failure>', sMessage))
        Loop
        
        Send Write '</testcase>'
    End_Procedure
    
    {Visibility=Private}
    Procedure WriteFixture Handle hFixture
        String sFixtureName
        tDFUnitFixtureResult oFixtureResult
        Integer iIterator iMaxIndex
        
        Get ResultOfFixture hFixture to oFixtureResult
        Get FixtureName of hFixture to sFixtureName
        Send Write (SFormat('<testsuite name="%1" errors="%2" failures="%3">', sFixtureName, oFixtureResult.ulTotalErrors, oFixtureResult.ulTotalFailedAssertions))
        
        Move (SizeOfArray(oFixtureResult.ahChildFixtures) - 1) to iMaxIndex
        For iIterator from 0 to iMaxIndex
            Send WriteFixture oFixtureResult.ahChildFixtures[iIterator]
        Loop
        
        Move (SizeOfArray(oFixtureResult.aTestResults) - 1) to iMaxIndex
        For iIterator from 0 to iMaxIndex
            Send WriteTest oFixtureResult.aTestResults[iIterator]
        Loop
        
        Send Write '</testsuite>'
    End_Procedure

    {Visibility=Private}
    Procedure Finish Handle hEnv
        Integer iChannel
        Boolean bExists
        String sFileName
        
        Forward Send Finish
        Get psFileName to sFileName
        File_Exist sFileName bExists
        If bExists Begin
            EraseFile sFileName
        End
        
        Move (Seq_New_Channel()) to iChannel
        Direct_Output channel iChannel ('BINARY: ' + sFileName)
        Set piChannel to iChannel
        
        Send Write '<?xml version="1.0" encoding="UTF-8"?>'
        Send Write '<testsuites>'
        
        Send WriteFixture ghoTestApplication
        
        Send Write '</testsuites>'
        
        Close_Output channel iChannel
        Set piChannel to -1
    End_Procedure
    
End_Class
