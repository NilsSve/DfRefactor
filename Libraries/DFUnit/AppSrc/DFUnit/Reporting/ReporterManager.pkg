Use DFUnit\Reporting\ReporterInterface.pkg

Class cDFUnitReporterManager_Mixin is a Mixin
    
    Procedure Define_cDFUnitReporterManager_Mixin
        Property Handle[] paReporters
    End_Procedure
    
    Procedure AddReporter Handle hReporter
        Handle[] aReporters
        Get paReporters to aReporters
        Move hReporter to aReporters[SizeOfArray(aReporters)]
        Set paReporters to aReporters
    End_Procedure

    Procedure RemoveReporter Handle hReporter
        Integer iIterator
        Handle[] aReporters
        Get paReporters to aReporters
        
        For iIterator from 0 to (SizeOfArray(aReporters) - 1)
            If (aReporters[iIterator] = hReporter) Begin
                Move (RemoveFromArray(aReporters, iIterator)) to aReporters
            End
        Loop
        
        Set paReporters to aReporters
    End_Procedure
    
    { Visibility=Private }
    Procedure Reporters_Start Handle hEnv
        Send SendMessageToReporters (RefProc(Start)) hEnv
    End_Procedure
    
    { Visibility=Private }
    Procedure Reporters_StartFixture Handle hEnv
        Send SendMessageToReporters (RefProc(StartFixture)) hEnv
    End_Procedure
    
    { Visibility=Private }
    Procedure Reporters_EndFixture Handle hEnv
        Send SendMessageToReporters (RefProc(EndFixture)) hEnv
    End_Procedure
    
    { Visibility=Private }
    Procedure Reporters_StartTest Handle hEnv
        Send SendMessageToReporters (RefProc(StartTest)) hEnv
    End_Procedure
    
    { Visibility=Private }
    Procedure Reporters_Fail_Assert Handle hEnv String sAssertMessage String[] asMessages
        Integer iIterator
        Handle[] aReporters
        
        Get paReporters to aReporters
        
        For iIterator from 0 to (SizeOfArray(aReporters) - 1)
            Send Fail_Assert of aReporters[iIterator] hEnv sAssertMessage asMessages
        Loop
    End_Procedure
    
    { Visibility=Private }
    Procedure Reporters_Succeed_Assert Handle hEnv
        Send SendMessageToReporters (RefProc(Succeed_Assert)) hEnv
    End_Procedure
    
    { Visibility=Private }
    Procedure Reporters_Error_Occured Handle hEnv tDFUnitErrorInfo oError
        Integer iIterator
        Handle[] aReporters
        
        Get paReporters to aReporters
        
        For iIterator from 0 to (SizeOfArray(aReporters) - 1)
            Send Error_Occured of aReporters[iIterator] hEnv oError
        Loop
    End_Procedure
    
    { Visibility=Private }
    Procedure Reporters_EndTest Handle hEnv
        Send SendMessageToReporters (RefProc(EndTest)) hEnv
    End_Procedure
    
    { Visibility=Private }
    Procedure Reporters_Finish Handle hEnv
        Send SendMessageToReporters (RefProc(Finish)) hEnv
    End_Procedure
    
    { Visibility=Private }
    Procedure SendMessageToReporters Handle hMessage Handle hEnv
        Integer iIterator
        Handle[] aReporters
        
        Get paReporters to aReporters
        
        For iIterator from 0 to (SizeOfArray(aReporters) - 1)
            Send hMessage of aReporters[iIterator] hEnv
        Loop
    End_Procedure
    
End_Class
