Use DFUnit\Globals.pkg
Use DFUnit\Reporting\ReporterInterface.pkg

Use DFUnit\Utils\ErrorSystem.pkg

{ Visibility=Private }
Struct tDFUnitFailedAssert
    String sAssertMessage 
    String[] asMessages
End_Struct

{ Visibility=Private }
Struct tDFUnitTestResult
    Handle hTest
    
    UBigInt ulFailedAssertions
    UBigInt ulSucceededAssertions
    UBigInt ulErrors
    
    tDFUnitFailedAssert[] aFailedAssertions
    tDFUnitErrorInfo[] aErrors
    
    DateTime dtStarted
    DateTime dtEnded
End_Struct

{ Visibility=Private }
Struct tDFUnitFixtureResult
    Handle hFixture
    Handle[] ahChildFixtures
    tDFUnitTestResult[] aTestResults
    
    UBigInt ulTotalFailedAssertions
    UBigInt ulTotalSucceededAssertions
    UBigInt ulTotalErrors
End_Struct

Class cDFUnitResultCollector_Mixin is a Mixin
    
    { Visibility=Private }
    Procedure Define_cDFUnitResultCollector_Mixin
        // Final Data
        { Visibility=Private }
        Property Handle[] paFixtures
        { Visibility=Private }
        Property tDFUnitFixtureResult[] paFixtureResults
        
        // Stacks
        { Visibility=Private }
        Property tDFUnitFixtureResult[] paFixtureStack
        { Visibility=Private }
        Property tDFUnitTestResult[] paTestStack
    End_Procedure
    
    Function ResultOfFixture Handle hFixture Returns tDFUnitFixtureResult
        Integer iIndex
        Handle[] aFixtures
        tDFUnitFixtureResult[] aFixtureResults
        
        Get paFixtures to aFixtures
        Move (BinarySearchArray(hFixture, aFixtures)) to iIndex
        If (iIndex = -1) Begin
            Error DFERR_PROGRAM "Something went wrong, the fixture could not be found in the results."
            Function_Return 0
        End
        
        Get paFixtureResults to aFixtureResults
        Function_Return aFixtureResults[iIndex] 
    End_Function
    
    { Visibility=Private }
    Procedure PushFixture Handle hFixture
        tDFUnitFixtureResult oResult
        Move hFixture to oResult.hFixture
        
        Integer iParentIndex iTotalChildren
        tDFUnitFixtureResult[] aFixtureStack
        
        Get paFixtureStack to aFixtureStack
        Move (SizeOfArray(aFixtureStack) - 1) to iParentIndex
        
        // Set ourselves to our parent if we have one.
        If (iParentIndex >= 0) Begin
            Move (SizeOfArray(aFixtureStack[iParentIndex].ahChildFixtures)) to iTotalChildren
            Move hFixture to aFixtureStack[iParentIndex].ahChildFixtures[iTotalChildren]
        End
        
        Move oResult to aFixtureStack[iParentIndex + 1]
        Set paFixtureStack to aFixtureStack
    End_Procedure
    
    { Visibility=Private }
    Procedure PopFixture
        Integer iTopIndex
        tDFUnitFixtureResult[] aFixtureStack
        Get paFixtureStack to aFixtureStack
        
        // Get the top result.
        Move (SizeOfArray(aFixtureStack) - 1) to iTopIndex
        
        Integer iTestIterator
        For iTestIterator from 0 to (SizeOfArray(aFixtureStack[iTopIndex].aTestResults) - 1)
            If (aFixtureStack[iTopIndex].aTestResults[iTestIterator].ulErrors = 0) Begin
                If (aFixtureStack[iTopIndex].aTestResults[iTestIterator].ulFailedAssertions = 0) Begin
                    Increment aFixtureStack[iTopIndex].ulTotalSucceededAssertions
                End
                Else Begin
                    Increment aFixtureStack[iTopIndex].ulTotalFailedAssertions
                End
            End
            Else Begin
                Increment aFixtureStack[iTopIndex].ulTotalErrors
            End
        Loop
        
        Integer iChildFixtureIterator
        tDFUnitFixtureResult oChildFixtureResult
        For iChildFixtureIterator from 0 to (SizeOfArray(aFixtureStack[iTopIndex].ahChildFixtures) - 1)
            Get ResultOfFixture aFixtureStack[iTopIndex].ahChildFixtures[iChildFixtureIterator] to oChildFixtureResult
            Move (aFixtureStack[iTopIndex].ulTotalErrors + oChildFixtureResult.ulTotalErrors) to  aFixtureStack[iTopIndex].ulTotalErrors
            Move (aFixtureStack[iTopIndex].ulTotalFailedAssertions + oChildFixtureResult.ulTotalFailedAssertions) to aFixtureStack[iTopIndex].ulTotalFailedAssertions
            Move (aFixtureStack[iTopIndex].ulTotalSucceededAssertions + oChildFixtureResult.ulTotalSucceededAssertions) to aFixtureStack[iTopIndex].ulTotalSucceededAssertions
        Loop
        
        Integer iIndex
        Handle[] aFixtures
        tDFUnitFixtureResult[] aFixtureResults
        Get paFixtures to aFixtures
        Get paFixtureResults to aFixtureResults
        
        // Find a binairy lookup index for the current hFixture.
        Move (BinarySearchArray(aFixtureStack[iTopIndex].hFixture, aFixtures)) to iIndex
        If (iIndex <> -1) Begin
            Error DFERR_PROGRAM "Something unexpected has occured, the fixture is already in the results."
            Procedure_Return
        End
        
        // Insert into the fixtures and fixtureresults.
        Move (BinarySearchInsertPos()) to iIndex
        Move (InsertInArray(aFixtures, iIndex, aFixtureStack[iTopIndex].hFixture)) to aFixtures
        Move (InsertInArray(aFixtureResults, iIndex, aFixtureStack[iTopIndex])) to aFixtureResults
        
        Move (RemoveFromArray(aFixtureStack, iTopIndex)) to aFixtureStack
        
        Set paFixtureStack to aFixtureStack
        Set paFixtures to aFixtures
        Set paFixtureResults to aFixtureResults
    End_Procedure
    
    { Visibility=Private }
    Procedure PushTest Handle hTest
        tDFUnitTestResult oResult
        Move hTest to oResult.hTest
        Move (CurrentDateTime()) to oResult.dtStarted
        
        tDFUnitTestResult[] aTestStack
        Get paTestStack to aTestStack
        Move oResult to aTestStack[SizeOfArray(aTestStack)]
        Set paTestStack to aTestStack
    End_Procedure
    
    { Visibility=Private }
    Procedure PopTest
        Integer iTopIndex
        tDFUnitTestResult oResult
        tDFUnitTestResult[] aTestStack
        Get paTestStack to aTestStack
        
        Move (SizeOfArray(aTestStack) - 1) to iTopIndex
        Move aTestStack[iTopIndex] to oResult
        Move (CurrentDateTime()) to oResult.dtEnded
        
        Get CurrentTestFailedAssertions of ghoTestApplication to oResult.ulFailedAssertions
        Get CurrentTestSucceededAssertions of ghoTestApplication to oResult.ulSucceededAssertions
        Get CurrentTestErrors of ghoTestApplication to oResult.ulErrors
        
        Move (RemoveFromArray(aTestStack, iTopIndex)) to aTestStack
        Set paTestStack to aTestStack
        
        tDFUnitFixtureResult[] aFixtureStack
        Get paFixtureStack to aFixtureStack
        Move (SizeOfArray(aFixtureStack) - 1) to iTopIndex
        Move oResult to aFixtureStack[iTopIndex].aTestResults[SizeOfArray(aFixtureStack[iTopIndex].aTestResults)]
        Set paFixtureStack to aFixtureStack
    End_Procedure
    
    Procedure Start Handle hEnv
        Handle[] aFixtures
        tDFUnitFixtureResult[] aFixtureResults aFixtureStack
        
        Set paFixtures to aFixtures
        Set paFixtureResults to aFixtureResults
        Set paFixtureStack to aFixtureStack
    End_Procedure
    
    Procedure StartFixture Handle hEnv
        Handle hFixture
        Get Current_Fixture of ghoTestApplication to hFixture
        Send PushFixture hFixture
    End_Procedure
    
    Procedure EndFixture Handle hEnv
        Send PopFixture
    End_Procedure
    
    Procedure StartTest Handle hEnv
        Handle hTest
        Get Current_Test of ghoTestApplication to hTest
        Send PushTest hTest
    End_Procedure
    
    Procedure Fail_Assert Handle hEnv String sAssertMessage String[] asMessages
        Integer iTopIndex
        tDFUnitTestResult oResult
        tDFUnitTestResult[] aTestStack
        Get paTestStack to aTestStack
        
        Move (SizeOfArray(aTestStack) - 1) to iTopIndex
        Move aTestStack[iTopIndex] to oResult
        
        tDFUnitFailedAssert oFailedAssert
        Move sAssertMessage to oFailedAssert.sAssertMessage
        Move asMessages to oFailedAssert.asMessages
        Move oFailedAssert to oResult.aFailedAssertions[SizeOfArray(oResult.aFailedAssertions)]
        
        Move oResult to aTestStack[iTopIndex]
        Set paTestStack to aTestStack
    End_Procedure
    
    Procedure Succeed_Assert Handle hEnv
        // Evaluated from the total in the ghoTestApplication
    End_Procedure
    
    Procedure Error_Occured Handle hEnv tDFUnitErrorInfo oError
        Integer iTopIndex
        tDFUnitTestResult oResult
        tDFUnitTestResult[] aTestStack
        Get paTestStack to aTestStack
        
        Move (SizeOfArray(aTestStack) - 1) to iTopIndex
        Move aTestStack[iTopIndex] to oResult
        
        Move oError to oResult.aErrors[SizeOfArray(oResult.aErrors)]
        
        Move oResult to aTestStack[iTopIndex]
        Set paTestStack to aTestStack
    End_Procedure
    
    Procedure EndTest Handle hEnv
        Send PopTest
    End_Procedure
    
    Procedure Finish Handle hEnv
        tDFUnitFixtureResult[] aFixtureStack
        tDFUnitTestResult[] aTestStack
        
        Get paFixtureStack to aFixtureStack
        Get paTestStack to aTestStack
        
        If (SizeOfArray(aFixtureStack) <> 0 or SizeOfArray(aTestStack) <> 0) Begin
            Error DFERR_PROGRAM "Something went wrong, the stacks should be empty."
            Procedure_Return
        End
    End_Procedure
End_Class