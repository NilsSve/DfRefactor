Use VdfBase.pkg

Use DFUnit\Globals.pkg

Use DFUnit\Utils\ErrorSystem.pkg
Use DFUnit\Utils\Debugger.pkg

Class cDFUnitErrorTracker is a cObject
    
    Procedure Construct_Object
        Move Self to ghoErrorTracker
        
        {Visibility=Private}
        Property Integer[] paExpectedErrors
        {Visibility=Private}
        Property tDFUnitErrorInfo[] paErrorStack
        {Visibility=Private}
        Property tDFUnitErrorInfo[] paAllErrors
        {Visibility=Private}
        Property Handle[] paTrackerEventHandlers
         
        Object poErrorHandler is a cDFUnitErrorSystem
        End_Object
    End_Procedure
    
    Function Enabled Returns Boolean
        Function_Return (Enabled(poErrorHandler))
    End_Function
    
    Procedure ExpectError Integer iErrNum
        Integer iIndex
        Integer[] aExpectedErrors
        Get paExpectedErrors to aExpectedErrors
        Move iErrNum to aExpectedErrors[SizeOfArray(aExpectedErrors)]
        Set paExpectedErrors to aExpectedErrors
    End_Procedure
    
    Function WasErrorExpected Integer iErrNum Returns Boolean
        Integer iIndex
        Integer[] aExpectedErrors
        Get paExpectedErrors to aExpectedErrors
        
        For iIndex from 0 to (SizeOfArray(aExpectedErrors) - 1)
            If (aExpectedErrors[iIndex] = iErrNum) ;
                Function_Return True
        Loop
        
        Function_Return False
    End_Function
    
    { Obsolete=True }
    Procedure CheckIfExpectedError
        // Behaviours are different now, we expect an error and it counts till the unexpect.
        // If the expected errors are not empty at the end we get an error.
        // An expected error counts as a successfull assert.
        // Otherwise an error is counted.
    End_Procedure
    
    Procedure UnExpectError Integer iErrNum
        Integer iIndex
        Integer[] aExpectedErrors
        Get paExpectedErrors to aExpectedErrors
        
        If (num_arguments > 0) Begin
            For iIndex from 0 to (SizeOfArray(aExpectedErrors) - 1)
                If (aExpectedErrors[iIndex] = iErrNum) Begin
                    Move (RemoveFromArray(aExpectedErrors, iIndex)) to aExpectedErrors
                    Set paExpectedErrors to aExpectedErrors
                    Procedure_Return
                End
            Loop  
        End
        Else Begin
            Move (SizeOfArray(aExpectedErrors) - 1) to iIndex
            If (iIndex < 0) Begin
                Send DFUnit_ThrowErrorNormalIfDebugger DFERR_PROGRAM "An 'UnExpectError' was requested; but no errors are expected."
                Procedure_Return
            End
            
            Move (RemoveFromArray(aExpectedErrors, iIndex)) to aExpectedErrors
            Set paExpectedErrors to aExpectedErrors
        End
    End_Procedure
    
    {Visibility=Private}
    Procedure SaveError tDFUnitErrorInfo oError
        tDFUnitErrorInfo[] aErrorStack
        Get paErrorStack to aErrorStack
        Move oError to aErrorStack[SizeOfArray(aErrorStack)]
        Set paErrorStack to aErrorStack
    End_Procedure
    
    {Visibility=Private}
    Procedure SaveErrorStackToTotal
        tDFUnitErrorInfo[] aAllErrors aErrorStack aEmptyErrors
        Get paErrorStack to aErrorStack
        Get paAllErrors to aAllErrors
        
        Move (AppendArray(aAllErrors, aErrorStack)) to aAllErrors
        
        Set paAllErrors to aAllErrors
        Set paErrorStack to aEmptyErrors
    End_Procedure
    
    {Visibility=Private}
    Procedure ClearErrorTracker
        Integer[] aEmptyExpectedErrors
        tDFUnitErrorInfo[] aEmptyErrors
        Set paErrorStack to aEmptyErrors
        Set paAllErrors to aEmptyErrors
        Set paExpectedErrors to aEmptyExpectedErrors
    End_Procedure
    
    {Visibility=Private}
    Procedure EnableErrorTracker
        Send EnableHandler of poErrorHandler
    End_Procedure
    
    {Visibility=Private}
    Procedure DisableErrorTracker
        Send DisableHandler of poErrorHandler
    End_Procedure
    
    {Visibility=Private}
    Procedure AttachToTrackerEvents Handle hoHandler
        Handle[] aTrackerEventHandlers
        Get paTrackerEventHandlers to aTrackerEventHandlers
        Move hoHandler to aTrackerEventHandlers[SizeOfArray(aTrackerEventHandlers)]
        Set paTrackerEventHandlers to aTrackerEventHandlers
    End_Procedure
    
    {Visibility=Private}
    Procedure DetachFromTrackerEvents Handle hoHandler
        Integer iIterator
        Handle[] aTrackerEventHandlers
        Get paTrackerEventHandlers to aTrackerEventHandlers
        
        For iIterator from 0 to (SizeOfArray(aTrackerEventHandlers) - 1)
            If (aTrackerEventHandlers[iIterator] = hoHandler) Begin
                Move (RemoveFromArray(aTrackerEventHandlers, iIterator)) to aTrackerEventHandlers
                Set paTrackerEventHandlers to aTrackerEventHandlers
                Procedure_Return
            End
        Loop
    End_Procedure
    
    {Visibility=Private}
    Procedure ThrowErrorEvent Handle hMessage tDFUnitErrorInfo oError
        Integer iIterator
        Handle[] aTrackerEventHandlers
        Get paTrackerEventHandlers to aTrackerEventHandlers
        
        For iIterator from 0 to (SizeOfArray(aTrackerEventHandlers) - 1)
            Send hMessage of aTrackerEventHandlers[iIterator] oError
        Loop
    End_Procedure
    
    {Visibility=Private}
    Function CheckExpectedErrorsAndClean Returns Boolean
        Boolean bEmpty
        Integer[] aExpectedErrors aEmptyExpectedErrors
        Get paExpectedErrors to aExpectedErrors
        Move (SizeOfArray(aExpectedErrors) = 0) to bEmpty
        Set paExpectedErrors to aEmptyExpectedErrors
        Function_Return bEmpty
    End_Function    
    
    {Visibility=Private}
    Procedure Tracker_UnExpectedError_Occured tDFUnitErrorInfo oError
        If (IsDebuggerPresent()) Begin
            Send DisableErrorTracker
            Error oError.iErrorCode oError.sErrText
            Send EnableErrorTracker
            Procedure_Return
        End
    End_Procedure
    
    {Visibility=Private}
    Procedure Tracker_ExpectedError_Occured tDFUnitErrorInfo oError
        // Stub
    End_Procedure
    
    {Visibility=Private}
    Procedure TrackError tDFUnitErrorInfo oError
        Boolean bExpected
        Get WasErrorExpected oError.iErrorCode to bExpected
        If (not(bExpected)) Begin
            Send SaveError oError
            Send Tracker_UnExpectedError_Occured oError
            Send ThrowErrorEvent (RefProc(Tracker_UnExpectedError_Occured)) oError
        End
        Else Begin
            Send Tracker_ExpectedError_Occured oError
            Send ThrowErrorEvent (RefProc(Tracker_ExpectedError_Occured)) oError
        End
    End_Procedure

End_Class