Use Dferror.pkg

Use DFUnit\Globals.pkg

Struct tDFUnitErrorInfo
    Integer iErrorCode
    Integer iErrLine
    String sErrText
    String sCallStack
    Boolean bFatal
    Boolean bUser
End_Struct

Class cDFUnitErrorSystem is a cObject  
    Procedure Construct_Object
        Set delegation_mode to No_Delegate_Or_Error
        
        // Flag which is sent when error is being processed. This
        // stops error recursion.
        { Visibility=Private }
        Property Integer Error_Processing_State  False
        
        // array of errors that we consider User Errors
        { Visibility=Private }
        Property Integer[] pUserErrorsArray

CompilerWarnings Off
        Object TrappedErrors is a Trapped_Errors_Array
            Send initArray
        End_Object
CompilerWarnings On
        Send Trap_All
        
        // define the standard user error numbers
        Send AddUserError 0
        Send AddUserError DFERR_NUMBER_TOO_LARGE
        Send AddUserError DFERR_WINDOW_RANGE
        Send AddUserError DFERR_ENTRY_REQUIRED
        Send AddUserError DFERR_ENTER_A_NUMBER
        Send AddUserError DFERR_BAD_ENTRY
        Send AddUserError DFERR_ENTER_VALID_DATE
        Send AddUserError DFERR_NUMERIC_RANGE
        Send AddUserError DFERR_DUPLICATE_REC
        Send AddUserError DFERR_TEXT_FIELD_TOO_LONG
        Send AddUserError DFERR_FIND_PRIOR_BEG_OF_FILE
        Send AddUserError DFERR_FIND_PAST_END_OF_FILE
        Send AddUserError DFERR_NO_REC_TO_DELETE
        Send AddUserError DFERR_FIELD_NOT_INDEXED // can be invoked w/ find keys
        Send AddUserError DFERR_REC_NUMBER_RANGE
        Send AddUserError DFERR_ENTER_VALID_REC_ID
        Send AddUserError DFERR_OPERATOR_ERROR
        Send AddUserError DFERR_CANT_CHANGE_KEY_FIELD
        Send AddUserError DFERR_NO_DELETE_RELATED_RECORDS_EXIST
        Send AddUserError DFERR_OPERATION_NOT_ALLOWED
        Send AddUserError DFERR_OPERATOR
        Send AddUserError DFERR_XML_HTTP
        Send AddUserError DFERR_CLIENT_SOAP_TRANSFER
        Send AddUserError DFERR_CLIENT_SOAP_FAULT
        Send AddUserError DFERR_TEXT_TOO_LARGE_FOR_FIELD
        Send AddUserError DFERR_WINPRINT
        Send AddUserError DFERR_CRYSTAL_REPORT
        Send AddUserError DFERR_MAPI
        Send AddUserError DFERR_FILE_ACCESS_VIOLATION
        Send AddUserError DFERR_DATAFLEX_REPORTS
        Send AddUserError DFERR_CANT_REFIND_RECORD
        Send AddUserError 999 // This is defined as DD_DEFAULT_ERROR_NUMBER in DataDict.pkg and is the default Field_error
        // number of DDs.
        
        Property Handle poPreviousErrorHandler 0
    End_Procedure
    
    Function Enabled Returns Boolean
        Function_Return (poPreviousErrorHandler(Self) <> 0)
    End_Function
    
    Procedure EnableHandler
        // If we are already enabled we need to throw an error.
        If (Enabled(Self)) Begin
            // Disable the tracker in the hope the previous handler throws a user managed error.
            Send DisableErrorTracker
            // Throw the error.
            Error DFERR_PROGRAM "The error tracker was already enabled...?"
        End
        
        Set poPreviousErrorHandler to Error_Object_Id
        Move Self to Error_Object_Id
    End_Procedure
    
    Procedure DisableHandler
        // We do allow multiple disables since 
        If (Enabled(Self) = False) Begin
            Error DFERR_PROGRAM "The error tracker was already disabled...?"
        End
        
        Get poPreviousErrorHandler to Error_Object_Id
        Set poPreviousErrorHandler to 0
    End_Procedure
    
    {Visibility=Private}
    Procedure Error_Report Integer iErrNum Integer iErrLine String sErrText
        tDFUnitErrorInfo oInfo
        
        If (IsTrapped(Self, iErrNum) = False) Begin
            Move 0 to ghoErrorSource
            Move False to Err
            Procedure_Return
        End
        
        If (Error_processing_State(Self)) Begin // don't allow error
            Procedure_Return                     // recursion
        End
        Set Error_Processing_State to True // we are now in an error reporting state
        
        If (iErrNum = DFERR_FATAL_INTERNAL_ERROR) Begin
            //Send DFT_ERR "An unexpected event occured, the program returned to an unavailable stack, exiting..."
            Abort
        End
        
        If (ghoErrorTracker <> 0) Begin
            CallStackDump oInfo.sCallStack
            Move iErrNum to oInfo.iErrorCode
            Move iErrLine to oInfo.iErrLine
            Get Error_Description iErrNum sErrText to oInfo.sErrText
            
            Get Is_Critical iErrNum to oInfo.bFatal
            Move (not(IsUnhandledError(Self, iErrNum))) to oInfo.bUser
            
            Send TrackError of ghoErrorTracker oInfo
        End
        
        // mark that we are no longer processing an error 
        Set Error_Processing_State to False
        Move 0 to ghoErrorSource
        Move False to Err
    End_Procedure
    
    // Return true if Error is trapped, false otherwise.
    { Visibility=Private }
    Function IsTrapped Integer iError  Returns Boolean
        Function_Return (IsTrapped(TrappedErrors(Self),iError))
    End_Function
    
    // Pass error iError on to the regular DataFlex error handler.
    { Visibility=Private }
    Procedure IgnoreError Integer iError
        Send Ignore_Error of (TrappedErrors(Self)) iError
    End_Procedure
    
    // Catch and display error iError
    { Visibility=Private }
    Procedure TrapError Integer iError
        Send Trap_Error of (TrappedErrors(Self)) iError
    End_Procedure
    
    // Forward all error to regular DataFlex error handler.
    { Visibility=Private }
    Procedure IgnoreAllErrors
        Send Ignore_All of (TrappedErrors(Self))
    End_Procedure
    
    // Catch and display all errors.
    { Visibility=Private }
    Procedure TrapAllErrors
        Send Trap_All of (TrappedErrors(Self))
    End_Procedure
        
    // Catch and display error Error#.
    Procedure Trap_Error Integer Error#
        Send TrapError Error#
    End_Procedure
    
    // Pass error Error# on to the regular DataFlex error handler.
    Procedure Ignore_Error Integer Error#
        Send IgnoreError Error#
    End_Procedure
    
    // Catch and display all errors.
    Procedure Trap_All
        Send TrapAllErrors
    End_Procedure
    
    // Forward all error to regular DataFlex error handler.
    Procedure Ignore_All
        Send IgnoreAllErrors
    End_Procedure
    
    // Build complete error description from Flexerrs and user error message.
    { Visibility=Private }
    Function Error_Description Integer Error# String ErrMsg Returns String
        String Full_Error_Text
        
        Move (Trim(ErrMsg)) to ErrMsg
        Move (trim(error_text(DESKTOP,Error#))) to Full_Error_Text
        
        If (ErrMsg<>"") Begin
            
            If ( ( Full_Error_Text<>"" ) and ;
                error_text_available( DESKTOP, Error# ) ) Begin
                // Make sure last character of error text is a separating symbol.
                // if not, add a "." So we have format of "error-text. error-detail"
                If ( pos(right(Full_error_text,1),".,:;")=0 ) ;
                    Move (Full_Error_Text - ".") to Full_Error_Text
                Move (Full_Error_Text * ErrMsg) to Full_Error_Text
            End
            Else ;
                Move ErrMsg to Full_Error_Text
            
        End
        
        Function_Return Full_Error_Text
    End_Function
    
    // return true if an error number is critical
    { Visibility=Private }
    Function Is_Critical Integer Error# Returns Integer
        Function_Return (".3.10.18.19.20.21.22.43.70.72.74.75.78.80.97.";
            contains ("."+String(Error#)+"."))
    End_Function
    
    // adds a user error to the array
    Procedure AddUserError Integer iError
        Integer[] UserErrors
        Get pUserErrorsArray to UserErrors
        // We assume that there are few enough user errors to worry about speed of finding
        // the an array item. It always does a linear seach, which should be plenty fast.
        If (SearchArray(iError,UserErrors)=-1) Begin
            Move iError to UserErrors[SizeOfArray(UserErrors)]
            Set pUserErrorsArray to UserErrors
        End
    End_Procedure
    
    // removes an error from the user array
    Procedure RemoveUserError Integer iError
        Integer[] UserErrors
        Integer iIndex iSize
        Get pUserErrorsArray to UserErrors
        Move (SearchArray(iError,UserErrors)) to iIndex
        If (iIndex<>-1) Begin
            // replace the removed error with the last error and resize the array
            Move (SizeOfArray(UserErrors)) to iSize
            Move UserErrors[iSize-1] to UserErrors[iIndex]
            Set pUserErrorsArray to (ResizeArray(UserErrors,iSize-1))
        End
    End_Procedure
    
    // removes all user errors
    Procedure RemoveAllUserErrors
        Integer[] UserErrors
        Set pUserErrorsArray to UserErrors
    End_Procedure
    
    // returns true if this is an unhandled error (i.e., not a user error
    Function IsUnhandledError Integer iError Returns Boolean
        Integer[] UserErrors
        Get pUserErrorsArray to UserErrors
        Function_Return (SearchArray(iError,UserErrors)=-1)
    End_Function
End_Class