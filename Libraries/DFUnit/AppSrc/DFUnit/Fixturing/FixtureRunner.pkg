Use VDFBase.pkg

Class cDFUnitFixtureRunner_Mixin is a Mixin
    
    { Visibility=Private }
    Procedure Define_cDFUnitFixtureRunner_Mixin
        { Visibility=Private }
        Property Handle phCurrentFixture 0
    End_Procedure
    
    { Visibility=Private }
    Procedure RunWholeFixture Handle hFixture
        Set phCurrentFixture to hFixture
        Send Reporters_StartFixture Self
        
        Send EnableErrorTracker of ghoErrorTracker
        
        #IFDEF DFUNIT_ENABLE_MESSAGE_CALL_TESTING
        Send DFUnit_ClearRecordedMessages
        #ENDIF
        
        Send BeforeSetupOneTime of hFixture
        Send SetupOneTime of hFixture
        Send AfterSetupOneTime of hFixture
        Send DisableErrorTracker of ghoErrorTracker
        If (CheckExpectedErrorsAndClean(ghoErrorTracker) = False) Begin
            Send DFUnit_ThrowErrorNormalIfDebugger DFERR_PROGRAM (SFormat("The expected errors should be empty; the fixture '%1', is faultive.", FixtureName(hFixture)))
        End
        
        Send RunSubFixtures hFixture
        Send RunAllTestsInFixture hFixture
        
        Send EnableErrorTracker of ghoErrorTracker
        
        #IFDEF DFUNIT_ENABLE_MESSAGE_CALL_TESTING
        Send DFUnit_ClearRecordedMessages
        #ENDIF
        
        Send BeforeTearDownOneTime of hFixture
        Send TearDownOneTime of hFixture
        Send AfterTearDownOneTime of hFixture
        
        Send DisableErrorTracker of ghoErrorTracker
        If (CheckExpectedErrorsAndClean(ghoErrorTracker) = False) Begin
            Send DFUnit_ThrowErrorNormalIfDebugger DFERR_PROGRAM (SFormat("The expected errors should be empty; the fixture '%1', is faultive.", FixtureName(hFixture)))
        End
        
        Send Reporters_EndFixture Self
    End_Procedure
    
    { Visibility=Private }
    Procedure RunSubFixtures Handle hFixture
        Boolean bOk
        Integer iIterator
        Handle[] aFixtures
        Get Fixtures of hFixture to aFixtures
        
        For iIterator from 0 to (SizeOfArray(aFixtures) - 1)
            Send RunWholeFixture aFixtures[iIterator]
        Loop
    End_Procedure
    
    { Visibility=Private }
    Procedure RunAllTestsInFixture Handle hFixture
        Integer iIterator
        Handle hTest
        Handle[] aTests
        Get Tests of hFixture to aTests
        
        Set phCurrentFixture to hFixture
        
        For iIterator from 0 to (SizeOfArray(aTests) - 1)
            Move aTests[iIterator] to hTest
            Send RunTestInFixture hFixture aTests[iIterator]
        Loop
    End_Procedure
    
    { Visibility=Private }
    Function Current_Fixture Returns Handle
        Function_Return (phCurrentFixture(Self))
    End_Function

End_Class