Use VdfBase.pkg
Use Winkern.pkg

Use DFUnit\Globals.pkg
Use DFUnit\Utils\Debugger.pkg
Use DFUnit\Utils\Objects.pkg
Use DFUnit\CallRecording.pkg

Class cDFUnitAssert_Mixin is a Mixin
    
    Procedure Assert Boolean bCondition String sOptAssertMessage
        If bCondition Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move "Should have been [True] but was [False]" to asMessages[0]
        If (num_arguments > 1) Begin
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        End
        Else Begin
            Send Fail_Assert of ghoTestApplication asMessages
        End
    End_Procedure
    
    Procedure AssertFalse Boolean bCondition String sOptAssertMessage
        If (not(bCondition)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
        
        String[1] asMessages
        Move "Should have been [False] but was [True]" to asMessages[0]
        If (num_arguments > 1) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertIAreEqual Integer Expected Integer Actual String sOptAssertMessage
        If (Expected = Actual) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertIAreNotEqual Integer Expected Integer Actual String sOptAssertMessage
        If (Expected <> Actual) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should not have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertBIAreEqual BigInt Expected BigInt Actual String sOptAssertMessage
        If (Expected = Actual)  Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertBIAreNotEqual BigInt Expected BigInt Actual String sOptAssertMessage
        If (Expected <> Actual)  Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should not have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertNAreEqual Number Expected Number Actual String sOptAssertMessage
        If (Expected = Actual)  Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertNAreNotEqual Number Expected Number Actual String sOptAssertMessage
        If (Expected <> Actual)  Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should not have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertSAreEqual String Expected String Actual String sOptAssertMessage
        If (Expected = Actual and Length(Expected) = Length(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should have been ['%1'] but was ['%2']", Expected, Actual)) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertSAreNotEqual String Expected String Actual String sOptAssertMessage
        If (Expected <> Actual or Length(Expected) <> Length(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should not have been ['%1'] but was ['%2']", Expected, Actual)) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure

    Procedure AssertDAreEqual Date Expected Date Actual String sOptAssertMessage
        If (Expected = Actual)  Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure

    Procedure AssertDAreNotEqual Date Expected Date Actual String sOptAssertMessage
        If (Expected <> Actual)  Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should not have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertDTAreEqual DateTime Expected DateTime Actual String sOptAssertMessage
        If (Expected = Actual) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertDTAreNotEqual DateTime Expected DateTime Actual String sOptAssertMessage
        If (Expected <> Actual) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should not have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertTSAreEqual TimeSpan Expected TimeSpan Actual String sOptAssertMessage
        If (Expected = Actual) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertTSAreNotEqual TimeSpan Expected TimeSpan Actual String sOptAssertMessage
        If (Expected <> Actual) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("Should not have been [%1] but was [%2]", String(Expected), String(Actual))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure ExpectError Integer iErrNum
        Send ExpectError of ghoErrorTracker iErrNum
    End_Procedure
    
    { Obsolete=True }
    Procedure CheckIfExpectedError
        Send CheckIfExpectedError of ghoErrorTracker
    End_Procedure
    
    Procedure UnExpectError Integer iErrNum
        If (num_arguments > 0) ;
            Send UnExpectError of ghoErrorTracker iErrNum
        Else ;
            Send UnExpectError of ghoErrorTracker
    End_Procedure
    
    #IFDEF DFUNIT_ENABLE_MESSAGE_CALL_TESTING
    
    Procedure AssertCalled Handle hMessage String sOptAssertMessage
        If (DFUnit_HasMessageBeenCalled(hMessage) or DFUnit_HasGlobalMessageBeenCalled(hMessage)) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("The Procedure or Function with message id [%1] should have been called.", String(hMessage))) to asMessages[0]
        If (num_arguments > 1) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertNotCalled Handle hMessage String sOptAssertMessage
        If (DFUnit_HasMessageBeenCalled(hMessage) = False and DFUnit_HasGlobalMessageBeenCalled(hMessage) = False) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("The Procedure or Function with message id [%1] should not have been called.", String(hMessage))) to asMessages[0]
        If (num_arguments > 1) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertCalledOnObject Handle hObject Handle hMessage String sOptAssertMessage
        If (DFUnit_HasMessageBeenCalledOnObject(hObject, hMessage)) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("The Procedure or Function with message id [%1] should have been called on ['%2'].", String(hMessage), DFUnit_NullableNameOfObject(hObject))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertNotCalledOnObject Handle hObject Handle hMessage String sOptAssertMessage
        If (DFUnit_HasMessageBeenCalledOnObject(hObject, hMessage) = False) Begin
            Send Succeed_Assert of ghoTestApplication 
            Procedure_Return
        End
        
        String[1] asMessages
        Move (SFormat("The Procedure or Function with message id [%1] should not have been called on ['%2'].", String(hMessage), DFUnit_NullableNameOfObject(hObject))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure ClearCallersTracking
        Send DFUnit_ClearRecordedMessages
    End_Procedure
    
    #ENDIF
End_Class
