Use VdfBase.pkg
Use Winkern.pkg

Use DFUnit\Globals.pkg
Use DFUnit\Utils\Debugger.pkg
Use DFUnit\Utils\Objects.pkg
Use DFUnit\CallRecording.pkg

Register_Function IntArrToStrArr Integer[] In Returns String[]

Class cDFUnitAssertArray_Mixin is a Mixin
    Procedure AssertStrArrAreEqual String[] Expected String[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) = SizeOfArray(Actual)) Begin
            If (IsSameArray(Expected, Actual)) Begin
                Send Succeed_Assert of ghoTestApplication
                Procedure_Return
            End
        End

        Send AssertEqFailed Expected Actual (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertStrArrAreNotEqual String[] Expected String[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) <> SizeOfArray(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
        
        If (not(IsSameArray(Expected, Actual))) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End

        Send AssertNotEqFailed Expected Actual (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertIntArrAreEqual Integer[] Expected Integer[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) = SizeOfArray(Actual)) Begin
            If (IsSameArray(Expected, Actual)) Begin
                Send Succeed_Assert of ghoTestApplication
                Procedure_Return
            End
        End

        Send AssertEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertIntArrAreNotEqual Integer[] Expected Integer[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) <> SizeOfArray(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
            
        If (not(IsSameArray(Expected, Actual))) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End

        Send AssertNotEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertBIArrAreEqual BigInt[] Expected BigInt[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) = SizeOfArray(Actual)) Begin
            If (IsSameArray(Expected, Actual)) Begin
                Send Succeed_Assert of ghoTestApplication
                Procedure_Return
            End
        End

        Send AssertEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertBIArrAreNotEqual BigInt[] Expected BigInt[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) <> SizeOfArray(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
            
        If (not(IsSameArray(Expected, Actual))) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End

        Send AssertNotEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertBoolArrAreEqual Boolean[] Expected Boolean[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) = SizeOfArray(Actual)) Begin
            If (IsSameArray(Expected, Actual)) Begin
                Send Succeed_Assert of ghoTestApplication
                Procedure_Return
            End
        End

        Send AssertEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertBoolArrAreNotEqual Boolean[] Expected Boolean[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) <> SizeOfArray(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
            
        If (not(IsSameArray(Expected, Actual))) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End

        Send AssertNotEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertNumArrAreEqual Number[] Expected Number[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) = SizeOfArray(Actual)) Begin
            If (IsSameArray(Expected, Actual)) Begin
                Send Succeed_Assert of ghoTestApplication
                Procedure_Return
            End
        End

        Send AssertEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertNumArrAreNotEqual Number[] Expected Number[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) <> SizeOfArray(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
            
        If (not(IsSameArray(Expected, Actual))) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End

        Send AssertNotEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertRealArrAreEqual Real[] Expected Real[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) = SizeOfArray(Actual)) Begin
            If (IsSameArray(Expected, Actual)) Begin
                Send Succeed_Assert of ghoTestApplication
                Procedure_Return
            End
        End

        Send AssertEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertRealArrAreNotEqual Real[] Expected Real[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) <> SizeOfArray(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
            
        If (not(IsSameArray(Expected, Actual))) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End

        Send AssertNotEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertDateArrAreEqual Date[] Expected Date[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) = SizeOfArray(Actual)) Begin
            If (IsSameArray(Expected, Actual)) Begin
                Send Succeed_Assert of ghoTestApplication
                Procedure_Return
            End
        End

        Send AssertEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertDateArrAreNotEqual Date[] Expected Date[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) <> SizeOfArray(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
            
        If (not(IsSameArray(Expected, Actual))) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End

        Send AssertNotEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertDTArrAreEqual DateTime[] Expected DateTime[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) = SizeOfArray(Actual)) Begin
            If (IsSameArray(Expected, Actual)) Begin
                Send Succeed_Assert of ghoTestApplication
                Procedure_Return
            End
        End

        Send AssertEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertDTArrAreNotEqual DateTime[] Expected DateTime[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) <> SizeOfArray(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
            
        If (not(IsSameArray(Expected, Actual))) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End

        Send AssertNotEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertTSArrAreEqual TimeSpan[] Expected TimeSpan[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) = SizeOfArray(Actual)) Begin
            If (IsSameArray(Expected, Actual)) Begin
                Send Succeed_Assert of ghoTestApplication
                Procedure_Return
            End
        End

        Send AssertEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertTSArrAreNotEqual TimeSpan[] Expected TimeSpan[] Actual String sOptAssertMessage
        Integer i iEqualCount
        
        If (SizeOfArray(Expected) <> SizeOfArray(Actual)) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End
            
        If (not(IsSameArray(Expected, Actual))) Begin
            Send Succeed_Assert of ghoTestApplication
            Procedure_Return
        End

        Send AssertNotEqFailed (IntArrToStrArr(Self, Expected)) (IntArrToStrArr(Self, Actual)) (If(num_arguments > 2, sOptAssertMessage, ""))
    End_Procedure
    
    Procedure AssertEqFailed String[] Expected String[] Actual String sOptAssertMessage
        String[1] asMessages
        Move (SFormat("Should have been [%1] but was [%2]", StrJoinFromArray(Expected, ','), StrJoinFromArray(Actual, ','))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Procedure AssertNotEqFailed String[] Expected String[] Actual String sOptAssertMessage
        String[1] asMessages
        Move (SFormat("Should not have been [%1] but was [%2]", StrJoinFromArray(Expected, ','), StrJoinFromArray(Actual, ','))) to asMessages[0]
        If (num_arguments > 2) ;
            Send Fail_Assert of ghoTestApplication asMessages sOptAssertMessage
        Else ;
            Send Fail_Assert of ghoTestApplication asMessages
    End_Procedure
    
    Function IntArrToStrArr Integer[] In Returns String[]
        Integer i
        String[] saOut
        
        For i from 0 to (SizeOfArray(In) - 1)
            Move (String(In[i])) to saOut[SizeOfArray(saOut)]
        Loop
        
        Function_Return saOut
    End_Function
    
    Function BigIntArrToStrArr BigInt[] In Returns String[]
        Integer i
        String[] saOut
        
        For i from 0 to (SizeOfArray(In) - 1)
            Move (String(In[i])) to saOut[SizeOfArray(saOut)]
        Loop
        
        Function_Return saOut
    End_Function
    
    Function BoolArrToStrArr Boolean[] In Returns String[]
        Integer i
        String[] saOut
        
        For i from 0 to (SizeOfArray(In) - 1)
            Move (String(In[i])) to saOut[SizeOfArray(saOut)]
        Loop
        
        Function_Return saOut
    End_Function
    
    Function NumArrToStrArr Number[] In Returns String[]
        Integer i
        String[] saOut
        
        For i from 0 to (SizeOfArray(In) - 1)
            Move (String(In[i])) to saOut[SizeOfArray(saOut)]
        Loop
        
        Function_Return saOut
    End_Function
    
    Function RealArrToStrArr Real[] In Returns String[]
        Integer i
        String[] saOut
        
        For i from 0 to (SizeOfArray(In) - 1)
            Move (String(In[i])) to saOut[SizeOfArray(saOut)]
        Loop
        
        Function_Return saOut
    End_Function
    
    Function DateArrToStrArr Date[] In Returns String[]
        Integer i
        String[] saOut
        
        For i from 0 to (SizeOfArray(In) - 1)
            Move (String(In[i])) to saOut[SizeOfArray(saOut)]
        Loop
        
        Function_Return saOut
    End_Function
    
    Function DTArrToStrArr DateTime[] In Returns String[]
        Integer i
        String[] saOut
        
        For i from 0 to (SizeOfArray(In) - 1)
            Move (String(In[i])) to saOut[SizeOfArray(saOut)]
        Loop
        
        Function_Return saOut
    End_Function
    
    Function TSArrToStrArr TimeSpan[] In Returns String[]
        Integer i
        String[] saOut
        
        For i from 0 to (SizeOfArray(In) - 1)
            Move (String(In[i])) to saOut[SizeOfArray(saOut)]
        Loop
        
        Function_Return saOut
    End_Function
End_Class
