Use cApplication.pkg
Use Data_Set.pkg
Use seq_chnl.pkg

// Note; Needs to be defined before the "DFUnit\" Use statements below.
Define CS_FailedClause for "[Failed!]" 

Use DFUnit\Version.pkg
Use DFUnit\GUI.pkg
Use DFUnit\Utils.pkg
Use DFUnit\Testing.pkg
Use DFUnit\Fixturing.pkg
Use DFUnit\Reporting.pkg
Use DFUnit\Results\StatisticsCollector.pkg

Class cDFUnitTestApplication is a cDFUnitFixture
    
    Import_Class_Protocol cDFUnitReporterManager_Mixin
    Import_Class_Protocol cDFUnitFixtureCollector_Mixin
    Import_Class_Protocol cDFUnitTestCollector_Mixin
    Import_Class_Protocol cDFUnitStatisticsCollector_Mixin
    Import_Class_Protocol cDFUnitTestRunner_Mixin
    Import_Class_Protocol cDFUnitFixtureRunner_Mixin
    
    Procedure Construct_Object
        Forward Send Construct_Object
        Move Self to ghoTestApplication

        Object poErrorTracker is a cDFUnitErrorTracker
        End_Object
        
        Send Define_cDFUnitReporterManager_Mixin
        Send Define_cDFUnitFixtureCollector_Mixin
        Send Define_cDFUnitTestCollector_Mixin
        Send Define_cDFUnitStatisticsCollector_Mixin
        Send Define_cDFUnitTestRunner_Mixin
        Send Define_cDFUnitFixtureRunner_Mixin
        
        Set psTestFixtureName to "All Tests"
        
        Property Boolean pbAutoRun True
        Property Boolean pbAutoRunTests True
        Property Boolean pbUseUIIfInDebugger True
        Property Boolean pbUseUI True 

        Property String psUnitTestTestingPackage
        Property String[] psUnitTestTestingPackageArray
    End_Procedure
    
//    Procedure End_Construct_Object
//        If (pbAutoRun(Self)) ;
//            Send AutoRun
//    End_Procedure
    
    {Visibility=Private}
    Procedure ParseEnvironmentFromCommandLine
        Handle hoCommandLine
        Integer iArgCount iIndex
        String sArgument sTemp

        Get phoCommandLine of ghoApplication to hoCommandLine
        Get CountOfArgs of hoCommandLine to iArgCount
        
        For iIndex from 0 to (iArgCount - 1)
            Move (Argument(hoCommandLine, iIndex)) to sArgument
            Case Begin
                Case (sArgument = "-h" or sArgument = "--help")
                    Send DFUnit_ConsoleWriteLn "DFUnit - DataFlex Unit Testing Framework"
                    Send DFUnit_ConsoleWrite "Version: "
                    Send DFUnit_ConsoleWrite DFUNIT_VERSION
                    Send DFUnit_ConsoleWrite " - "
                    Send DFUnit_ConsoleWriteLn DFUNIT_SUB_VERSION
                    Send DFUnit_ConsoleExit 0
                    Case Break
                Case (sArgument = "-c" or sArgument = "--console")
                    Set pbUseUI to False
                    Case Break
                Case (sArgument = "-g" or sArgument = "--gui")
                    Set pbUseUI to True
                    Case Break
                Case (sArgument = "-n" or sArgument = "--no-autorun")
                    Set pbAutoRunTests to False
                    Case Break
                Case (sArgument = "-o" or sArgument = "--output")
                    If (iArgCount - iIndex <= 0) Begin
                        Send DFUnit_ConsoleWriteLn "No outputfile has been specified."
                        Send DFUnit_ConsoleExit -1
                    End
                    
                    String sAbsolutePath
                    
                    Increment iIndex
                    Move (Argument(hoCommandLine, iIndex)) to sArgument
                    If (not(DFUnit_AbsolutPath(sArgument, (&sAbsolutePath)))) Begin
                        Send DFUnit_ConsoleWriteLn "Invalid outputname."
                        Send DFUnit_ConsoleExit -1
                    End
                    
                    Object oXMLReporter is a cDFUnitXMLReporter
                        Set psFileName to sAbsolutePath
                    End_Object
                    Send AddReporter oXMLReporter
                    Case Break
            Case End
        Loop
    End_Procedure
    
    Procedure AutoRun
        Boolean bUseUI
        Integer iExitCode
        
        Send ParseEnvironmentFromCommandLine
        Get pbUseUI to bUseUI
        
        If (bUseUI or (IsDebuggerPresent() and pbUseUIIfInDebugger(Self))) Begin
//            Object oUIApplication is a cDFUnitUIPanel
//            End_Object 
//            Start_UI
        End
        Else Begin
            Object oConsoleReporter is a cDFUnitConsoleReporter
            End_Object
            Send AddReporter oConsoleReporter
            Send ManualRunTests
            
            If (TestsSucceeded(Self)) Begin
                Send DFUnit_ConsoleExit 0
            End
            Else Begin
                Send DFUnit_ConsoleExit -1
            End
        End
    End_Procedure
    
    Procedure ManualRunTests
        Send ClearTestCounters
        Send ClearErrorTracker of ghoErrorTracker
        
        // Start Testing
        Send Reporters_Start Self
        Send RunWholeFixture Self
        Send Reporters_Finish Self
    End_Procedure    
    
    // Overrides for the cDFUnitFixture /////////////////////////////
    
    { Visibility=Private }
    Procedure SetupFixture
        Send BeforeSetup
        Send Setup
        Send AfterSetup
    End_Procedure
    
    { Visibility=Private }
    Procedure TearDownFixture
        Send BeforeTearDown
        Send TearDown
        Send AfterTearDown
    End_Procedure  
    
    // **** Functions to return the line numbers of the Unit testing include package,
    // when something goes wrong aka [Failure] ****  
    
    // Custom search functions for string arrays
    Function _FindFunctionCode String sSourceLine String sSearchText Returns Integer  
        If (Lowercase(sSourceLine) contains Lowercase(sSearchText)) ;
            Function_Return (EQ)
        Function_Return (GT)
    End_Function
    
    Function UnitTestFileLineNumber String sValue Returns Integer
        String[] asSourceFile
        Integer iRow iPos
        
        Move -1 to iRow
        If (Lowercase(sValue) contains Lowercase(CS_FailedClause)) Begin
            Get psUnitTestTestingPackageArray to asSourceFile 
            Move (Trim(sValue)) to sValue
            Move (Pos("[", sValue)) to iPos
            If (iPos <> 0) Begin
                Move (Left(sValue, (iPos -2))) to sValue
                Move (Replaces(" ", sValue, "_")) to sValue
                Move (SearchArray(sValue, asSourceFile, Self, RefFunc(_FindFunctionCode))) to iRow
                If (iRow <> -1) Begin
                    // As the values is from an array we need to increase by one.
                    Increment iRow
                End
            End
        End
        Function_Return iRow    
    End_Function

    // Reads the content of the Unit Testing source file: CS_UnitTestsFile,
    // and returns it as a string array.
    Function ReadUnitTestsFile Returns Boolean
        String[] asSourceFile
        String sPath sFileName
        Boolean bExists bRelative bQualified bOK
        
        Get psUnitTestTestingPackage to sFileName
        Get IsFileNameQualified sFileName to bQualified
        // If the file name does not contain full path:
        If (bQualified = False) Begin
            Move (sFileName contains "..") to bRelative
            If (bRelative = False) Begin 
                Get_File_Path sFileName to sPath
                If (sPath = "") Begin
                    Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath
                    // If a multi-path psAppSrc is used, we assume the first parameter is the "AppSrc" folder name,
                    // and that the file resides there.
                    Get PathAtIndex of (phoWorkspace(ghoApplication)) sPath 1 to sPath
                    If (Right(sPath,1) <> "\") Begin
                        Move (sPath + "\") to sPath
                    End
                End
                // Make the filename fully qualified: (Full path)
                Move (sPath + sFileName) to sFileName          
            End
            // The file name contains a relative path e.g. "..\"
            Else Begin
                Get FullPathNames of (phoWorkspace(ghoApplication)) sFileName to sFileName
            End
        End

        File_Exist sFileName bExists
        If (bExists = False) Begin
            Send Info_Box ("Could not find the Unit testing source file:" * (String(sFileName)))
            Function_Return False
        End  
        
        Get _ReadSourceFile sFileName to bOK
        
        Function_Return bOK
    End_Function

    // Reads the content of the passed sFileName source file and SETS the class property psUnitTestTestingPackageArray.
    // The sFileName can be relative, include full pathing or be just the file name.
    // Line-ending characters like CR and LF are stripped for each line.
    // If something went wrong FALSE will be returned.
    Function _ReadSourceFile String sFileName Returns Boolean
        Integer iCh iFileSize iCount
        String[] asSourceFile   
        String sLine sLineBreak
        
        Move 0 to iCount
        Get Seq_New_Channel to iCh
        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin                 
            Send Info_Box "No free channel available for input. (_ReadSourceFile function)."
            Function_Return False
        End

        Get Win32APIFileSize sFilename to iFileSize
        Move (ResizeArray(asSourceFile, iFileSize)) to asSourceFile

        // Need to use binary read mode as we want to use CR+LF as the line delimiter.
        // The filemode options don't seem to work as documented, not sure why.
        Direct_Input channel iCh ("binary:" + sFilename)

        While (SeqEof = False)
            Readln channel iCh sLine
            // Remove any trailing spaces:
            Move (Rtrim(sLine)) to sLine
            If (SeqEof = False) Begin
                Move sLine to asSourceFile[iCount]
                Increment iCount
            End
        Loop
        
        Move (ResizeArray(asSourceFile, iCount)) to asSourceFile
        Close_Input channel iCh
        Send Seq_Release_Channel iCh
        
        Set psUnitTestTestingPackageArray to asSourceFile
        Function_Return True
    End_Function  

    Function Win32APIFileSize String sFileName Returns Integer
#IF (!@ > 191)
        DWord dwFileSizeHigh dwFileSizeLow
        Integer iFileSize iVoid
        Handle hFindFile
        tWin32FindDataW FindData
    
        Move (sFileName + "") to sFileName
        Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
        Move (winFindFirstFile(sFileName, AddressOf(FindData))) to hFindFile
        If (hFindFile <> INVALID_HANDLE_VALUE) Begin
            Move FindData.nFileSizeHigh to dwFileSizeHigh
            Move FindData.nFileSizeLow  to dwFileSizeLow
        End
        Move (winFindClose(hFindFile)) to iVoid
        Move ((dwFileSizeHigh * clNone) + dwFileSizeLow) to iFileSize
    
#ELSE
        DWord dwFileSizeHigh dwFileSizeLow
        Integer iFileSize iVoid
        Handle hFindFile
        tWin32_Find_Data FindData
        
        Move (sFileName + "") to sFileName
        Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
        Move (winFindFirstFile(ToAnsi(sFilename), AddressOf(FindData))) to hFindFile
        If (hFindFile <> INVALID_HANDLE_VALUE) Begin
            Move FindData.nFileSizeHigh to dwFileSizeHigh
            Move FindData.nFileSizeLow  to dwFileSizeLow
        End
        Move (winFindClose(hFindFile)) to iVoid
        Move ((dwFileSizeHigh * clNone) + dwFileSizeLow) to iFileSize

#ENDIF     
        Function_Return iFileSize
    End_Function

    Procedure End_Construct_Object
        String sFileName
        Boolean bOK
        Forward Send End_Construct_Object
        Get psUnitTestTestingPackage to sFileName
        Get ReadUnitTestsFile to bOK
    End_Procedure
    
End_Class