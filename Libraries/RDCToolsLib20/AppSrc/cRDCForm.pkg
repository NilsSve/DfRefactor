//****************************************************************************
// $Module type: Class
// $Module name: cForm
// $Author     : Nils G. Svedmyr, RDC Tools International
// Created     : 2014-03-17 @ 12:34
//
// Description :
//
// $Rev History:
//    2014-03-17  Module header created
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
//****************************************************************************
Use Windows.pkg

Class cFormIdleHandler is a cIdleHandler
    Procedure Construct_Object
        Forward Send Construct_Object

    End_Procedure

    Procedure OnIdle
        Delegate Send DoUpdate
    End_Procedure

End_Class

Class cRDCForm is a Form

    Procedure Construct_Object
        Forward Send Construct_Object

        { MethodType=Property InitialValue=False }
        { Category=Appearance }
        Property Boolean pbAutoEnable False

        { Visibility=Private }
        Property Boolean pbEnabled True

        Property Handle phoIdleHandler (Create(Self, RefClass(cFormIdleHandler)))

        Set Label_Justification_mode to JMode_Right
        Set Label_Col_Offset to 2
        Set Label_Row_Offset to 0
    End_Procedure

    Procedure End_Construct_Object
        String sTooltip sStatus_Help

        Forward Send End_Construct_Object

#IF (Required_FMAC_Version > 15)
        Get psToolTip   to sTooltip
        Get Status_Help to sStatus_Help
        If (sTooltip = "" and sStatus_Help <> "") Begin
            Set psToolTip to sStatus_Help
        End
        Else If (sTooltip <> "" and sStatus_Help = "") Begin
            Set Status_Help to sTooltip
        End
#ENDIF
        Set pbEnabled of (phoIdleHandler(Self)) to (pbAutoEnable(Self))
    End_Procedure

    { Visibility=Private }
    Procedure DoUpdate
        If (pbAutoEnable(Self) = False) Begin
            Procedure_Return
        End
        Set Enabled_State to (IsEnabled(Self))
    End_Procedure

    { MethodType=Event }
    Function IsEnabled Returns Boolean
        Boolean bEnabled
        Get pbEnabled to bEnabled
        Function_Return bEnabled
    End_Function

    // Enable the idle handler timer when the object is activated
    Procedure Activating
        Forward Send Activating
        Set pbEnabled of (phoIdleHandler(Self)) to True
    End_Procedure

    // Disable the idle handler when the object is deactivated
    Procedure Deactivating  
        // When exiting the program it can happen that the idle handler
        // already has been destroyed.      
        If (Object_id(phoIdleHandler(Self)) <> 0) Begin
            Set pbEnabled of (phoIdleHandler(Self)) to False
        End
        Forward Send Deactivating
    End_Procedure 
    
    // Toggles the password state, as it doesn't work changing the
    // password_state at runtine because it is a design time property.
    Procedure TogglePasswordState
        Boolean bState    
        Handle hoFocus hoParent
        Integer iRetval
        Get Password_State to bState
        Set Password_State to (not(bState))
        Get Focus of Desktop to hoFocus
        Move (Parent(Self)) to hoParent
        Send Page_Object False
        Send Page_Object True   
        Get msg_Add_Focus hoParent to iRetval
        Set Focus_Mode of hoFocus to Focusable
//        Send Page_Delete
//        Send Page 1
    End_Procedure

End_Class