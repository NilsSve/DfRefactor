Use cDbCJGrid.pkg
#IF (!@ < 230)
    Use cRDCDbCJGridColumnHyperLink.pkg
#ENDIF    
Use RefactorConstants.inc

Enum_List
    Define cx_DbSelect_All
    Define cx_DbSelect_None
    Define cx_DbSelect_Invert
End_Enum_List


// Classes used by the cRDCCJSelectionGrid
Class cRDCDbCJToggleSelectMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Toggle Current Item"
        Set psImage to "ToggleOn.ico"
        Set psShortcut to "Space-Bar"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Send ToggleCurrentItem
    End_Procedure

End_Class

Class cRDCDbCJSelectAllMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set pbControlBeginGroup to True
        Set psCaption to "Select All"
        Set psImage to "SelectAll.ico"
        Set psShortcut to "Ctrl+A"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Send SelectAll of (Server(Self))
        Send RefreshSelectionUpdate
    End_Procedure

End_Class

Class cRDCDbCJDeSelectAllMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Select None"
        Set psImage to "SelectNone.ico"
        Set psShortcut to "Ctrl+N"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Send DeSelectAll of (Server(Self)) 
        Send RefreshSelectionUpdate
    End_Procedure

End_Class

Class cRDCDbCJInvertSelectionsMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Invert Selection"
        Set psImage to "SelectInvert.ico"
        Set psShortcut to "Ctrl+I"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
//        Set SelectItems to cx_Select_Invert
    End_Procedure

End_Class

Class cRDCDbCJAddFolderMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Add Folder"
        Set psImage to "AddFolder.ico"
        Set psShortcut to "Ins"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Send BrowseForFolder
    End_Procedure

End_Class

Class cRDCDbCJRemoveItemMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Remove From Grid"
        Set psImage to "ActionDelete.ico"
        Set psShortcut to "Del"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Send Request_Delete
    End_Procedure

End_Class

Register_Function pbDbShowAddFolderMenuItem Returns Boolean
Register_Function pbDbShowRemoveFolderMenuItem Returns Boolean
Register_Function pbDbShowInvertSelectionsMenuItem Returns Boolean

Class cDbGridContext_mnu is a cCJContextMenu
    Procedure Construct_Object
        Handle hoMenuItem
        Forward Send Construct_Object

        Get Create (RefClass(cRDCDbCJToggleSelectMenuItem))      to hoMenuItem
        Get Create (RefClass(cRDCDbCJSelectAllMenuItem))         to hoMenuItem
        Get Create (RefClass(cRDCDbCJDeSelectAllMenuItem))       to hoMenuItem
        If (pbDbShowInvertSelectionsMenuItem(Self) = True) Begin
            Get Create (RefClass(cRDCDbCJInvertSelectionsMenuItem))  to hoMenuItem
        End
        If (pbDbShowAddFolderMenuItem(Self) = True) Begin
            Get Create (RefClass(cRDCDbCJAddFolderMenuItem))  to hoMenuItem
            Set pbControlBeginGroup of hoMenuItem to True
        End
        If (pbDbShowRemoveFolderMenuItem(Self) = True) Begin
            Get Create (RefClass(cRDCDbCJRemoveItemMenuItem))  to hoMenuItem
            If (pbDbShowAddFolderMenuItem(Self) = False) Begin
                Set pbControlBeginGroup of hoMenuItem to True
            End
        End
    End_Procedure

End_Class

Class cRDCDbCJGrid is a cDbCJGrid

    Procedure Construct_Object
        Forward Send Construct_Object

        // Set to true if an descending index is in use
        Property Boolean pbDescendingIndexInUse False

        // If you quickly double-right-click, or quickly click around a cCJGrid
        // (using a combination of middle-clicks, right-clicks and left-clicks), the application can crash.
        // To guard against this see the augmented procedure OnComRowRClick below.
        Property Boolean pbRightClickProcessing False   
        Property Handle phoCheckbox_Col
        Property Handle phoData_Col
        Property Boolean pbDbShowAddFolderMenuItem False
        Property Boolean pbDbShowRemoveFolderMenuItem False
        Property Boolean pbDbShowInvertSelectionsMenuItem False
        
        Set pbRestoreLayout to True
        Set psLayoutSection to ((Object_Label(Parent(Self))) + "-" + (Object_Label(Self)))
        Set pbUseAlternateRowBackgroundColor to True     
        Set pbUseFocusCellRectangle to False
        Set pbShowRowFocus to True
        Set pbHotTracking to True
        Set pbSelectionEnable to True
        Set piSelectedRowBackColor to clGreenGreyLight
        Set piHighlightBackColor   to clGreenGreyLight
        Set pbShowFooter to True  
        Set peAnchors to anAll
        #IF (!@ > 180)
            #IF (!@ < 230)
                Set peVisualTheme to xtpReportThemeExplorer
            #ELSE
                Set peVisualTheme to xtpGridThemeExplorer
            #ENDIF
        #ENDIF

        On_Key Key_End   Send MoveToLastEnterableColumn
        On_Key Key_Home  Send MoveToFirstEnterableColumn
        On_Key Key_Space Send ToggleCurrentItem 
        On_Key Key_Ctrl+Key_A send SelectAll
        On_Key Key_Ctrl+Key_N send SelectNone
    End_Procedure

    Procedure End_Construct_Object    
        Handle hoContextMenu
        Forward Send End_Construct_Object
        Get Create (RefClass(cDbGridContext_mnu)) to hoContextMenu
        Set phoContextMenu to hoContextMenu
    End_Procedure

    { EnumList="cx_Select_All, cx_Select_None, cx_Select_Invert" }
    // Set checkbox column to selected states.
    // iState can be one of the following:
    // cx_Select_All, cx_Select_None or cx_Select_Invert
    Procedure Set SelectItems Integer iState
        Integer iCount iSize iCheckbox_Col
        Boolean bChecked
        Handle hoDataSource hoCheckBox_Col hoDD
        tDataSourceRow[] TheData
        
        Get phoCheckbox_Col to hoCheckBox_Col
        If (hoCheckBox_Col = 0) Begin
            Procedure_Return
        End                 
        
        Get piColumnId of (phoCheckbox_Col(Self)) to iCheckbox_Col
        Get phoDataSource               to hoDataSource
        Get DataSource of hoDataSource  to TheData
        Move (SizeOfArray(TheData))     to iSize
        Decrement iSize
        For iCount from 0 to iSize
            Case Begin
                Case (iState = cx_DbSelect_All)
                    Move True to TheData[iCount].sValue[iCheckbox_Col]
                    Case Break
                Case (iState = cx_DbSelect_None)
                    Move False to TheData[iCount].sValue[iCheckbox_Col]
                    Case Break
                Case (iState = cx_DbSelect_Invert)
                    Move TheData[iCount].sValue[iCheckbox_Col] to bChecked
                    Move (not(bChecked)) to TheData[iCount].sValue[iCheckbox_Col]
                    Case Break
            Case End
        Loop

        Send ReInitializeData TheData False
        Send Request_Save
        Get Main_DD to hoDD
        If (hoDD <> 0) Begin    
            If (iState = cx_DbSelect_All) Begin
                Send SelectAll of hoDD
            End 
            If (iState = cx_DbSelect_None) Begin
                Send DeSelectAll of hoDD
            End 
            Send Request_Assign of hoDD
            Send Refind_Records of hoDD
        End
        Send DoSetCheckboxFooterText
    End_Procedure

    Procedure RefreshSelectionUpdate 
        Handle hoDataSource
        Integer iSelectedRow
        Get phoDataSource to hoDataSource 
        Get SelectedRow of hoDataSource to iSelectedRow
        Send RefreshDataFromDD iSelectedRow
    End_Procedure

Register_Object oCheckbox_Col

    // Returns a string array with selected values for the data column (phoData_Col).
    Function SelectedItems Returns String[]
        Integer i iItems iSize iCheckbox_Col iData_Col
        String[] sDataArray
        Handle hoDataSource hoData_Col hoCheckBox_Col
        tDataSourceRow[] TheData
        Boolean bChecked

        Get phoData_Col to hoData_Col
        If (hoData_Col = 0) Begin
            Move 1 to iData_Col
        End                    
        Else Begin
            Get piColumnId of hoData_Col to iData_Col
        End                                          
        Get phoCheckbox_Col to hoCheckBox_Col
        If (hoCheckBox_Col = 0) Begin
            Function_Return sDataArray
        End                           
        Else Begin
            Get piColumnId of oCheckbox_Col to iCheckbox_Col
        End

        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move (SizeOfArray(TheData)) to iItems
        Decrement iItems

        For i from 0 to iItems
            Move TheData[i].sValue[iCheckbox_Col] to bChecked
            If (bChecked = True) Begin
                Move (SizeOfArray(sDataArray)) to iSize
                Move TheData[i].sValue[iData_Col] to sDataArray[iSize]
            End
        Loop

        Function_Return sDataArray
    End_Function

    Procedure SelectAll
        Set SelectItems to cx_DbSelect_All
    End_Procedure

    Procedure SelectNone
        Set SelectItems to cx_DbSelect_None
    End_Procedure

    Procedure SelectInvert
        Set SelectItems to cx_DbSelect_Invert
    End_Procedure

    Procedure AddItem String sDataValue
        Handle hoDataSource
        tDataSourceRow[] TheData
        tsSearchResult[] asFolderArray
        Integer iSize iData_Col iCheckbox_Col

        If (not(IsComObjectCreated(Self))) Begin
            Procedure_Return
        End

        Get piColumnId of (phoData_Col(Self)) to iData_Col
        Get piColumnId of (phoCheckbox_Col(Self)) to iCheckbox_Col
        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move (SizeOfArray(TheData)) to iSize
        Move sDataValue to TheData[iSize].sValue[iData_Col]
        Move False      to TheData[iSize].sValue[iCheckbox_Col]

        Send ReInitializeData TheData False
        Send MoveToFirstRow
    End_Procedure

    Procedure BrowseForFolder
        String sFolderName
        Get vSHBrowseForFolder "Select Folder to Add" to sFolderName
        If (sFolderName <> "") Begin
            Send AddItem sFolderName
        End
    End_Procedure

    // Returns number of items.
    Function ItemCount Returns Integer
        Integer iItems
        Handle hoDataSource
        tDataSourceRow[] TheData

        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move (SizeOfArray(TheData)) to iItems

        Function_Return iItems
    End_Function

    // Returns number of checked items.
    Function CheckedItems Returns Integer
        Integer iCount iItems iCheckbox_Col iRetval
        Handle hoDataSource hoCheckbox_Col
        tDataSourceRow[] TheData
        Boolean bChecked
        
        Move 0 to iRetval
        Get phoCheckbox_Col to hoCheckbox_Col
        If (hoCheckbox_Col = 0) Begin
            Procedure_Return
        End
        Get piColumnId of hoCheckbox_Col to iCheckbox_Col
        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move (SizeOfArray(TheData)) to iItems
        Decrement iItems

        For iCount from 0 to iItems
            Move TheData[iCount].sValue[iCheckbox_Col] to bChecked
            If (bChecked = True) Begin
                Increment iRetval
            End
        Loop

        Function_Return iRetval
    End_Function

    // Toggles the current row on/off (the checkbox)
    Procedure ToggleCurrentItem
        Boolean bChecked
        Integer iCol
        Handle hoCol hoCheckbox_Col hoDD

        Get phoCheckbox_Col to hoCheckbox_Col
        If (hoCheckbox_Col = 0) Begin
            Procedure_Return
        End
        Get piColumnId of hoCheckbox_Col to iCol
        Get ColumnObject iCol   to hoCol
        Get SelectedRowValue    of hoCol to bChecked
        Send UpdateCurrentValue of hoCol (not(bChecked))
        Get Server to hoDD
        If (hoDD <> 0) Begin
            Send Request_Save of hoDD
        End
        Send DoSetCheckboxFooterText
    End_Procedure

    Procedure DoSetCheckboxFooterText
        Integer iCol iSelected iItems
        Handle hoCol hoCheckbox_Col hoData_Col
        
        Get phoData_Col to hoData_Col
        If (hoData_Col = 0) Begin
            Move 0 to iCol
        End
        Else Begin
            Get piColumnId of hoData_Col to iCol
        End
        Get ItemCount to iItems
        Get CheckedItems to iSelected
        Get ColumnObject iCol to hoCol
        If (hoCol <> 0) Begin
            Set psFooterText of hoCol  to ("Selected:" * String(iSelected) * "of" * String(iItems))            
        End
    End_Procedure

    Procedure OnCreateGridControl
        Forward Send OnCreateGridControl
        Send DoChangeTooltipStyle
    End_Procedure    
    
    Procedure Activating
        Send DoChangeFontSize      
    End_Procedure    

    Procedure DoChangeFontSize
        Handle hoFont hoPaintManager
        Variant vFont
        String sFont sFontSize
        Boolean bCreated
        Integer iVal

        Get IsComObjectCreated to bCreated  // When program is started, grid object isn't created yet.
        If (bCreated = False) Begin
            Procedure_Return
        End

        Get phoReportPaintManager to hoPaintManager
        Get Create (RefClass(cComStdFont)) to hoFont  // Create a font object
        Get ComTextFont of hoPaintManager to vFont    // Bind the font object to the Grid's text font
        Set pvComObject of hoFont to vFont            // Connect DataFlex object with com object

        Get ReadString of ghoApplication CS_Settings CS_GridFontSize 8 to iVal
        Set ComSize of hoFont to iVal
        Send ComRedraw
        Send Destroy to hoFont                        // Destroy the font object (releases memory)
    End_Procedure

    { MethodType=Method }
    Procedure DoChangeTooltipStyle
        Handle  hoTooltip
        Integer iIcon iStyle iWidth
        Boolean bBaloon

        Get phoToolTipContext to hoTooltip

        // This is the programs global tooltip control defined at desktop level.
        If (ghoToolTipController > 0) Begin
            Get piIcon of ghoToolTipController    to iIcon
            // The global tooltip controller allows the icons to be
            // from 0-5, but the tooltip context class only allows
            // the tooltip icon to be between 0-3.
            If (iIcon > 3) Begin
                Move xtpToolTipIconInfo to iIcon
            End
            Get piMaxWidth of ghoToolTipController to iWidth
            Get pbBalloonStyle of ghoToolTipController to bBaloon
            If (bBaloon = True) Begin
                Move xtpToolTipBalloon to iStyle
            End
            Else Begin
                Move xtpToolTipOffice2007 to iStyle
            End
        End
        Else Begin
            Move xtpToolTipIconInfo   to iIcon
            Move xtpToolTipOffice2007 to iStyle
            Move 400                  to iWidth
        End

        Set ComStyle of hoTooltip to iStyle
        Set ComMaxTipWidth of hoTooltip to iWidth
    End_Procedure    
    
    Procedure OnComGetToolTipInfo Variant lltoolTipInfo
        Forward Send OnComGetToolTipInfo lltoolTipInfo
    End_Procedure

    // When changing to new row, update the form 'No of Rows'
    Procedure OnRowChanged Integer iOldRow Integer iNewSelectedRow
        Forward Send OnRowChanged iOldRow iNewSelectedRow
        Send DoSetCurrentRow
    End_Procedure

    // When loading data, update the footer 'No of Items' text
    Procedure Refresh Integer eMode
        Forward Send Refresh eMode
        Send DoSetCurrentRow
    End_Procedure

    Procedure DoSetCurrentRow
        Send DoSetCheckboxFooterText
    End_Procedure

    Function Checkbox_item_State Integer iItem Returns Integer
        Forward Get Checkbox_Item_State to iItem
        Send DoSetCheckboxFooterText
        Function_Return iItem
    End_Function
    
    Procedure OnComHyperlinkClick Variant llRow Variant llItem Integer llHyperlinkIndex
        Handle  hoRow hoItem hoColumn
        String  sLink
        Integer iRow iColumn

        Get phoReportRow to hoRow
        Get phoReportRecordItem to hoItem

        Set pvComObject of hoItem to llItem
        Get ComIndex    of hoItem to iColumn
        Set pvComObject of hoRow to llRow
        Get ComIndex    of hoRow to iRow
        Get ColumnObject iColumn to hoColumn
        Get RowValue of hoColumn iRow to sLink

        Send OnLinkClicked of hoColumn sLink iRow
    End_Procedure

    // Redisplay the grid records around the current record.
    // If the  record no longer exists or no longer conforms to the current constraints
    // this will redisplay the records with the same iOffset.
    // If both finds fail the grid will not be updated so we need to clear it.
    Procedure RefreshGrid
        Send Find to (Server(Self)) GE (Ordering(Self))   // to refresh grid
        If (not(Found)) Begin
            If (pbDescendingIndexInUse(Self) = True or pbReverseOrdering(Self) = True) Begin
                Send Find to (Server(Self)) FIRST_RECORD (Ordering(Self))
            End
            Else If (pbDescendingIndexInUse(Self) = False or pbReverseOrdering(Self) = False) Begin
                Send Find to (Server(Self)) LAST_RECORD (Ordering(Self))
            End
        End
        If (not(Found) and IsComObjectCreated(Self)) Begin
            Send ResetGrid
        End
    End_Procedure

    Procedure Request_Delete
        Forward Send Request_Delete

        // Needed to ensure list of remaining records displayed correctly
        Send RefreshGrid
    End_Procedure

    // If you quickly double-right-click, or quickly click around a cCJGrid
    // (using a combination of middle-clicks, right-clicks and left-clicks), the application can crash.
    // This fixes that little problem.
    Procedure OnComRowRClick Variant llRow Variant llItem
        Boolean bProcessing
        Get pbRightClickProcessing to bProcessing
        If (not(bProcessing)) Begin
            Set pbRightClickProcessing to True
            Forward Send OnComRowRClick llRow llItem
            Set pbRightClickProcessing to False
        End
    End_Procedure

    Procedure ScaleFont Integer iDirection    // from control + mouse wheel in container object
        Integer iSize jSize kSize iSup iInf iDef
        Handle hoPaintManager hoFont
        Variant vFont
        Boolean blimite
        
        Move 3 to iInf      //max size
        Move 18 to iSup     //min size
        Move 8 to iDef      //default
        Get phoReportPaintManager to hoPaintManager
        If (IsComObjectCreated (hoPaintManager) = False) Begin
            Procedure_Return
        End
        Get Create (RefClass(cComStdFont)) to hoFont
        Get ComTextFont of hoPaintManager to vFont
        Set pvComObject of hoFont to vFont
        If (iDirection = 0) Begin
            Set ComSize of hoFont to iDef
        End
        Else Begin
           Get ComSize of hoFont to iSize
           Move iSize to jSize
           Repeat
                Move (If(iDirection > 0, jSize + 1, jSize - 1)) to jSize
                Move (If(iDirection > 0, If(jSize > iSup, True, False), If(jSize < iInf, True, False))) to blimite
                If (not(blimite)) Begin       
                   Set ComSize of hoFont to jSize
                   Get ComSize of hoFont to kSize
                End
            Until (iSize <> kSize or blimite)
        End
        Send Destroy to hoFont 
        Send ComRedraw  
        Send WriteString of ghoApplication CS_Settings CS_GridFontSize iSize
    End_Procedure 

End_Class
