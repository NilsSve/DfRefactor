//****************************************************************************
// $Module type: Package
// $Module name: cRDCProjectIniFile.pkg
//
// $Author     : Nils Svedmyr, RDC Tools International.
// Copyright (c) 2012 RDC Tools International
// E-mail      : support@rdctools.com
// Web-site    : http://www.rdctools.com
//
// Created     : 2012-09-20 @ 18:04 (Military date format - Year-Month-Day)
//
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
Use cCJGrid.pkg
Use cRDCProjectIniFile.pkg

Class cRDCCJGrid is a cCJGrid

    Procedure Construct_Object
        Forward Send Construct_Object
        // Set to true if an descending index is in use
        Property Boolean pbDescendingIndexInUse False

        Set pbHeaderReorders to True
        Set pbHeaderTogglesDirection to True

        // If you quickly double-right-click, or quickly click around a cCJGrid
        // (using a combination of middle-clicks, right-clicks and left-clicks), the application can crash.
        // To guard against this see the augmented procedure OnComRowRClick below.
        Property Boolean pbRightClickProcessing False

        Property Boolean pbEnableMoveKeys False
        
        { MethodType=Property InitialValue= 0 }
        // To change the height of grid rows.
        Property Integer piGrid_Row_Height  0

        On_Key Key_Alt+Key_Down_Arrow Send MoveDown
        On_Key Key_Alt+Key_Up_Arrow   Send MoveUp
    End_Procedure

    Procedure Construct_Object
        Forward Send Construct_Object   
        Set pbRestoreLayout to True
        Set psLayoutSection to ((Object_Label(Parent(Self))) + "-" + (Object_Label(Self)))
        Set pbUseAlternateRowBackgroundColor to True     
        Set pbUseFocusCellRectangle to False
        Set pbShowRowFocus to True
        Set pbHotTracking to True
        Set pbSelectionEnable to True
        Set piSelectedRowBackColor to clGreenGreyLight
        Set piHighlightBackColor   to clGreenGreyLight
        Set pbShowFooter to True  
        Set peAnchors to anAll
        #IF (!@ > 180)
            #IF (!@ < 230)
                Set peVisualTheme to xtpReportThemeExplorer
            #ELSE
                Set peVisualTheme to xtpGridThemeExplorer
            #ENDIF
        #ENDIF
    End_Procedure

    Procedure ResetGrid
        Boolean bFixed
        Handle  hoPaint
        Integer iCustomDraw
        Boolean bIsVirtual bUseFocusCell
        
        Forward Send ResetGrid
        Get phoReportPaintManager to hoPaint
        Get pbVirtualMode to bIsVirtual
        Get pbUseFocusCellRectangle to bUseFocusCell
        
        If (bUseFocusCell = True) Begin
            Move (xtpCustomDrawItem ior xtpCustomMeasureRow) to iCustomDraw
        End
        
        If (bIsVirtual = True) Begin
            Move (iCustomDraw ior xtpCustomBeforeDrawRow ior xtpCustomMeasureRow) to iCustomDraw
        End
        
        Get ComFixedRowHeight of hoPaint to bFixed // ComSetCustomDraw resets this to True, must be restored
        Send ComSetCustomDraw iCustomDraw 
        Set ComFixedRowHeight of hoPaint to bFixed
    End_Procedure

    { MethodType=Event }
//    Procedure  OnComMeasureRow Variant llRow OLE_HANDLE llhDC Integer llWidth Integer ByRef llHeight
//        Integer iHeight
//        
//        Get piGrid_Row_Height to iHeight
//        If (iHeight <> 0) Begin
//            Move iHeight to llHeight
//        End
//    End_Procedure
       
    Procedure End_Construct_Object
        Forward Send End_Construct_Object

    End_Procedure
    
    // When a grid is first shown on screen the data gets to be loaded.
    // However, if the focus is changed to e.g. another view and back,
    // the ActiveX grid component loses its Window handle and thus must
    // reload data when it gets the focus/new Window handle again. Then the "current"
    // row that was previously selected is lost. This fixes that problem.
    Procedure CreateGridControl
        Handle hoDataSource
        Integer iSelRow
        tDataSourceRow[] aData

        Get phoDataSource to hoDataSource
        Get SelectedRow of hoDataSource to iSelRow
        Get DataSource of hoDataSource to aData
        Forward Send CreateGridControl
        Send InitializeData aData
        Send MoveToRow iSelRow
    End_Procedure
                
    Procedure MoveUp
        tDataSourceRow[] TheData
        tDataSourceRow TheRow
        Handle hDataSource
        Integer iCurrentRow

        If (pbEnableMoveKeys(Self) = False) Begin
            Procedure_Return
        End
        Get phoDataSource to hDataSource
        Get DataSource of hDataSource to TheData
        Get SelectedRow of hDataSource to iCurrentRow
        If (iCurrentRow > 0) Begin
            Move TheData[iCurrentRow - 1] to TheRow
            Move TheData[iCurrentRow] to TheData[iCurrentRow - 1]
            Move TheRow to TheData[iCurrentRow]
            Send ReInitializeData TheData True
            Send MoveToRow (iCurrentRow - 1)
        End
    End_Procedure

    Procedure MoveDown
        tDataSourceRow[] TheData
        tDataSourceRow TheRow
        Handle hDataSource
        Integer iCurrentRow

        If (pbEnableMoveKeys(Self) = False) Begin
            Procedure_Return
        End
        Get phoDataSource to hDataSource
        Get DataSource of hDataSource to TheData
        Get SelectedRow of hDataSource to iCurrentRow
        If ((iCurrentRow + 1) < SizeOfArray(TheData)) Begin
            Move TheData[iCurrentRow] to TheRow
            Move TheData[iCurrentRow + 1] to TheData[iCurrentRow]
            Move TheRow to TheData[iCurrentRow + 1]
            Send ReInitializeData TheData True
            Send MoveToRow (iCurrentRow + 1)
        End
    End_Procedure

    // When changing row, update the footer text
    Procedure OnRowChanged Integer iOldRow Integer iNewSelectedRow
        Forward Send OnRowChanged iOldRow iNewSelectedRow
        // Make sure we don't try to set the row colors before the
        // grid object has been actived and the dialog has been activated.
        If (iOldRow <> -1 and iNewSelectedRow <> 0) Begin
            Send DoSetCurrentRow
        End
    End_Procedure

    // Set row color & Alternate Row Background Color state.
    Procedure DoSetCurrentRow
        String sState sColor

        If (ghoProjectIniFile = 0) Begin
            Procedure_Return
        End
        Get IniFileValue of ghoProjectIniFile (psSectionName(ghoProjectIniFile)) CS_UseHighlightstateText CS_BooleanNo to sState
        Get IniFileValue of ghoProjectIniFile (psSectionName(ghoProjectIniFile)) CS_HighlightColorText clGreenGreyLight to sColor

        If (sState = CS_BooleanYes) Begin
            Set pbSelectionEnable to True
            Set piHighlightBackColor to (Eval(sColor))
        End
        Else Begin
            Set pbSelectionEnable to False
            Set piHighlightBackColor to (Eval(clWhite))
        End

        Get IniFileValue of ghoProjectIniFile (psSectionName(ghoProjectIniFile)) CS_pbAlternateRowColor CS_BooleanYes to sState
        Set pbUseAlternateRowBackgroundColor to (sState = CS_BooleanYes)
    End_Procedure

    // Redisplay the grid records around the current record.
    // If the  record no longer exists or no longer conforms to the current constraints
    // this will redisplay the records with the same iOffset.
    // If both finds fail the grid will not be updated so we need to clear it.
    Procedure RefreshGrid
        Send Find to (Server(Self)) GE (Ordering(Self))   // to refresh grid
        If (not(Found)) Begin
            If (pbDescendingIndexInUse(Self) = True or pbReverseOrdering(Self) = True) Begin
                Send Find to (Server(Self)) FIRST_RECORD (Ordering(Self))
            End
            Else If (pbDescendingIndexInUse(Self) = False or pbReverseOrdering(Self) = False) Begin
                Send Find to (Server(Self)) LAST_RECORD (Ordering(Self))
            End
        End
        If (not(Found) and IsComObjectCreated(Self)) Begin
            Send ResetGrid
        End
    End_Procedure

    Procedure Request_Delete
        Forward Send Request_Delete

        // Needed to ensure list of remaining records displayed correctly
        Send RefreshGrid
    End_Procedure

    // If you quickly double-right-click, or quickly click around a cCJGrid
    // (using a combination of middle-clicks, right-clicks and left-clicks), the application can crash.
    // This fixes that little problem.
    Procedure OnComRowRClick Variant llRow Variant llItem
        Boolean bProcessing
        Get pbRightClickProcessing to bProcessing
        If (not(bProcessing)) Begin
            Set pbRightClickProcessing to True
            Forward Send OnComRowRClick llRow llItem
            Set pbRightClickProcessing to False
        End
    End_Procedure

    Procedure Activating
        Send DoChangeFontSize      
    End_Procedure    

    Procedure DoChangeFontSize
        Handle hoFont hoPaintManager
        Variant vFont
        String sFont sFontSize
        Boolean bCreated
        Integer iVal

        Get IsComObjectCreated to bCreated  // When program is started, grid object isn't created yet.
        If (bCreated = False) Begin
            Procedure_Return
        End

        Get phoReportPaintManager to hoPaintManager
        Get Create (RefClass(cComStdFont)) to hoFont  // Create a font object
        Get ComTextFont of hoPaintManager to vFont    // Bind the font object to the Grid's text font
        Set pvComObject of hoFont to vFont            // Connect DataFlex object with com object

        Get ReadString of ghoApplication CS_Settings CS_GridFontSize 8 to iVal
        Set ComSize of hoFont to iVal
        Send ComRedraw
        Send Destroy to hoFont                        // Destroy the font object (releases memory)
    End_Procedure

    // To enable Ctrl+MouseWheel in the grid to change font size.
    Procedure OnWmMouseWheel Integer wParam Integer lParam
       Integer iKeys iClicks iX iY iCONTROL
       Short iDelta     // Short signed integer
       Boolean bok 
       
       Move 0 to iDelta
       Move (Low(wParam)) to iKeys           // any keys down when pressed
       Move (MemCopy(AddressOf(iDelta),AddressOf(wParam)+2,2)) to bok
       // C_WHEELDATA is 120 as defined by MS as the delta to react to. Once click is usually 120
       Move (iDelta/C_WHEELDELTA) to iClicks // Number of clicks to react to
       Move (Low(lParam)) to iX  // cursor position
       Move (Hi(lParam)) to iY   

       Move (iKeys iand MK_CONTROL ) to iCONTROL  //$008
       If (iCONTROL) Begin
            Broadcast Recursive Send ScaleFont iClicks
       End

       // Tell windows that we've handled the event.    
       Set Windows_Override_State to True    
    End_Procedure
        
    Procedure ScaleFont Integer iDirection    // from control + mouse wheel in container object
        Integer iSize jSize kSize iSup iInf iDef
        Handle hoPaintManager hoFont
        Variant vFont
        Boolean blimite
        
        Move 3 to iInf      //max size
        Move 18 to iSup     //min size
        Move 8 to iDef      //default
        Get phoReportPaintManager to hoPaintManager
        If (IsComObjectCreated (hoPaintManager) = False) Begin
            Procedure_Return
        End
        Get Create (RefClass(cComStdFont)) to hoFont
        Get ComTextFont of hoPaintManager to vFont
        Set pvComObject of hoFont to vFont
        If (iDirection = 0) Begin
            Set ComSize of hoFont to iDef
        End
        Else Begin
           Get ComSize of hoFont to iSize
           Move iSize to jSize
           Repeat
                Move (If(iDirection > 0, jSize + 1, jSize - 1)) to jSize
                Move (If(iDirection > 0, If(jSize > iSup, True, False), If(jSize < iInf, True, False))) to blimite
                If (not(blimite)) Begin       
                   Set ComSize of hoFont to jSize
                   Get ComSize of hoFont to kSize
                End
            Until (iSize <> kSize or blimite)
        End
        Send Destroy to hoFont 
        Send ComRedraw  
        Send WriteString of ghoApplication CS_Settings CS_GridFontSize iSize
    End_Procedure 

End_Class
