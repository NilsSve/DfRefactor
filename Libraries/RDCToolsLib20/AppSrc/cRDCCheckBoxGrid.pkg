//****************************************************************************
// $Module type: Package
// $Module name: cCheckBoxGrid.pkg
//
// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2012-09-27 @ 19:04 (Military date format - Year-Month-Day)
//
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
// Sponsors:     Please SUPPORT this project by donating the amount what you think it is worth to have.
//               By donating you not only support the software, but -if you want- you also get to be
//               named as an official sponsor for the project.
//               Here is the page on VDF-Guidance:
//               http://www.VDF-Guidance.com/ContribPage.asp?Page=SOFTGENMANIFESTS&ContribRecId=131
//
// Purpose:      Please read the ManifestSideBySideManagerHelp.rtf in the Help folder.
// Compatibility:Visual DataFlex 16.0 and up. The tool was developed with VDF 17,
//               but is backwards-compatable with VDF 16 and up.
//               However, there is no reason you can't use the program to generate manifest files
//               and embed the manifest data into older VDF programs than 16.0. In fact the program
//               can be used to create and embed manifest data into any executable that uses
//               COM components!
//               For the main view DbMergerView.vw and ManHds.sl the newer CodeJock grids are used.
//               All other code is compatable with VDF 14.0 and up. So if there is a strong
//               reason to run this program under an earlier VDF version than 16.0 the
//               DbMergerView.vw and ManHds.sl could be changed to use the older DbGrid class.
//               For the same reason some older syntax is used though the code. Such as:
//               Get Create U_Array...
//                 instead of Get Create (Refclass(Array))..
//               Move (SortArray(AllTypeLibIdsArray, Self, get_CompareTypeLibIDs))..
//                 instead of Move (SortArray(AllTypeLibIdsArray, Self, Reffunc(CompareTypeLibIDs)))..
//******************************************************************************
Use Windows.pkg
Use cCJCommandBarSystem.pkg
Use Symdef.pkg
Use cManifestIniFile.pkg
Use cManifestFunctionLibrary.pkg
Use vWin32fh.pkg

Register_Procedure DoOpenCurrentGridItem
Register_Procedure DoOpenFragmentLibrary
Register_Procedure DoOpenProgramsFolder
Register_Procedure DoOpenCOMFolder
Register_Procedure Activate_Setup_Dialog
Register_Procedure RefreshGrid
Register_Procedure ToggleCurrentItem
Register_Procedure SelectAll
Register_Procedure SelectNone
Register_Procedure SelectInvert

#IFNDEF U_cCJCheckBoxGridMenuItem
    Class cCJCheckBoxGridMenuItem is a cCJMenuItem
        Procedure Construct_Object
            Forward Send Construct_Object

            Property Handle phoDestination
            Property Handle phmMessage
            Property Handle phoMenuItem
        End_Procedure

        Procedure OnExecute Variant vCommandBarControl
            Handle hoDest hmMessage hoMenuItem

            Get phoDestination to hoDest
            Get phmMessage to hmMessage

            If (hmMessage <> 0) Begin
                If (hoDest = 0) Begin
                    Get Focus of Desktop to hoDest
                End

                Get phoMenuItem to hoMenuItem
                If (hoMenuItem <> 0) Begin
                    Send hmMessage of hoDest hoMenuItem
                End
                Else Begin
                    Send hmMessage of hoDest
                End
            End
        End_Procedure

        Function IsChecked Returns Boolean
            Boolean bState
            Handle hoDest
            Integer iCurrent_Item iCurrent_Col
            Get Focus of Desktop to hoDest
            If (hoDest > 0) Begin
                Get Current_Col  of hoDest to iCurrent_Col
                Get Current_Item of hoDest to iCurrent_Item
                If (iCurrent_Col > 0) Begin
                    Decrement iCurrent_Item
                End
                Get Select_State of hoDest item iCurrent_Item to bState
            End
            Function_Return bState
        End_Function

    End_Class
#ENDIF

Class cCheckBoxGrid is a Grid

    Procedure Construct_Object

        Property Integer piCheckBoxColumn 0

        Object oGridMenuObject is a cCJContextMenu

            Object oOpenCurrentGridItem_MenuItem is a cCJCheckBoxGridMenuItem
                Set psCaption to "Edit File Under Cursor"
                Set psDescription to "Opens the file under the cursor in the Editor"
                Set psImage to "EditDocument.ico"
                Set psShortcut to "Double-Click"
                Set phmMessage to msg_DoOpenCurrentGridItem
            End_Object

            Object oToggleGridItem_MenuItem is a cCJCheckBoxGridMenuItem
                Set psCaption to "Toggle Current Item"
                Set psDescription to "Toggles the item under the cursor on/off"
                Set psShortcut to "Spacebar"
                Set psImage        to "Off.ico"
                Set psImageChecked to "On0.ico"
                Set phmMessage to msg_ToggleCurrentItem
            End_Object

            Object oSelectAllGridItem_MenuItem is a cCJCheckBoxGridMenuItem
                Set psCaption to "Select &All"
                Set psDescription to "Selects all items in the list"
                Set psImage to "SelectAll.ico"
                Set psShortcut to "Ctrl+A"
                Set pbControlBeginGroup to True
                Set phmMessage to msg_SelectAll
            End_Object

            Object oSelectNoneGridItem_MenuItem is a cCJCheckBoxGridMenuItem
                Set psCaption to "Select &None"
                Set psDescription to "De-selects all items in the list"
                Set psImage to "DeSelectAll.ico"
                Set psShortcut to "Ctrl+N"
                Set phmMessage to msg_SelectNone
            End_Object

            Object oSelectInvertGridItem_MenuItem is a cCJCheckBoxGridMenuItem
                Set psCaption to "&Invert Selections"
                Set psDescription to "Inverts the selections"
                Set psImage to "SelectInvert.ico"
                Set psShortcut to "Ctrl+I"
                Set phmMessage to msg_SelectInvert
            End_Object

            Object oOpenProgramsFolder_MenuItem is a cCJCheckBoxGridMenuItem
                Set psCaption to "&Open Programs Folder"
                Set psDescription to "Open the manifest file's Programs folder in Windows Explorer"
                Set psImage to "OpenProgramsFolder.ico"
                Set psShortcut to "Ctrl+O"
                Set pbControlBeginGroup to True
                Set phmMessage to msg_DoOpenProgramsFolder
            End_Object

//            Object oOpenFragmentLibrary_MenuItem is a cCJCheckBoxGridMenuItem
//                Set psCaption to "Open Manifest Fragment &Library"
//                Set psDescription to "Open the local Manifest Fragment Library in Windows Explorer"
//                Set psImage to "OpenFragmentLibrary.ico"
//                Set psShortcut to "Ctrl+L"
//                Set phmMessage to msg_DoOpenFragmentLibrary
//            End_Object

//           Object oOpenCOMLibrary_MenuItem is a cCJCheckBoxGridMenuItem
//               Set psCaption to "Open Common COM Li&brary"
//                Set psDescription to "Open the local Common COM Library in Windows Explorer"
//                Set psImage to "OpenCOMLibrary.ico"
//                Set psShortcut to "Ctrl+B"
//                Set phmMessage to msg_DoOpenCOMFolder
//            End_Object

            Object oRefreshGrid_MenuItem is a cCJCheckBoxGridMenuItem
                Set psCaption to "Refresh Grid"
                Set psDescription to "Refresh the grid"
                Set psImage to "Refresh.ico"
                Set psShortcut to "F5"
                Set pbControlBeginGroup to True
                Set phmMessage to msg_RefreshGrid
            End_Object

        End_Object

        Forward Send Construct_Object

        Set Floating_Menu_Object to oGridMenuObject

        On_Key Key_Ctrl+Key_A Send SelectAll
        On_Key Key_Ctrl+Key_N Send SelectNone
        On_Key Key_Ctrl+Key_I Send SelectInvert
        On_Key Key_Ctrl+Key_L Send OpenFragmentLibrary
        On_Key Key_Ctrl+Key_O Send OpenProgramsFolder
        On_Key Key_Ctrl+Key_Y Send DoOpenCOMFolder
        On_Key Key_F5         Send RefreshGrid
        On_Key Key_Home       Send Beginning_of_Data
        On_Key Key_End        Send End_of_Data
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object

    End_Procedure

    { EnumList="cx_Select_All, cx_Select_None, cx_Select_Invert" }
    // Set checkboxes of the first column as selected.
    // iState can be one of the following:
    // cx_Select_All, cx_Select_None or cx_Select_Invert
    Procedure Set SelectItems Integer iState
        Integer i iItems iCols
        Boolean bChecked

        Get Line_Size  to iCols
        Get Item_Count to iItems
        Decrement iItems
        For i from 0 to iItems
            Case Begin
                Case (iState = cx_Select_All)
                    Set Select_State item i to True
                    Break
                Case (iState = cx_Select_None)
                    Set Select_State item i to False
                    Break
                Case (iState = cx_Select_Invert)
                    Get Select_State item i to bChecked
                    Set Select_State item i to (not(bChecked))
                    Break
            Case End
            Increment i
            Move (i + iCols -2) to i
        Loop
    End_Procedure

    // Returns a string array with all selected file names
    Function SelectedItems Returns String[]
        String[] sFilesArray
        String sFileName
        Integer i iItems iIndex
        Boolean bChecked

        Move 0 to iIndex
        Get Item_Count to iItems
        Decrement iItems
        For i from 0 to iItems
            Get Select_State item i to bChecked
            If (bChecked = True) Begin
                Get Value item (i+1) to sFileName
                Move sFileName to sFilesArray[iIndex]
                Increment iIndex
            End
            Increment i
        Loop

        Function_Return sFilesArray
    End_Function

    // Select_Toggling is send when a checkbox item is clicked
    // or the space bar is pressed.
    Procedure Select_Toggling Integer iItem Integer bState
        Integer iColumns iCheckboxColumn

        If (iItem = Current) Begin
            Get Current_Item to iItem
        End

        Get piCheckBoxColumn to iCheckboxColumn
        If (iCheckboxColumn >= 0) Begin
            Move (Low(Matrix_Size(Self))) to iColumns
            If (Mod(iItem, iColumns) = iCheckboxColumn) Begin
                Forward Send Select_Toggling iItem bState
            End
            Else Begin
                Forward Send Select_Toggling (Integer(iItem / iColumns) * iColumns) bState
            End
        End
    End_Procedure

    // Opens the current pointed to file name in an editor,
    // when row is double-clicked.
    Procedure Mouse_Click Integer iWindowNumber Integer iPosition
        Send OpenCurrentGridItem
    End_Procedure

    // Opens the current pointed to file name in an editor
    Procedure DoOpenCurrentGridItem
        Integer iItem iCol
        String  sFileName sEditor sEditorParams sPath
        Get Current_Item to iItem
        Get Current_Col  to iCol
        If (iItem >= 0) Begin
            Get Value item (iItem - iCol +1) to sFileName
            If (sFileName contains ".txt") Begin
//                Get psManifestFragmentLibrary of ghoManifestFunctionLibrary to sPath
                Get vFolderFormat sPath to sPath
//                Get psManifestFileEditor of ghoManifestIniFile to sEditor
//                Get psManifestFileEditorParams of ghoManifestIniFile to sEditorParams
//                If (sEditorParams <> "") Begin
//                    Runprogram Background sEditor ('"' + sEditorParams + '"' * '"' + sPath + "\" + sFileName + '"')
//                End
//                Else Begin
//                    Runprogram Background sEditor ('"' + sPath + "\" + sFileName + '"')
//                End
            End
        End
    End_Procedure

    // Toggles the current item on/off
    Procedure ToggleCurrentItem
        Integer iItem iCol
        Boolean bState
        Get Current_Item to iItem
        Get Current_Col to iCol
        Get Select_State item (iItem - iCol) to bState
        Set Select_State item (iItem - iCol) to (not(bState))
    End_Procedure

    // Selects all items
    Procedure SelectAll
        Set SelectItems to cx_Select_All
    End_Procedure

    // Deselects all items
    Procedure SelectNone
        Set SelectItems to cx_Select_None
    End_Procedure

    // Inverts the current selections
    Procedure SelectInvert
        Set SelectItems to cx_Select_Invert
    End_Procedure

    // Opens the 'Manifest Fragment Library' with Windows Explorer
    Procedure DoOpenFragmentLibrary
        String sPath sManifestFragmentLibrary
//        Get psManifestFragmentLibrary of ghoManifestFunctionLibrary to sManifestFragmentLibrary
        Get vFolderFormat sManifestFragmentLibrary to sManifestFragmentLibrary
//        Get IniFileValue of ghoManifestIniFile CS_SectionName CS_ManifestFolder sManifestFragmentLibrary to sPath
        Send vShellExecute "open" "Explorer.exe" sPath ""
    End_Procedure

    Procedure DoOpenProgramsFolder
        String sPath
//        Get psTargetPath of ghoManifestFunctionLibrary to sPath
        Send vShellExecute "open" "Explorer.exe" sPath ""
    End_Procedure

    Procedure DoOpenCOMFolder
        String sPath
//        Get psCommonCOMLibraryPath of ghoManifestFunctionLibrary to sPath
        Send vShellExecute "open" "Explorer.exe" sPath ""
    End_Procedure

    Procedure DoFillGrid
        String sYes sColor

        Send Delete_Data
        Get IniFileValue of ghoManifestIniFile CS_SectionName CS_UseHighlightstateText CS_BooleanYes to sYes
        Get IniFileValue of ghoManifestIniFile CS_SectionName CS_HighlightColorText clAqua to sColor
        If (CS_BooleanYes = sYes) Begin
            Set Highlight_Row_State  to True
            If (Eval(sColor) = clDefault) Begin
                Move clAqua to sColor
            End
            Set CurrentRowColor      to (Eval(sColor))
            Set CurrentCellColor     to (Eval(sColor))
        End
        Else Begin
            Set Highlight_Row_State  to False
            Set CurrentRowColor      to (Eval(clWhite))
            Set CurrentCellColor     to (Eval(clWhite))
        End
    End_Procedure

    // Deletes all grid data and refills it.
    Procedure RefreshGrid
        Send DoFillGrid
        Send Down
        Send Up
    End_Procedure

End_Class
