// Class: cFontDialog
// Author: Vincent
// Created: 25-11-2005 9:41:15

// DFO: cFontDialog.Dfo
// DFC: cFontDialog.Dfc

Use Windows.Pkg
Use DLL.Pkg

// Flags
Define CF_SCREENFONTS           For |CI$00000001
Define CF_PRINTERFONTS          For |CI$00000002
// The following line is wrongly defined in FONT_DLG.PKG and thus commented out here
Define CF_BOTH                  For (CF_SCREENFONTS iOr CF_PRINTERFONTS)
Define CF_SHOWHELP              For |CI$00000004
Define CF_ENABLEHOOK            For |CI$00000008
Define CF_ENABLETEMPLATE        For |CI$00000010
Define CF_ENABLETEMPLATEHANDLE  For |CI$00000020
Define CF_INITTOLOGFONTSTRUCT   For |CI$00000040
Define CF_USESTYLE              For |CI$00000080
Define CF_EFFECTS               For |CI$00000100
Define CF_APPLY                 For |CI$00000200
Define CF_ANSIONLY              For |CI$00000400
Define CF_NOVECTORFONTS         For |CI$00000800
Define CF_NOOEMFONTS            For CF_NOVECTORFONTS
Define CF_NOSIMULATIONS         For |CI$00001000
Define CF_LIMITSIZE             For |CI$00002000
Define CF_FIXEDPITCHONLY        For |CI$00004000
Define CF_WYSIWYG               For |CI$00008000
Define CF_FORCEFONTEXIST        For |CI$00010000
Define CF_SCALABLEONLY          For |CI$00020000
Define CF_TTONLY                For |CI$00040000
Define CF_NOFACESEL             For |CI$00080000
Define CF_NOSTYLESEL            For |CI$00100000
Define CF_NOSIZESEL             For |CI$00200000
// The following flags are for Windows '95 only.
Define CF_SELECTSCRIPT          For |CI$00400000
Define CF_NOSCRIPTSEL           For |CI$00800000
Define CF_NOVERTFONTS           For |CI$01000000
Define CF_SCRIPTSONLY           For CF_ANSIONLY

// Error codes for the Common Dialog function call
Define CDERR_DIALOGFAILURE    For |CI$FFFF
Define CDERR_GENERALCODES     For |CI$0000 // No text found
Define CDERR_STRUCTSIZE       For |CI$0001
Define CDERR_INITIALIZATION   For |CI$0002
Define CDERR_NOTEMPLATE       For |CI$0003
Define CDERR_NOHINSTANCE      For |CI$0004
Define CDERR_LOADSTRFAILURE   For |CI$0005
Define CDERR_FINDRESFAILURE   For |CI$0006
Define CDERR_LOADRESFAILURE   For |CI$0007
Define CDERR_LOCKRESFAILURE   For |CI$0008
Define CDERR_MEMALLOCFAILURE  For |CI$0009
Define CDERR_MEMLOCKFAILURE   For |CI$000A
Define CDERR_NOHOOK           For |CI$000B
Define CDERR_REGISTERMSGFAIL  For |CI$000C

// Error text strings to the above errors
Define C_$CDERR_DIALOGFAILURE   For "The dialog box could not be created. The common dialog box function's call to the DialogBox function failed. For example, this error occurs if the common dialog box call specifies an invalid window handle."
Define C_$CDERR_FINDRESFAILURE  For "The common dialog box function failed to find a specified resource."
Define C_$CDERR_INITIALIZATION  For "The common dialog box function failed during initialization. This error often occurs when sufficient memory is not available."
Define C_$CDERR_LOADRESFAILURE  For "The common dialog box function failed to load a specified resource."
Define C_$CDERR_LOADSTRFAILURE  For "The common dialog box function failed to load a specified string."
Define C_$CDERR_LOCKRESFAILURE  For "The common dialog box function failed to lock a specified resource."
Define C_$CDERR_MEMALLOCFAILURE For "The common dialog box function was unable to allocate memory for internal structures."
Define C_$CDERR_MEMLOCKFAILURE  For "The common dialog box function was unable to lock the memory associated with a handle."
Define C_$CDERR_NOHINSTANCE     For "The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box, but you failed to provide a corresponding instance handle."
Define C_$CDERR_NOHOOK          For "The ENABLEHOOK flag was set in the Flags member of the initialization structure for the corresponding common dialog box, but you failed to provide a pointer to a corresponding hook procedure."
Define C_$CDERR_NOTEMPLATE      For "The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box, but you failed to provide a corresponding template."
Define C_$CDERR_REGISTERMSGFAIL For "The RegisterWindowMessage function returned an error code when it was called by the common dialog box function."
Define C_$CDERR_STRUCTSIZE      For "The lStructSize member of the initialization structure for the corresponding common dialog box is invalid"

// Orginal FontTypes constants
Define fdANSIONLY              For |CI$00400
Define fdNOVECTORFONTS         For |CI$00800
Define fdNOSIMULATIONS         For |CI$01000
Define fdFIXEDPITCHONLY        For |CI$04000
Define fdSCALABLEONLY          For |CI$20000
Define fdTTONLY                For |CI$40000

// Font weights
Define FW_DONTCARE   For 0
Define FW_THIN       For 100
Define FW_EXTRALIGHT For 200
Define FW_ULTRALIGHT For 200
Define FW_LIGHT      For 300
Define FW_NORMAL     For 400
Define FW_REGULAR    For 400
Define FW_MEDIUM     For 500
Define FW_SEMIBOLD   For 600
Define FW_DEMIBOLD   For 600
Define FW_BOLD       For 700
Define FW_EXTRABOLD  For 800
Define FW_ULTRABOLD  For 800
Define FW_HEAVY      For 900
Define FW_BLACK      For 900

// Character sets
Define ANSI_CHARSET        For 0
Define BALTIC_CHARSET      For 186
Define CHINESEBIG5_CHARSET For 136
Define DEFAULT_CHARSET     For 1
Define EASTEUROPE_CHARSET  For 238
Define GB2312_CHARSET      For 134
Define GREEK_CHARSET       For 161
Define HANGUL_CHARSET      For 129
Define MAC_CHARSET         For 77
Define OEM_CHARSET         For 255
Define RUSSIAN_CHARSET     For 204
Define SHIFTJIS_CHARSET    For 128
Define SYMBOL_CHARSET      For 2
Define TURKISH_CHARSET     For 162
Define VIETNAMESE_CHARSET  For 163
Define JOHAB_CHARSET       For 130
Define ARABIC_CHARSET      For 178
Define HEBREW_CHARSET      For 177
Define THAI_CHARSET        For 222

// Output precision
Define OUT_DEFAULT_PRECIS        For 0
Define OUT_STRING_PRECIS         For 1
Define OUT_CHARACTER_PRECIS      For 2
Define OUT_STROKE_PRECIS         For 3
Define OUT_TT_PRECIS             For 4
Define OUT_DEVICE_PRECIS         For 5
Define OUT_RASTER_PRECIS         For 6
Define OUT_TT_ONLY_PRECIS        For 7
Define OUT_OUTLINE_PRECIS        For 8
Define OUT_SCREEN_OUTLINE_PRECIS For 9

// Clipping precision
Define CLIP_DEFAULT_PRECIS   For 0
Define CLIP_CHARACTER_PRECIS For 1
Define CLIP_STROKE_PRECIS    For 2
Define CLIP_MASK             For 15
Define CLIP_LH_ANGLES        For 16
Define CLIP_TT_ALWAYS        For 32
Define CLIP_EMBEDDED         For 64

// Output quality
Define DEFAULT_QUALITY        For 0
Define DRAFT_QUALITY          For 1
Define PROOF_QUALITY          For 2
// The following output quality's are for Windows '95 only
Define NONANTIALIASED_QUALITY For 3
Define ANTIALIASED_QUALITY    For 4
// This output quality is for Windows XP only
Define CLEARTYPE_QUALITY      For 5

// Pitch
Define DEFAULT_PITCH  For 0
Define FIXED_PITCH    For 1
Define VARIABLE_PITCH For 2
// The following pitch is for Window '95 only
Define MONO_FONT For 8

// Font family
Define FF_DONTCARE   For |CI$0000 // (0<<4) Don't care or don't know.
Define FF_ROMAN      For |CI$0010 // (1<<4) Fonts with variable stroke width (proportional) and with serifs.
Define FF_SWISS      For |CI$0020 // (2<<4) Fonts with variable stroke width (proportional) and without serifs.
Define FF_MODERN     For |CI$0030 // (3<<4) Fonts with constant stroke width (monospace), with or without serifs.
Define FF_SCRIPT     For |CI$0040 // (4<<4) Fonts designed to look like handwriting.
Define FF_DECORATIVE For |CI$0050 // (5<<4) Novelty fonts.

// Font type
Define SIMULATED_FONTTYPE For |CI$8000
Define PRINTER_FONTTYPE   For |CI$4000
Define SCREEN_FONTTYPE    For |CI$2000
Define BOLD_FONTTYPE      For |CI$0100
Define ITALIC_FONTTYPE    For |CI$0200
Define REGULAR_FONTTYPE   For |CI$0400

// EnumFonts Masks
Define RASTER_FONTTYPE     For |CI$0001
Define DEVICE_FONTTYPE     For |CI$0002
Define TRUETYPE_FONTTYPE   For |CI$0004

Define LF_FACESIZE For 32

Define LOGPIXELSX    For 88    // Logical pixels/inch in X
Define LOGPIXELSY    For 90    // Logical pixels/inch in Y

External_Function WinAPI_ChooseFont "ChooseFontA" COMDLG32.DLL Pointer lpChooseFont Returns Integer
External_Function WinAPI_GetDeviceCaps "GetDeviceCaps" Gdi32.Dll Handle hDc Integer nIndex Returns Integer
External_Function WinAPI_GetDc "GetDC" User32.Dll Handle hWnd Returns Handle
External_Function WinAPI_CommDlgExtendedError "CommDlgExtendedError" COMDLG32.DLL Returns UInteger

Struct tChooseFont
    UInteger lStructSize
    Handle hwndOwner
    Handle hDC
    Pointer lpLogFont
    Integer iPointSize
    UInteger Flags
    UInteger rgbColors
    Integer lCustData
    Pointer lpfnHook
    Pointer lpTemplateName
    Handle hInstance
    Pointer lpszStyle
    UShort nFontType
    UShort ___MISSING_ALIGNMENT__ // This member is not documented but needed and present in the header files
    Integer nSizeMin
    Integer nSizeMax
End_Struct

Struct tLogFont
    Integer lfHeight
    Integer lfWidth
    Integer lfEscapement
    Integer lfOrientation
    Integer lfWeight
    UChar lfItalic
    UChar lfUnderline
    UChar lfStrikeOut
    UChar lfCharSet
    UChar lfOutPrecision
    UChar lfClipPrecision
    UChar lfQuality
    UChar lfPitchAndFamily
    UChar[LF_FACESIZE] lfFaceName
End_Struct

Class cRDCFontDialog is a cObject
    Procedure Construct_Object
        Forward Send Construct_Object

        Property Boolean pbReportErrors True

        // ChooseFont property's
        //Doc/ Interface=Public
        Property Boolean pbLimitSize False
        Property Boolean pbShowHelp False
        Property Boolean pbEffects True
        Property Boolean pbNoVectorFonts False
        Property Boolean pbNoOEMFonts False
        Property Boolean pbFixedPitchOnly False
        Property Boolean pbForceFontExist True
        Property Boolean pbScalableOnly False
        Property Boolean pbNoFaceSel False
        Property Boolean pbNoStyleSel False
        Property Boolean pbNoSizeSel False
        Property Boolean pbSelectScript False
        Property Boolean pbNoScriptSel False
        Property Boolean pbNoVertFonts False
        Property Boolean pbScriptsOnly False
        Property Integer piPointSize 0
        Property Integer piRGBColors 0
        Property Integer piFontType (SCREEN_FONTTYPE iOr REGULAR_FONTTYPE iOr RASTER_FONTTYPE)
        Property Integer piSizeMin 1
        Property Integer piSizeMax 9999

        // LogFont property's
        Property Integer piHeight 0
        Property Integer piWidth 0
        Property Integer piEscapement 0
        Property Integer piOrientation 0
        Property Integer piWeight FW_REGULAR
        Property Boolean pbItalic False
        Property Boolean pbUnderline False
        Property Boolean pbStrikeOut False
        Property Integer piCharSet DEFAULT_CHARSET
        Property Integer piOutPrecision OUT_STRING_PRECIS
        Property Integer piClipPrecision CLIP_STROKE_PRECIS
        Property Integer piQuality DEFAULT_QUALITY
        Property Integer piPitch VARIABLE_PITCH
        Property Integer piFamily FF_SWISS
        Property String psFaceName "MS Sans Serif"
    End_Procedure

    Function OwnerHandle Returns Handle
        Handle hWnd hoObj

        // always try to use the main_window as the owner
        Get Main_Window Of Desktop To hoObj

        // if no main window, try to find a container handle starting at the focus
        If (hoObj <= Desktop) Begin
            Get Focus Of Desktop To hoObj
        End

        // search for container handle, delegate until we reach the desktop
        If (hoObj > Desktop) Begin
            Get Container_Handle Of hoObj To hWnd
            While (hWnd = 0 And hoObj > Desktop)
                Get Parent Of hoObj To hoObj
                Get Container_Handle Of hoObj To hWnd
            End
        End

        Function_Return hWnd
    End_Function

    //Doc/ Interface=Public
    Function FontDialog Returns Integer
        Integer iResult iFamily iPitch iLength iPos
        Integer iLogPixelsY iFontType
        String sFaceName
        Handle hOwner hDC
        tLogFont ttLogFont
        tChooseFont ttChooseFont
        Boolean bState bReportErrors

        Get OwnerHandle To hOwner

        Move (WinAPI_GetDc (hOwner)) To hDc
        If (hDc <> 0) Begin
            Move (WinAPI_GetDeviceCaps (hDc, LOGPIXELSY)) To iLogPixelsY
        End

        Get piHeight To ttLogFont.lfHeight

        If (ttLogFont.lfHeight > 0) Begin
            If (hDc <> 0) Begin
                Move (((ttLogFont.lfHeight * iLogPixelsY) / 72) * -1) To ttLogFont.lfHeight
            End
        End

        Get piWidth To ttLogFont.lfWidth
        Get piEscapement To ttLogFont.lfEscapement
        Get piOrientation To ttLogFont.lfOrientation
        Get piWeight To ttLogFont.lfWeight
        Get pbItalic To ttLogFont.lfItalic
        Get pbUnderline To ttLogFont.lfUnderline
        Get pbStrikeOut To ttLogFont.lfStrikeOut
        Get piCharSet To ttLogFont.lfCharSet
        Get piOutPrecision To ttLogFont.lfOutPrecision
        Get piClipPrecision To ttLogFont.lfClipPrecision
        Get piQuality To ttLogFont.lfQuality

        // FontWeight must be between 0 and 1000 so any other value must be corrected
        // we use FW_REGULAR because that is the most logical correction
        If (ttLogFont.lfWeight < 0 Or ttLogFont.lfWeight > 1000) Begin
            Move FW_REGULAR To ttLogFont.lfWeight
        End

        Get piFontType To iFontType
        Get piFamily To iFamily
        Get piPitch To iPitch
        Move (iFamily iOr iPitch) To ttLogFont.lfPitchAndFamily

        Get psFaceName To sFaceName
        Move (Trim (Left (sFaceName, 31))) To sFaceName
        Move (Length (sFaceName)) To iLength
        For iPos From 1 To iLength
            Move (Ascii (Mid (sFaceName, 1, iPos))) To ttLogFont.lfFaceName[iPos - 1]
        Loop

        Move (SizeOfType (tChooseFont)) To ttChooseFont.lStructSize
        Move hOwner To ttChooseFont.hwndOwner
        Move (AddressOf (ttLogFont)) To ttChooseFont.lpLogFont

        Move CF_INITTOLOGFONTSTRUCT To ttChooseFont.Flags

        Get pbLimitSize To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_LIMITSIZE)) To ttChooseFont.Flags
        End

        If (IsFlagIn (SCREEN_FONTTYPE, iFontType)) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_SCREENFONTS)) To ttChooseFont.Flags
        End

        Get pbShowHelp To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_SHOWHELP)) To ttChooseFont.Flags
        End

        Get pbEffects To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_EFFECTS)) To ttChooseFont.Flags
        End

        Get pbNoOEMFonts To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_NOOEMFONTS)) To ttChooseFont.Flags
        End

        Get pbForceFontExist To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_FORCEFONTEXIST)) To ttChooseFont.Flags
        End

        Get pbNoFaceSel To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_NOFACESEL)) To ttChooseFont.Flags
        End

        Get pbNoStyleSel To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_NOSTYLESEL)) To ttChooseFont.Flags
        End

        Get pbNoSizeSel To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_NOSIZESEL)) To ttChooseFont.Flags
        End

        Get pbSelectScript To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_SELECTSCRIPT)) To ttChooseFont.Flags
        End

        Get pbNoScriptSel To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_NOSCRIPTSEL)) To ttChooseFont.Flags
        End

        Get pbNoVertFonts To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_NOVERTFONTS)) To ttChooseFont.Flags
        End

        Get pbScriptsOnly To bState
        If (bState) Begin
             Move (AddBitValue (ttChooseFont.Flags, CF_SCRIPTSONLY)) To ttChooseFont.Flags
        End

        Get pbNoVectorFonts To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_NOVECTORFONTS)) To ttChooseFont.Flags
        End

        If (IsFlagIn (SIMULATED_FONTTYPE, iFontType)) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_NOSIMULATIONS)) To ttChooseFont.Flags
        End

        Get pbFixedPitchOnly To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_FIXEDPITCHONLY)) To ttChooseFont.Flags
        End

        Get pbScalableOnly To bState
        If (bState) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_SCALABLEONLY)) To ttChooseFont.Flags
        End

        If (IsFlagIn (TRUETYPE_FONTTYPE, iFontType)) Begin
            Move (AddBitValue (ttChooseFont.Flags, CF_TTONLY)) To ttChooseFont.Flags
        End

        Get piPointSize To ttChooseFont.iPointSize
        Get piRGBColors To ttChooseFont.rgbColors
        Move iFontType To ttChooseFont.nFontType
        Get piSizeMin To ttChooseFont.nSizeMin
        Get piSizeMax To ttChooseFont.nSizeMax

        Move (WinAPI_ChooseFont (AddressOf (ttChooseFont))) To iResult

        If (Not (iResult)) Begin
            Move (WinAPI_CommDlgExtendedError ()) To iResult

            Get pbReportErrors To bReportErrors
            If (bReportErrors) Begin
                Case Begin
                    Case (iResult = CDERR_DIALOGFAILURE)
                        Error DFERR_PROGRAM C_$CDERR_DIALOGFAILURE
                        Case Break
                    Case (iResult = CDERR_STRUCTSIZE)
                        Error DFERR_PROGRAM C_$CDERR_STRUCTSIZE
                        Case Break
                    Case (iResult = CDERR_INITIALIZATION)
                        Error DFERR_PROGRAM C_$CDERR_INITIALIZATION
                        Case Break
                    Case (iResult = CDERR_NOTEMPLATE)
                        Error DFERR_PROGRAM C_$CDERR_NOTEMPLATE
                        Case Break
                    Case (iResult = CDERR_NOHINSTANCE)
                        Error DFERR_PROGRAM C_$CDERR_NOHINSTANCE
                        Case Break
                    Case (iResult = CDERR_LOADSTRFAILURE)
                        Error DFERR_PROGRAM C_$CDERR_LOADSTRFAILURE
                        Case Break
                    Case (iResult = CDERR_FINDRESFAILURE)
                        Error DFERR_PROGRAM C_$CDERR_FINDRESFAILURE
                        Case Break
                    Case (iResult = CDERR_LOADRESFAILURE)
                        Error DFERR_PROGRAM C_$CDERR_LOADRESFAILURE
                        Case Break
                    Case (iResult = CDERR_LOCKRESFAILURE)
                        Error DFERR_PROGRAM C_$CDERR_LOCKRESFAILURE
                        Case Break
                    Case (iResult = CDERR_MEMALLOCFAILURE)
                        Error DFERR_PROGRAM C_$CDERR_MEMALLOCFAILURE
                        Case Break
                    Case (iResult = CDERR_MEMLOCKFAILURE)
                        Error DFERR_PROGRAM C_$CDERR_MEMLOCKFAILURE
                        Case Break
                    Case (iResult = CDERR_NOHOOK)
                        Error DFERR_PROGRAM C_$CDERR_NOHOOK
                        Case Break
                    Case (iResult = CDERR_REGISTERMSGFAIL)
                        Error DFERR_PROGRAM C_$CDERR_REGISTERMSGFAIL
                        Case Break
                Case End
            End

            Function_Return iResult
        End

        If (ttLogFont.lfHeight < 0) Begin
            If (hDc <> 0) Begin
                Move (((ttLogFont.lfHeight * -1) * 72) / iLogPixelsY) To ttLogFont.lfHeight
            End
        End

        Set piHeight To ttLogFont.lfHeight
        Set piWidth To ttLogFont.lfWidth
        Set piEscapement To ttLogFont.lfEscapement
        Set piOrientation To ttLogFont.lfOrientation
        Set piWeight To ttLogFont.lfWeight
        Set pbItalic To ttLogFont.lfItalic
        Set pbUnderline To ttLogFont.lfUnderline
        Set pbStrikeOut To ttLogFont.lfStrikeOut
        Set piCharSet To ttLogFont.lfCharSet
        Set piOutPrecision To ttLogFont.lfOutPrecision
        Set piClipPrecision To ttLogFont.lfClipPrecision
        Set piQuality To ttLogFont.lfQuality
        Set psFaceName To (AddressOf (ttLogFont.lfFaceName))
        Set piPitch To (Integer (ttLogFont.lfPitchAndFamily) iAnd |CI$3)
        Set piFamily To (Integer (ttLogFont.lfPitchAndFamily) iAnd |CI$FC)
        Set piPointSize To ttChooseFont.iPointSize
        Set piRGBColors To ttChooseFont.rgbColors
        Set piFontType To ttChooseFont.nFontType
        Set piSizeMin To ttChooseFont.nSizeMin
        Set piSizeMax To ttChooseFont.nSizeMax

        Function_Return True
    End_Function
End_Class
