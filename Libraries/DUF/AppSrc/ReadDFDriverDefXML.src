Use cApplication.pkg
Use Dferror.pkg                 // Error handling class and object
Use seq_chnl.pkg                // Sequential channel management
Use Statpnl.pkg                 // StatusPanel class
Use File_dlg.pkg                // SaveAsDialog & OpenDialog class
Use Flexml.pkg
Use cli.pkg
Use vWin32fh.pkg
Use oEditContextMenu.pkg
Use cDbUpdateFunctionLibrary.pkg
Use cRDCHeaderGroup.pkg
Use cSQLComboForm.pkg
Use ChilkatXML-9.5.0-win32.pkg

Object oApplication is a cApplication
    Set psCompany to "RDC Tools International"
    Set psProduct to "Driver Info Import"
    Set psProgram to "Read DF Driver Def XML file"
    Set psVersion to "2023"
    Property String psCompileDateAndTime
End_Object

Object oMainPanel is a BasicPanel
    Set Location to 59 173
    Set Size to 180 394
    Set piMinSize to 180 394
    Set Border_Style to Border_Thick
    Set Locate_Mode to Center_On_Screen
    Set Label to "Read DF Driver Def XML file - Internal Usage Only!"
    Set Maximize_Icon to False
    Set peNeighborhood to nhPublic
    
    // Struct array to keep driver XML file Data Types read by the ReadXMLDriverData message.
    // Then used by the WriteXMLDriverTypeData message to write them to file.
    Property tColumnType[] paColumnType

    Object oCommandBarSystem is a cCJCommandBarSystem
        Set pbAutoResizeIcons to True
        Move Self to ghoCommandBars
    End_Object                  
    
    Object oDbUpdateFunctionLibrary is a cDbUpdateFunctionLibrary
    End_Object

    Object oReadXMLFile_grp is a cRDCHeaderGroup
        Set Size to 67 360
        Set Location to 11 17
        Set peAnchors to anTopLeftRight
        Set psLabel to "Read Driver Def XML file" 
        Set psImage to "ActionOpen1.ico"

        Object oFileNameDialog is a OpenDialog
            Set Dialog_Caption to "Select a Driver XML-file"
            Set Filter_String to "XML Files (.xml)|*.xml|All files (*.*)|*.*"
        End_Object

        Object oDriverXMLFileName_fm is a Form
            Set Size to 13 298
            Set Location to 20 43
//            Set Label to "XML Driver Filename to Read:"
            Set Label_Justification_Mode to JMode_Top
            Set Label_Col_Offset to 0
            Set Prompt_Button_Mode to PB_PromptOn
            Set peAnchors to anTopLeftRight
            Set Label_Row_Offset to 1

            Procedure Prompt
                Boolean bOk
                String sPath sDrive sFileName

                Get Value to sFileName
                Move (Trim (sFileName)) to sFileName
                If (sFileName <> "") Begin
                    Move (Left(sFileName, 2))     to sDrive
                    Get ParseFolderName sFileName to sPath
//                    Get Parse_Drive sFileName to sDrive
//                    Get Parse_Path  sFileName to sPath
                End
                If (sPath <> "") Begin
                    Set Initial_Folder of oFileNameDialog to (sDrive - sPath)
                End

                Get Show_Dialog of oFileNameDialog to bOk
                If (bOk) Begin
                    Get File_Name of oFileNameDialog to sFileName
                    Set Value to sFileName
                End
            End_Procedure 
            
            Procedure OnChange
                String sValue
                
                Get Value to sValue
                If (sValue <> "") Begin
                    Set psOutputFileName of oOutputFilename_fm to sValue
                    
                End
            End_Procedure

            Procedure OnStartUp
                String sBinPath sXMLFileName

                Get DFBinPath of ghoApplication to sBinPath
                Move "\MSSQLDRV_DriverDef.xml" to sXMLFileName
                Set Value to (sBinPath + sXMLFileName) 
                
                Set Value of oDriverID_cf to "MSSQLDRV_ID"
                Set Value of oDbType_cf   to "EN_dbTypeMSSQL"

            End_Procedure

        End_Object

        Object oDbType_cf is a cSQLComboForm
            Set Size to 11 100
            Set Location to 45 43
            Set Label_Col_Offset to 0
            Set Label to "DbType:"
            Set Label_Justification_Mode to JMode_Top
            Set Label_Row_Offset to 1
            Set Label to "Database Type"
            Set Entry_State to False
            Set Combo_Sort_State to False
            Set piItem to 3

            Procedure Combo_Fill_List
                Send Combo_Add_Item CS_dbTypeMSSQL
                Send Combo_Add_Item CS_dbTypeMySQL
                Send Combo_Add_Item CS_dbTypeOracle
                Send Combo_Add_Item CS_dbTypeDB2
                Send Combo_Add_Item CS_dbTypePostgre
            End_Procedure

            Procedure OnChange
                Integer iDbType
    
                Get SelectedDbType to iDbType
                Send Refill_Comboform of oDriverID_cf iDbType
            End_Procedure
    
            Function SelectedDbType Returns Integer
                Integer iRetval
                String sDbType
    
                Get Value to sDbType
                Get SqlUtilDbTypeToInteger of ghoDbUpdateFunctionLibrary sDbType to iRetval
    
                Function_Return iRetval
            End_Function

        End_Object

        Object oDriverID_cf is a cSQLComboForm
            Set Size to 11 100
            Set Location to 45 150
            Set Label_Justification_Mode to JMode_Top
            Set Label_Col_Offset to 0
            Set Label_Row_Offset to 1
            Set Label to "Driver ID:"
            Set Entry_State to False
            Set Combo_Sort_State to False
            Set piItem to 4

            Procedure Refill_Comboform Integer iDbType
                String sValue
                Send Combo_Delete_Data
                Case Begin
                    Case (iDbType = EN_dbTypeMSSQL)
                        Send Combo_Add_Item MSSQLDRV_ID
                        Move MSSQLDRV_ID to sValue
                        Case Break
                    Case (iDbType = EN_dbTypeMySQL)
                        Send Combo_Add_Item ODBC_DRV_ID
                        Move ODBC_DRV_ID to sValue
                        Case Break
                    Case (iDbType = EN_dbTypeOracle)
                        Send Combo_Add_Item ODBC_DRV_ID
                        Move ODBC_DRV_ID to sValue
                        Case Break
                    Case (iDbType = EN_dbTypeDB2)
                        Send Combo_Add_Item DB2_DRV_ID
                        Move DB2_DRV_ID to sValue
                        Case Break
                    Case (iDbType = EN_dbTypePostgre)
                        Send Combo_Add_Item ODBC_DRV_ID
                        Move ODBC_DRV_ID to sValue
                        Case Break
                    Case Else
                        Send Combo_Add_Item DATAFLEX_ID
                        Move DATAFLEX_ID to sValue
                Case End
                Set Value to sValue
            End_Procedure

            Procedure OnChange
                String sDriverID
                Integer iDbType iPos

                Get Value to sDriverID
                Move (Pos("-", sDriverID)) to iPos
                Move (Left(sDriverID, (iPos - 2))) to sDriverID
                If (sDriverID = "") Begin
                    Move MSSQLDRV_ID to sDriverID
                End
                Get SelectedDbType of oDbType_cf to iDbType
            End_Procedure 
            
        End_Object

        Object oOpenInEditor_btn is a Button
            Set Size to 12 77
            Set Location to 45 265
            Set Label to "View in Editor"
            Set peAnchors to anBottomRight

            Procedure OnClick
                String sFileName             
                Boolean bExists
                
                Get Value of oDriverXMLFileName_fm to sFileName
                Get vFilePathExists sFileName to bExists
                If (bExists = False) Begin
                    Send Info_Box "File doesn't exist"
                    Procedure_Return
                End
                Runprogram Shell Background sFileName
            End_Procedure

        End_Object
         
    End_Object

    Object oWriteResult_grp is a cRDCHeaderGroup
        Set Size to 67 360
        Set Location to 87 17
        Set peAnchors to anTopLeftRight
        Set psLabel to "Write Driver Data Types to Package Name:"
        Set psImage to "ActionPrint1.ico"
        
        Object oOutputFilename_fm is a Form
            Set Size to 13 298
            Set Location to 20 43
//            Set Label to "Output Package File Name:"
            Set Label_Justification_Mode to JMode_Top
            Set Label_Col_Offset to 0
            Set Prompt_Button_Mode to PB_PromptOn
            Set peAnchors to anTopLeftRight
            Set Label_Row_Offset to 1

            Procedure Prompt
                String sFileName sPath sFileMask sRetval

                Get Value to sFileName
                Get ParseFolderName sFileName to sPath
                Move "Include files (*.inc)|*.inc|Package files (*.pkg)|*.pkg" to sFileMask
                Get vSelect_File sFileMask "Please enter a file name" sPath to sRetval
                If (sRetval <> "") Begin
                    Set Value to sRetval
                End
            End_Procedure

            Procedure Set psOutputFileName String sXMLFileName
                String sOutPutFileName sPath sExt
                
                Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath
                Get ParseFileName sXMLFileName to sOutPutFileName
                Get ParseFileExtension sOutPutFileName to sExt
                // We default to set the extension to an include file (.inc):
                Move (Replace(sExt, sOutPutFileName, "inc")) to sOutPutFileName
                Set Value to (sPath + "\" + sOutPutFileName)

            End_Procedure

        End_Object

        Object oOpenInEditor_btn is a Button
            Set Size to 12 77
            Set Location to 45 265
            Set Label to "View in Editor"
            Set peAnchors to anBottomRight

            Procedure OnClick
                String sFileName             
                Boolean bExists
                
                Get Value of oOutputFilename_fm to sFileName
                Get vFilePathExists sFileName to bExists
                If (bExists = False) Begin
                    Send Info_Box "File doesn't exist"
                    Procedure_Return
                End
                Runprogram Shell Background sFileName
            End_Procedure
        End_Object

    End_Object

    Object oReadButton is a Button
        Set Size to 14 50
        Set Location to 160 222
        Set Label to "Read"
        Set peAnchors to anBottomRight
        Set Default_State to True

        Procedure OnClick
            String sFileName
            Boolean bExists
            
            Get Value of oDriverXMLFileName_fm to sFileName
            Get vFilePathExists sFileName to bExists
            If (bExists = False) Begin
                Procedure_Return
            End

            Send ReadXMLDriverData sFileName
        End_Procedure

    End_Object

    Object oWriteButton is a Button
        Set Size to 14 50
        Set Location to 160 275
        Set Label to "Write"
        Set peAnchors to anBottomRight

        Procedure OnClick
            tColumnType[] aColumnType
            String sFileName sDriverXMLFile 
            Boolean bExists          
            
            Get paColumnType to aColumnType
            If (SizeOfArray(aColumnType) = 0) Begin
                Send Info_Box "You need to read an XML driver file successfully first."
                Procedure_Return
            End
            
            Get Value of oDriverXMLFileName_fm to sDriverXMLFile
            Get Value of oOutputFilename_fm to sFileName
            If (sFileName = "") Begin
                Send Info_Box "You need to specify an output file name first."
                Procedure_Return
            End
            
            Send WriteXMLDriverTypeData sFileName sDriverXMLFile aColumnType
        End_Procedure

    End_Object

    Object oCloseButton is a Button
        Set Size to 14 50
        Set Location to 160 328
        Set Label to "Exit"
        Set peAnchors to anBottomRight

        Procedure OnClick
            Send Exit_Application
        End_Procedure
    End_Object

    Procedure ReadXMLDriverData String sFileName
        DateTime dtExecStart dtExecEnd
        TimeSpan tsTotalTime
        Handle hoXML hoRoot hoList hoBeginAfter hoName hoNextSibling
        Integer iItems i iCount
        Boolean bOK bExists
        String  sNamespace sValue sError
        Variant vRoot vChild vList vBeginAfter vName vNextSibling
        tColumnType[] aColumnType

        Move (CurrentDateTime()) to dtExecStart
        Set paColumnType to aColumnType

        Get Create (RefClass(cComChilkatXml)) to hoXML
        If (not(IsComObjectCreated(hoXml))) Begin
            Send CreateComObject of hoXml
        End

        Get ComLoadXmlFile of hoXml sFileName to bOK
        If (bOK <> True) Begin
            Get ComLastErrorText of hoXML to sError
            Send Info_Box ("Sorry, couldn't load the XML file. Error:\n" + sError)
            Procedure_Return
        End

        Get ComGetSelf of hoXML to vBeginAfter
        If (IsComObject(vBeginAfter)) Begin
            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
            Set pvComObject of hoBeginAfter to vBeginAfter
        End

        Get ComSearchForContent of hoXML vBeginAfter "name" "df_field_native_type" to vName
        If (IsComObject(vName)) Begin
            Get Create (RefClass(cComChilkatXml)) to hoName
            Set pvComObject of hoName to vName
        End
        If (IsNullComObject(vName)) Begin
            Send Info_Box 'The tag "df_field_native_type" not found. It is needed to enumerate data types.'
            Procedure_Return
        End
        
        // Get the parent object, from where we can continue searching:
        Get ComGetParent of hoName to vRoot
        If (IsComObject(vRoot)) Begin
            Get Create (RefClass(cComChilkatXml)) to hoRoot
            Set pvComObject of hoRoot to vRoot
        End
        
        // Set baseline at parent level:
        Get ComGetSelf of hoRoot to vBeginAfter
        If (IsComObject(vBeginAfter)) Begin
            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
            Set pvComObject of hoBeginAfter to vBeginAfter
        End

        //  Navigate to the enumValues node:
        Get ComSearchForTag of hoRoot vBeginAfter "enumValues" to vList
        If (IsComObject(vList)) Begin
            Get Create (RefClass(cComChilkatXml)) to hoList
            Set pvComObject of hoList to vList
        End
        
        // Set baseline at enum values start object:
        Get ComGetSelf of hoList to vBeginAfter
        If (IsComObject(vBeginAfter)) Begin
            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
            Set pvComObject of hoBeginAfter to vBeginAfter
        End
        
        // Find the first "enumValue" enumeration:
        Get ComNumChildren of hoList to iItems
        Get ComSearchForTag2 of hoList vBeginAfter "enumValue" to bExists
        If (bExists = False) Begin
            Send Info_Box 'No "enumValue" found (!). Nothing to enumerate.'
            Procedure_Return
        End

        Decrement iItems
        For iCount from 0 to iItems
            Send CollectDriverAttributes hoList

            Get ComNextSibling of hoList to vNextSibling
            If (IsComObject(vNextSibling)) Begin
                Get Create (RefClass(cComChilkatXml)) to hoNextSibling
                Set pvComObject of hoNextSibling to vNextSibling
            End
            Send Destroy of hoList
            Move hoNextSibling to hoList
        Loop

        Send Destroy of hoRoot
        Send Destroy of hoXML

        Move (CurrentDateTime()) to dtExecEnd
        Move (dtExecEnd - dtExecStart) to tsTotalTime
        Send Info_Box ("Ready! Total Time:" * String(tsTotalTime))
    End_Procedure

    Procedure CollectDriverAttributes Handle hoDriverAttribute
        tColumnType ColumnType
        tColumnType[] aColumnType
        Handle hoChild
        Variant vChild

        // If the value was a cDataSection it will be properly translated back
        // to normal text for us.
        Move True                                                   to ColumnType.bNativeDataType
        Get ComGetChildContent of hoDriverAttribute "name"          to ColumnType.sSQLType
        Get ComGetChildContent of hoDriverAttribute "id"            to ColumnType.iSQLType

        Get ComGetChildWithTag of hoDriverAttribute "nativeTypeData" to vChild
        If (IsComObject(vChild)) Begin
            Get Create (RefClass(cComChilkatXml)) to hoChild
            Set pvComObject of hoChild to vChild
            Get ComGetChildContent of hoChild       "canEditSize"   to ColumnType.bCanEditSize
            
            // Some data types does not have a iDefaultSize, Min or Max size.
            // Then denote "not defined" by a "-1":
            Get ComGetChildContent of hoChild       "defaultSize"   to ColumnType.iDefaultSize
            If (ColumnType.iDefaultSize = 0) Begin
                Move    -1                                          to ColumnType.iDefaultSize
            End
            Get ComGetChildContent of hoChild       "minSize"       to ColumnType.iMinSize
            If (ColumnType.iMinSize = 0) Begin
                Move        -1                                      to ColumnType.iMinSize
            End
            Get ComGetChildContent of hoChild       "maxSize"       to ColumnType.nMaxSize
            If (ColumnType.nMaxSize = 0) Begin
                Move        -1                                      to ColumnType.nMaxSize
            End
            Send Destroy           of hoChild
        End

        Get paColumnType to aColumnType
        Move ColumnType to aColumnType[SizeOfArray(aColumnType)]
        // paColumnType is a Panel array struct property
        Set paColumnType to aColumnType
    End_Procedure  
    
    Function MakeStringLength String sValue Integer iReportColumnPos Returns String
        Move (Pad(sValue, (Length(sValue) + (iReportColumnPos - Length(sValue))))) to sValue

        Function_Return sValue
    End_Function

    Procedure WriteXMLDriverTypeData String sFileName String sDriverXMLFile tColumnType[] aColumnType
        Integer iSize iCount iCh iDbType iDataFlexType
        String sSpace sDriverID sDataFlexType sValue
        DateTime dtExecStart dtExecEnd
        
        Get Seq_Open_Output_Channel sFileName to iCh
        If (iCh = DF_SEQ_CHANNEL_ERROR) Begin
            Send Info_Box "Could not get a free output channel number."
            Procedure_Return
        End                 
        
        Move (CurrentDateTime()) to dtExecStart
        Get SelectedDbType of oDbType_cf   to iDbType
        Get Value          of oDriverID_cf to sDriverID
        Writeln channel iCh "/" "/ Generated By The Database Update Framework"
        Writeln channel iCh "/" "/ Driver XML File: " sDriverXMLFile
        Writeln channel iCh "/" "/ Driver COLUMN DATA TYPES"
        Writeln channel iCh "/" "/"
        Writeln channel iCh "/" "/ Created: " (String(dtExecStart))
        Writeln channel iCh
        Move "            " to sSpace
        
        Move (SizeOfArray(aColumnType)) to iSize
        Decrement iSize
        For iCount from 0 to iSize                    
            Get UtilSqlColumnTypeToDataFlexType of ghoDbUpdateFunctionLibrary sDriverID iDbType aColumnType[iCount].iSQLType aColumnType[iCount].iDefaultSize to iDataFlexType 
            Get UtilDataFlexDataTypeToString    of ghoDbUpdateFunctionLibrary iDataFlexType to sDataFlexType
            
            If (Lowercase(aColumnType[iCount].sSQLType) <> "unknown type") Begin
                // sSQLType:
                Move ('Move "' + String(aColumnType[iCount].sSQLType) + '"') to sValue
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].sSQLType'                                     
                // iSQLType:
                Move ('Move' * String(aColumnType[iCount].iSQLType)) to sValue
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].iSQLType'
                // bCanEditSize:
                Move ('Move' * (If(aColumnType[iCount].bCanEditSize = True, 'True', 'False'))) to sValue
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].bCanEditSize'
                // bNativeDataType:
                Move ('Move' * (If(aColumnType[iCount].bNativeDataType = True, 'True', 'False'))) to sValue
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].bNativeDataType' 
                // iDefaultSize:
                Move ('Move' * String(aColumnType[iCount].iDefaultSize)) to sValue 
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDefaultSize'
                // iMinSize:
                Move ('Move' * String(aColumnType[iCount].iMinSize)) to sValue 
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].iMinSize'
                // iMaxSize:
                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].nMaxSize'
                // sDataFlexType:
                Move ('Move "' + String(sDataFlexType) + '"') to sValue    
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].sDataFlexType'
                // iDataFlexType:
                Move ('Move' * String(sDataFlexType)) to sValue    
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDataFlexType'
                // sPrecision:
                // ToDo: Should this be .DefaultSize or .nMaxSize? ...Or removed !
                // Maybe change the struct?
                If (iDataFlexType = DF_DATE) Begin
                    Move  6 to aColumnType[iCount].nMaxSize
                End
                If (Lowercase(aColumnType[iCount].sSQLType) = "datetime" or Lowercase(aColumnType[iCount].sSQLType) = "datetime2") Begin
                    Move 23 to aColumnType[iCount].nMaxSize
                End                                           
                If (aColumnType[iCount].nMaxSize = 0) Begin
                    Move  1 to aColumnType[iCount].nMaxSize
                End
                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
                Get MakeStringLength sValue 45 to sValue
                Writeln channel iCh sSpace sValue 'to aColumnType[i].sPrecision'

                Writeln channel iCh sSpace 'Increment i'
                Writeln channel iCh
            End
        Loop

        Send Seq_Close_Channel iCh
        Send Info_Box "Ready!"    
    End_Procedure
    
    Send OnStartUp of oDriverXMLFileName_fm
    
    On_Key Key_Ctrl+Key_R Send KeyAction of oReadButton
    On_Key Key_Ctrl+Key_W Send KeyAction of oWriteButton
End_Object

Start_UI oMainPanel
