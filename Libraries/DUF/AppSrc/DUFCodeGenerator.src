Use DFAllEnt.pkg
Use cCJStandardCommandBarSystem.pkg
Use cCJCommandBarSystem.pkg
Use Dferror.pkg
Use Colr_dlg.pkg
Use Cursor.pkg
Use cDbUpdateHandler.pkg
Use vWin32fh.pkg

Object oHtmlHelp is a cHtmlHelp
    Set pbAlwaysOnTop to False
End_Object

Define CS_PropertiesKeyWord     for "Properties"
Define CS_ThemeKeyWord          for "Theme"

Object oApplication is a cApplication
    Set psCompany to "RDC Tools International"
    Set psProduct to "DUF - Code Generator"
    Set peHelpType to htHtmlHelp
    // Note: The help file settings gets changed by the Help toolbar button(s).
    Set psHelpFile to "Developer5.chm"

    Property Handle phoDbUpdateHandler 0
    Property Handle phoTableDUFCodeGenerator_vw 0
    Property String private.psFilelistFromOrg ""
    Property String psFilelistFrom ""
    Property Integer[] piaDifferences
    Property String psOrgOpenPath ""

    Property String psCompileDateAndTime
    // This is used by the About object to display the compile date & time:
    Include_Resource CompileHeader.h as res_CompileHeader type DF_RESOURCE_TYPE_LINE
    
    Function psWorkspaceHomePath Returns String
        String sPath 
        Get psHome of (phoWorkspace(Self)) to sPath
        Function_Return sPath
    End_Function

    // Set psOrgOpenPath at startup
    Procedure Save_DF_OPEN_PATH
        String sOrgOpenPath sDataPath sFileListPath
        
        Get psFileList of (phoWorkspace(ghoApplication)) to sFileListPath
        Set private.psFilelistFromOrg to sFileListPath
        Get_Attribute DF_OPEN_PATH to sOrgOpenPath
        // First remove the current Data folder path
        Get PathAtIndex of (phoWorkspace(Self)) sOrgOpenPath 1 to sDataPath
        Move (Replace(sDataPath, sOrgOpenPath, "")) to sOrgOpenPath
        If (Left(sOrgOpenPath, 2) = "\;") Begin
            Move (Replace("\;", sOrgOpenPath, "")) to sOrgOpenPath
        End
        Set psOrgOpenPath to sOrgOpenPath
    End_Procedure

    Procedure OnWorkspaceOpened
        Forward Send OnWorkspaceOpened
        Send Save_DF_OPEN_PATH
    End_Procedure

    Procedure Restore_DF_OPEN_PATH
        String sOrgOpenpath
        Get psOrgOpenPath to sOrgOpenpath
        Set_Attribute DF_OPEN_PATH to sOrgOpenPath
    End_Procedure

    Procedure ResetFilelistPathing
        String sDriverID sServer sFileList sDataPath
        Send Restore_DF_OPEN_PATH
        Close DF_ALL DF_PERMANENT
        Get psDriverID of ghoDbUpdateFunctionLibrary to sDriverID
        Get psServer   of ghoDbUpdateFunctionLibrary to sServer  
        If (sDriverID <> "") Begin
            Logout sDriverID sServer
        End
        Set psDriverID of ghoDbUpdateFunctionLibrary to DATAFLEX_ID
        Set psServer   of ghoDbUpdateFunctionLibrary to ""
        Get private.psFilelistFromOrg to sFileList
        Get ParseFolderName sFileList                      to sDataPath
        If (Right(sDataPath, 1) = "\") Begin
            Move (Left(sDataPath, (Length(sDataPath) -1))) to sDataPath
        End
        Set psDataPath of (phoWorkspace(Self))  to sDataPath
        Set psFileList of (phoWorkspace(Self))  to sFileList
        Set_Attribute DF_FILELIST_NAME          to sFileList
    End_Procedure

    Function ChangeFilelistPathing String sFileList Returns Boolean
        String sPath sSQLConnectionsIniName sDataPath sDriverID sServer sOrgOpenPath
        Boolean bExists bEmbedded bIsSQLDriver bErr
        Handle hoDbUpdateHandler hoSQLConnectionHandler hoSQLConnectionIniFile
        tSQLConnection SQLConnection
        Integer iRetval iDriverID

        Move False to Err
        Move (Trim(sFileList)) to sFileList
        Get vFilePathExists sFileList to bExists
        If (bExists = False) Begin
            Send Info_Box "Can't find Filelist.cfg"
            Function_Return False
        End

        Send Cursor_Wait of Cursor_Control
        Get psDriverID of ghoDbUpdateFunctionLibrary to sDriverID
        Get psServer   of ghoDbUpdateFunctionLibrary to sServer
        Send Restore_DF_OPEN_PATH
        Close DF_ALL DF_PERMANENT
        Logout sDriverID sServer

        Get ParseFolderName sFileList                      to sDataPath
        If (Right(sDataPath, 1) = "\") Begin
            Move (Left(sDataPath, (Length(sDataPath) -1))) to sDataPath
        End
        Set psDataPath of (phoWorkspace(Self))  to sDataPath
        Set psFileList of (phoWorkspace(Self))  to sFileList

        // Temporarily "redirect" the Open path to the current Data folder
        Get psOrgOpenPath to sOrgOpenPath
        Set_Attribute DF_OPEN_PATH to (sDataPath + ";" + sOrgOpenPath)
        Set_Attribute DF_FILELIST_NAME to sFileList
        Get UtilIsAnyFilelistEntrySQLtable of ghoDbUpdateFunctionLibrary to sDriverID
        Get IsSQLDriver of ghoDbUpdateFunctionLibrary sDriverID to bIsSQLDriver
        
        // If none of the tables in the Filelist.cfg are SQL, we're done. Let's get out of here!
        If (bIsSQLDriver = False) Begin
            Send Cursor_Ready of Cursor_Control
            Function_Return True
        End

        // Note: We delete all cache files (*.cch) before attempting to open any
        // tables as a precausion, in case a table has been changed at the SQL back-end,
        // because then the .cch file is out-of-sync with the SQL table.
        Get DriverIndex of ghoDbUpdateFunctionLibrary sDriverID to iDriverID
        Move Err to bErr 
        Send Ignore_Error of Error_Object_Id DFERR_OPERATION_NOT_ALLOWED
        Get_Attribute DF_DRIVER_CACHE_PATH of iDriverID to sPath
        If (sPath = "") Begin 
            If (LastErr = DFERR_OPERATION_NOT_ALLOWED and bErr = False) Begin
                Move False to Err
            End
            Move sDataPath to sPath
        End
        Get vFolderFormat sPath to sPath
        Get vDeleteFile (sPath + "*.cch") to iRetval

        // Try to make a database connection by reading the SQLConnections.ini file:
        Get vFolderFormat sDataPath to sPath
        Get vParentPath sDataPath   to sPath
        Get vFolderFormat sPath     to sPath
        Move (sPath + "Programs")   to sPath
        Get vFolderFormat sPath     to sPath
        Move CS_SQLIniFileName to sSQLConnectionsIniName
        Get vFilePathExists (sPath + sSQLConnectionsIniName) to bExists
        If (bExists = False) Begin
            Get UtilIsAllFilelistEntriesDataFlexTables of ghoDbUpdateFunctionLibrary to bEmbedded
            If (bEmbedded = False) Begin
                Send Cursor_Ready of Cursor_Control
                Get YesNo_Box ("Couldn't find the DUF SQLConnections.ini file in the workspace Programs folder. Is there a DataFlex DFConnId.ini file in the Data folder that you want to open instead?") to iRetval
                If (iRetval = MBR_Yes) Begin
                    Send Cursor_Wait of Cursor_Control
                    Move "DFConnId.ini" to sSQLConnectionsIniName
                    Send UnRegisterAllConnections of ghoConnection
                    Get AddAllConnections of ghoConnection to bExists
                    Set psIniFileName of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) to sSQLConnectionsIniName
                    Set psIniFilePath of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) to sPath
                    Get SetupSQLConnection of ghoSQLConnectionHandler True False to SQLConnection
                End
            End
        End
        Else Begin
            Get phoDbUpdateHandler to hoDbUpdateHandler
            Get phoSQLConnectionHandler of hoDbUpdateHandler to hoSQLConnectionHandler
            Get phoSQLConnectionIniFile of hoSQLConnectionHandler to hoSQLConnectionIniFile
            Set psIniFilePath of hoSQLConnectionIniFile to sPath
            Set psIniFileName of hoSQLConnectionIniFile to sSQLConnectionsIniName

            Get SetupSQLConnection of hoSQLConnectionHandler True True to SQLConnection
            Set pSQLConnection     of hoSQLConnectionHandler to SQLConnection
        End

        Send Cursor_Ready of Cursor_Control
        Function_Return (Err = False)
    End_Function

    Object oConnection is a cConnection
        Use LoginEncryption.pkg
        Use DatabaseLoginDialog.dg
    End_Object

    Procedure End_Construct_Object
        String sCompileTime  
        Integer iPos
        
        Forward Send End_Construct_Object
        Direct_Input "resource: res_CompileHeader"
        Readln sCompileTime
        Move (Pos('"', sCompileTime)) to iPos
        If (iPos <> 0) Begin
            Move (Mid(sCompileTime, Length(sCompileTime), (iPos + 1))) to sCompileTime
            Move (Replaces('"', sCompileTime, '')) to sCompileTime
            Set psCompileDateAndTime to sCompileTime
        End
        Close_Input
    End_Procedure

End_Object

Object oToolTipController is a cToolTipController
    Move Self to ghoToolTipController
    Set pbBalloonStyle to False
    Set piIcon to TTI_INFO
    Set psTitle to "Information"
    Set piMaxWidth to 400
    Set piDurationPopup to 14000    // 14 seconds, needed for long tooltips.
End_Object

Use oEditContextMenu.pkg
Use oDEOEditContextMenu17.pkg

Object oMain is a Panel
    Set Label to (psProduct(ghoApplication))
    Set Location to 4 3
    Set Size to 350 602
    Set piMinSize to 400 515
    Set Icon to "DUFUpdateCodeGenerator1.ico"

    Object oCommandBarSystem is a cCJCommandBarSystem
        Set pbTimerUpdate to True
        Set pbAutoResizeIcons to True
        Set pbTabbedWorkspaces to True
        Set peVisualTheme to xtpThemeOffice2013Publisher
        Set pbLargeIcons to True

        Procedure OnCreateCommandBars
            Integer eTheme
            Forward Send OnCreateCommandBars

            Get ReadInteger of ghoApplication CS_PropertiesKeyWord CS_ThemeKeyWord xtpThemeOffice2013Publisher to eTheme
            Send SetTheTheme eTheme
            Send DisplayTabWorkspace
        End_Procedure

        Procedure DisplayTabWorkspace
            Variant vTab vPaintManager
            Handle hoTab hoPaintManager hoOptions
            Integer iSize

            If (not(IsComObjectCreated(Self))) Begin
                Procedure_Return
            End

            Get OptionsObject to hoOptions

            // Create the tab workspace object. It will get created for the Client_Area so
            // each view will be displayd on a separate tab-page (instead of the standard VDF MDI-interface)
            Get Create (RefClass(cCJTabWorkspace)) to hoTab
            Get ComShowTabWorkspace True to vTab
            // Connect the CodeJock side to the DataFlex proxy object.
            Set pvComObject  of hoTab to vTab

            // We don't allow to close tabs as we have no menu system.
            Set ComFlags of hoTab to xtpWorkspaceHideAll //xtpWorkspaceHideClose //xtpWorkspaceShowCloseTab
            Send ComEnableGroups of hoTab

            // Create a paint manager object that is needed to set some
            // of the tab-workspace properties.
            Get Create (RefClass(cCJTabPaintManager)) to hoPaintManager
            Get ComPaintManager of hoTab          to vPaintManager
            Set pvComObject     of hoPaintManager to vPaintManager

            // Sets the tab-pages to display on the left side, instead of at the top:
            Set ComPosition     of hoPaintManager to xtpTabPositionLeft

            // This will truncate the middle part of long items
            Set ComDrawTextPathEllipsis of hoPaintManager to True
            Set ComLayout               of hoPaintManager to xtpTabLayoutMultiRow

            Move 32 to iSize
            Send ComSetIconSize     of hoOptions False iSize iSize  // Set icon size for Toolbar buttons.
            Get Create (RefClass(cCJPaintManager)) to hoPaintManager
            Get ComPaintManager of hoPaintManager  to vPaintManager
            Set pvComObject     of hoPaintManager  to vPaintManager
            Set ComAutoResizeIcons of hoPaintManager to True
            Send Destroy of hoPaintManager
            Send ComRecalcLayout
            Send Destroy of hoTab
        End_Procedure

        Procedure OnCreateTabbedWorkspace Handle hoTabWorkspace Handle hoTabPaintManager
            // This will truncate the middle part of long text items
            Set ComDrawTextPathEllipsis of hoTabPaintManager to True
            Set ComFlags of hoTabWorkspace to xtpWorkspaceHideAll //xtpWorkspaceHideClose //xtpWorkspaceShowCloseTab
        End_Procedure

        Procedure SetTheTheme Integer eTheme
            Integer iColor
            Set peVisualTheme of ghoCommandBars to eTheme
            Send ComRecalcLayout of ghoCommandBars
            Get ComGetSpecialColor of ghoCommandBars XPCOLOR_TOOLBAR_FACE to iColor
            Broadcast Recursive Set Color of (Client_Id(phoMainPanel(ghoApplication))) to iColor
        End_Procedure

        Object oActions_Toolbar is a cCJToolbar
            Set pbCloseable to False
            Set pbCustomizable to False
            Set pbShowExpandButton to False
            Set psTitle to "Actions"

            Object oCodeGenerator_MenuItem is a cCJMenuItem
                Set psCaption to "Code &Generator"
                Set psImage to "SqlScript1.ico"
                Set peControlStyle to xtpButtonIconAndCaption
                Procedure OnExecute Variant vCommandBarControl
                    Forward Send OnExecute vCommandBarControl
                    Set pbChecked to True
                    Set pbChecked of (oCompareDatabases_MenuItem(ghoCommandBars)) to False
                    Send Activate_oTableDUFCodeGenerator of (Client_Id(phoMainPanel(ghoApplication)))
                End_Procedure
            End_Object

            Object oCompareDatabases_MenuItem is a cCJMenuItem
                Set psCaption to "Compare &Databases"
                Set psImage to "DbCompare1.ico"
                Set peControlStyle to xtpButtonIconAndCaption
                Set pbChecked to True

                Procedure OnExecute Variant vCommandBarControl  
                    Forward Send OnExecute vCommandBarControl
                    Set pbChecked to True
                    Set pbChecked of (oCodeGenerator_MenuItem(ghoCommandBars)) to False
                    Send Activate_oCompareDatabases_vw of (Client_Id(phoMainPanel(ghoApplication)))
                End_Procedure
            End_Object

        End_Object

        // This is needed to get the "Key_Shift+Key_Tab" key combination to activate
        // the previous tab workspace view.

        Object oEditToolBar is a cCJToolbar
            Set psTitle to "Edit Toolbar"
            Set pbCloseable to False
            Set pbCustomizable to False
            Set pbShowExpandButton to False

            Object oCutToolbarItem is a cCJCutMenuItem
                Set psImage to "ActionCut1.ico"
            End_Object

            Object oCopyToolbarItem is a cCJCopyMenuItem
                Set psImage to "ActionCopy1.ico"

            End_Object

            Object oPasteToolbarItem is a cCJPasteMenuItem
                Set psImage to "ActionPaste1.ico"
            End_Object

//            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
//                Set psImage to "ActionDelete1.ico"
//                Set pbControlBeginGroup to True
//            End_Object

            Object oPromptToolItem is a cCJPromptMenuItem
                Set psImage to "ActionPrompt1.ico"
                Set pbControlBeginGroup to True
            End_Object

            Object oClearToolItem is a cCJClearMenuItem
                Set peControlStyle to xtpButtonIconAndCaption
                Set psCaption      to "Clear/Add"
                Set pbControlBeginGroup to True
                Set psImage to "ActionClear1.ico"  
                
                Function IsEnabled Returns Boolean
                    Function_Return True
                End_Function

            End_Object

            Object oOpenContainingFolder_MenuItem is a cCJMenuItem
                Set psImage to "ActionOpenContainingFolder1.ico"
                Set psCaption to "Containing Folder"
                Set psToolTip to "Open containing folder"
                Set psDescription to "Open Containing Folder"
                Set pbActiveUpdate to True
                Set pbControlBeginGroup to True

                Procedure OnExecute Variant vCommandBarControl
                    String sPath sFile       
                    Boolean bExists

                    Forward Send OnExecute vCommandBarControl
                    Get psFilelistFrom of ghoApplication to sFile
                    Get ParseFolderName sFile to sPath
                    Get vFilePathExists sFile to bExists
                    // We want to have that file to be selected in Windows Explorer;
                    If (bExists = True) Begin
                        Move ("/select, " + sFile) to sPath
                    End
                    Send vShellExecute "open" "explorer.exe" sPath ""
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sFile
                    Boolean bExists
                    Get psFilelistFrom of ghoApplication to sFile
                    Get vFilePathExists sFile to bExists
                    Function_Return (bExists = True)
                End_Function

            End_Object

            Object oCompareToolItem is a cCJMenuItem
//                Set peControlStyle to xtpButtonIconAndCaption
//                Set psCaption to "&Connection" 
                Set psToolTip to "Show SQL Settings dialog"
                Set psImage to "SQLSettings1.ico"
                Set piShortCutKey to xtpKey_Alt VK_S
                Set pbControlBeginGroup to True
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    tSQLConnection Connection
                    String sFileListFrom sCurrentFilelist
                    Handle hoFocus
                    Boolean bExists bOK

                    Move (Focus(Desktop)) to hoFocus

                    // First change the "current" filelist depending on which
                    // Filelist form is active.
                    Get Value of hoFocus to sCurrentFilelist
                    Get vFilePathExists sCurrentFilelist to bExists
                    Get psFilelistFrom of ghoApplication to sFileListFrom
                    If (sFileListFrom = "") Begin 
                        Send Info_Box "You need to select a Filelist.cfg file with SQL tables first."
                        Procedure_Return
                    End
                    If (bExists = True and sCurrentFilelist <> "") Begin
                        Get ChangeFilelistPathing of ghoApplication sCurrentFilelist to bOK
                        Get psFilelistFrom of ghoApplication to sFileListFrom
                    End

                    If (sFileListFrom <> "") Begin
                        Get pSQLConnection of ghoSQLConnectionHandler to Connection
                    End

                    Send Activate_ReadOnlySQLMaintainConnections_dg of (Client_Id(ghoCommandBars)) Connection
                End_Procedure  
                
                Function IsEnabled Returns Boolean
                    tSQLConnection Connection
                    Get pSQLConnection of ghoSQLConnectionHandler to Connection
                    Function_Return (Connection.sDriverID <> DATAFLEX_ID and Connection.sDriverID <> "")
                End_Function

            End_Object

            Object oAddToStudio_MenuItem is a cCJMenuItem
                Set psCaption to "Add to Studio"
                Set psDescription to "Add to Studio"
                Set psToolTip to "Add this tool to the DataFlex Studio's 'Tools' menu"
                Set psImage to "ActionAddStudio1.ico"
                Set pbControlBeginGroup to True   
                
                Procedure OnExecute Variant vCommandBarControl
                    Forward Send OnExecute vCommandBarControl
                    Send Popup of (oAddToStudio_dg(Client_Id(phoMainPanel(ghoApplication))))
                End_Procedure
                
            End_Object

//            Object oCaptureViewMenuItem is a cCJMenuItem
//                Set psCaption to "E&ditor Settings"
//                Set psToolTip to "Editor"
//                Set psDescription to "Editor Settings (Alt+D)"
//
//                Set psCaption to "Take shapshot"
//                Set psToolTip to "Take shapshot"
//                Set psDescription to "Take a snapshot image of the current view/panel. (F10)"
//                Set psImage to "Camera1.ico"
//                
//                Procedure OnExecute Variant vCommandBarControl
//                    Send TakeSnapshot False
//                End_Procedure
//
//                Function IsEnabled Returns Boolean
//                    Function_Return
//                End_Function   
//            End_Object

//            Use DatabaseSelection.pkg
//    
//            Object oThemeItem is a cCJMenuItem
//                Set peControlType to xtpControlComboBox
//                Set psToolTip to "Theme"
//                Set psCaption to "Theme:"
//                Set psDescription to "Select a theme from the drop down list"
//                Set pbControlBeginGroup to True
//                Set pbVisible to False
//
//                Procedure OnCreateControl Handle hoObj
//                    Integer iItem eTheme
//                    Set ComWidth of hoObj to 250
//                    Send FillComboList hoObj
//                    Get peVisualTheme to eTheme
//                    Get FindDataItem hoObj eTheme to iItem
//                    Set ComListIndex of hoObj to (If(iItem, iItem, 1))
//                End_Procedure
//
//                Function FindDataItem Handle hoCombo Integer eVal Returns Integer
//                    Integer iCount i eTheme
//                    Get ComListCount of hoCombo to iCount
//                    For i from 1 to iCount
//                        Get ComItemData of hoCombo i to eTheme
//                        If (eTheme = eVal) Begin
//                            Send SetTheTheme eTheme
//                            Function_Return i
//                        End
//                    Loop
//                    Function_Return 0
//                End_Function
//
//                Procedure AddTheme Handle hoCombo String sText Integer eTheme
//                    Integer iCount
//                    Get ComListCount of hoCombo to iCount
//                    Increment iCount
//                    Send ComAddItem  of hoCombo sText iCount
//                    Set ComItemData  of hoCombo iCount to  eTheme
//                End_Procedure
//
//                Procedure FillComboList Handle hoCombo
//                    Send ComClear     of hoCombo
//
//                    Send AddTheme hoCombo "xtpThemeOffice2016Access" xtpThemeOffice2016Access
//                    Send AddTheme hoCombo "xtpThemeOffice2016Excel" xtpThemeOffice2016Excel
//                    Send AddTheme hoCombo "xtpThemeOffice2016OneNote" xtpThemeOffice2016OneNote
//                    Send AddTheme hoCombo "xtpThemeOffice2016Outlook" xtpThemeOffice2016Outlook
//                    Send AddTheme hoCombo "xtpThemeOffice2016PowerPoint" xtpThemeOffice2016PowerPoint
//                    Send AddTheme hoCombo "xtpThemeOffice2016Publisher" xtpThemeOffice2016OneNote
//                    Send AddTheme hoCombo "xtpThemeOffice2016Word" xtpThemeOffice2016Word
//
//                    Send AddTheme hoCombo "xtpThemeOffice2013Word" xtpThemeOffice2013Word
//                    Send AddTheme hoCombo "xtpThemeOffice2013Outlook" xtpThemeOffice2013Outlook
//                    Send AddTheme hoCombo "xtpThemeOffice2013Excel" xtpThemeOffice2013Excel
//                    Send AddTheme hoCombo "xtpThemeOffice2013PowerPoint" xtpThemeOffice2013PowerPoint
//                    Send AddTheme hoCombo "xtpThemeOffice2013Publisher" xtpThemeOffice2013Publisher
//                    Send AddTheme hoCombo "xtpThemeOffice2013OneNote" xtpThemeOffice2013OneNote
//                    Send AddTheme hoCombo "xtpThemeOffice2013Access" xtpThemeOffice2013Access
//                    Send AddTheme hoCombo "xtpThemeOffice2003" xtpThemeOffice2003
//                    Send AddTheme hoCombo "xtpThemeOffice2000" xtpThemeOffice2000
//                    Send AddTheme hoCombo "xtpThemeOfficeXP" xtpThemeOfficeXP
//
//                    Send AddTheme hoCombo "xtpThemeOffice2010Blue" xtpThemeOffice2010Blue
//                    Send AddTheme hoCombo "xtpThemeOffice2010Black" xtpThemeOffice2010Black
//                    Send AddTheme hoCombo "xtpThemeOffice2010Silver" xtpThemeOffice2010Silver
//
//                    Send AddTheme hoCombo "xtpThemeOffice2007Aqua" xtpThemeOffice2007Aqua
//                    Send AddTheme hoCombo "xtpThemeOffice2007Black" xtpThemeOffice2007Black
//                    Send AddTheme hoCombo "xtpThemeOffice2007Blue" xtpThemeOffice2007Blue
//                    Send AddTheme hoCombo "xtpThemeOffice2007Silver" xtpThemeOffice2007Silver
//
//                    Send AddTheme hoCombo "xtpThemeVisualStudio2015Blue" xtpThemeVisualStudio2015Blue
//                    Send AddTheme hoCombo "xtpThemeVisualStudio2015Light" xtpThemeVisualStudio2015Light
//                    Send AddTheme hoCombo "xtpThemeVisualStudio2015Dark" xtpThemeVisualStudio2015Dark
//
//                    Send AddTheme hoCombo "xtpThemeVisualStudio2012Light" xtpThemeVisualStudio2012Light
//                    Send AddTheme hoCombo "xtpThemeVisualStudio2012Dark" xtpThemeVisualStudio2012Dark
//
//                    Send AddTheme hoCombo "xtpThemeVisualStudio2008" xtpThemeVisualStudio2008
//                    Send AddTheme hoCombo "xtpThemeVisualStudio6" xtpThemeVisualStudio6
//
//                    Send AddTheme hoCombo "xtpThemeWindows7" xtpThemeWindows7
//
//                    Send AddTheme hoCombo "xtpThemeWhidbey" xtpThemeWhidbey
//
//                    Send AddTheme hoCombo "xtpThemeNativeWinXP" xtpThemeNativeWinXP
//                End_Procedure
//
//                Function CurrentTheme Handle vCommandBarControl Returns Integer
//                    Handle hMessage hoCombo
//                    Integer iIndex
//                    // create and bind  proxy control
//                    Get CreateProxyControl vCommandBarControl to hoCombo
//                    // get the current selection
//                    Get ComListIndex of hoCombo to iIndex
//                    // note the index selections are 1 based
//                    If (iIndex > 0) Begin
//                        // get the ItemData for the selected item and send that message
//                        Get ComItemData of hoCombo iIndex to hMessage
//                        Function_Return hMessage
//                    End
//                    // dispose of the proxy control
//                    Send Destroy of hoCombo 
//                    Function_Return 0
//                End_Function
//
//                Procedure OnExecute Variant vCommandBarControl
//                    Integer eTheme
//                    Integer iColor
//                    Get CurrentTheme vCommandBarControl to eTheme
//                    Set peVisualTheme of ghoCommandBars to eTheme
//                    Send ComRecalcLayout of ghoCommandBars
//                    Send WriteDword of ghoApplication CS_PropertiesKeyWord CS_ThemeKeyWord eTheme
//                    Get ComGetSpecialColor of ghoCommandBars XPCOLOR_TOOLBAR_FACE to iColor
//                    Broadcast Recursive Set Color of (Client_Id(phoMainPanel(ghoApplication))) to iColor
//                End_Procedure
//
//                Procedure SetTheTheme Integer eTheme
//                    Integer iColor
//                    Set peVisualTheme of ghoCommandBars to eTheme
//                    Send ComRecalcLayout of ghoCommandBars
//                    Get ComGetSpecialColor of ghoCommandBars XPCOLOR_TOOLBAR_FACE to iColor
//                    Broadcast Recursive Set Color of (Client_Id(phoMainPanel(ghoApplication))) to iColor
//                End_Procedure
//
//                Function ConvertSystemColor Integer iColor Returns Integer
//                    Integer iSysColor
//                    If (iColor = clDefault or iColor = clNone) Begin    // If default color then use -1
//                        Move clNone to iColor
//                    End
//                    Else If (iColor < 0) Begin    // If it is a system color (<0) then convert this into an RGB value
//                        Move (iColor iand |CI$7FFFFFFF) to iSysColor    // extract the system color constant
//                        Move (GetSysColor(iSysColor)) to iColor
//                    End
//                    Function_Return iColor
//                End_Function
//
//                Procedure OnCreateAction
//                    Integer eTheme
//                    Forward Send OnCreateAction
//                    Get peVisualTheme of ghoCommandBars to eTheme
//                    Get ReadDword of ghoApplication CS_PropertiesKeyWord CS_ThemeKeyWord eTheme to eTheme
//                    Set peVisualTheme to eTheme
//                End_Procedure
//
//            End_Object

//            Object oColorSelection_TextItem is a cCJMenuItem
//                Set peControlType to xtpControlLabel
//                Set pbControlBeginGroup to True
//                Set psCaption to "Hotspot Color:"
//            End_Object
//
//            Object oColorSelection_Item is a cCJMenuItem
//                Set psImage to "ColorSelectorBlack1.ico"
//
//                Object oColorDialog is a ColorDialog
//                    Function SelectColor Returns Integer
//                        Integer iRgbColor
//                        Boolean bColorSelected
//
//                        Move -1 to iRgbColor
//                        Get Show_Dialog to bColorSelected
//                        If (bColorSelected) Begin
//                            Get SelectedColor to iRgbColor
//                        End
//
//                        Function_Return iRgbColor
//                    End_Function
//                End_Object
//
//                Procedure OnExecute Variant vCommandBarControl
//                    Integer iColor
//                    Forward Send OnExecute vCommandBarControl
//                    Get SelectColor of oColorDialog to iColor
//                    If (iColor <> -1) Begin
//                        Broadcast Recursive Set piHeaderHotspotColor of (Client_Id(phoMainPanel(ghoApplication))) to iColor
//                    End
//                End_Procedure
//
//            End_Object

            Object oAbout_MenuItem is a cCJMenuItem
                Set psCaption to "About"
                Set psToolTip to "About Info"
                Set psDescription to "About the program"
                Set psImage to "ActionAbout1.ico"
                Set pbControlBeginGroup to True
                Procedure OnExecute Variant vCommandBarControl
                    Forward Send OnExecute vCommandBarControl
                    Send Activate_About of (Client_Id(ghoCommandBars))
                End_Procedure
            End_Object

            Object oHelpMenuItem is a cCJHelpMenuItem
                Set peControlType to xtpControlSplitButtonPopup
                Set psImage to "ActionHelp1.ico"

                Procedure OnExecute Variant vCommandBarControl
                    Send ShowProgramHelp
                End_Procedure

                Object oHelpMenuItemLocal is a cCJMenuItem
                    Set psCaption to "Local HTML Help"
                    Set psImage to "ActionHelp1.ico"
                    Procedure OnExecute Variant vCommandBarControl
                        Send ShowProgramHelp
                    End_Procedure
                End_Object

                Object oHelpMenuItemInternetBrowser is a cCJMenuItem
                    Set psCaption to "Online HTML Help"
                    Set psImage to "ActionHelpInternet1.ico"
                    Procedure OnExecute Variant vCommandBarControl
                        Runprogram Shell Background "http://www.rdctools.com/HTMLHelpDUF/Developer5.htm"
                    End_Procedure

                End_Object

                Object oCheckforUpdatesMenuItem is a cCJMenuItem
                    Set psCaption to "Check for Updates"
                    Set psDescription to "Check for Updates..."
                    Set psImage to "InternetUpdate1.ico"
                    Set pbControlBeginGroup to True
                    
                    Procedure OnExecute Variant vCommandBarControl
                        String sPath sUpdateProgram sParam
                        Get psProgramPath of (phoWorkspace(ghoApplication)) to sPath
                        Get vFolderFormat sPath to sPath
                        Move "updater.exe" to sUpdateProgram
                        Move "/checknow"   to sParam
                        Runprogram Shell Wait ('"' + sPath + sUpdateProgram + '"') sParam
                    End_Procedure
                
                End_Object
                
            End_Object

            Object oExitMenuItem is a cCJExitMenuItem
                Set psToolTip to "Exit application"
                Set psDescription to "Exit the program (Alt+F4)"
                Set psImage to "ActionExit1.ico"
                Set pbControlBeginGroup to True
            End_Object

        End_Object

        Object oPreviousTabAction is a cCJAction
            Set piShortCutKey to (xtpKey_Shift + xtpKey_Ctrl) VK_TAB
            Procedure OnExecute Variant vCommandBarControl
                Handle hoCommandBars hoClientArea
                Forward Send OnExecute vCommandBarControl
                Get CommandBarSystemObject to hoCommandBars
                Get ClientAreaObject of hoCommandBars to hoClientArea
                If hoClientArea Begin
                    Send Switch_Next_View of hoClientArea
                End
            End_Procedure
        End_Object

        Object oStatusBar is a cCJStatusBar

            Object oStatusPane1 is a cCJStatusBarPane
                Set piID to sbpIDIdlePane
                Set pbStyleStretch to True
            End_Object

            Object oStatusPane2 is a cCJStatusBarPane
                Set phoViewPane to Self
                Set pbStyleStretch to True
            End_Object

        End_Object

    End_Object

    Object oClientArea is a ClientArea
        Use ManageSQLConnections.dg
        Use AddToStudio.dg     
        Use ViewSourceCode.dg
        Use TableDUFCodeGenerator.vw   
        Use CompareDatabases.vw

        Use StdAbout.pkg
        Use CompareDatabases.rv
        Procedure Activate_About
            Send DoAbout "" "" ("Copyright 2016-2023" * psCompany(ghoApplication)) "Author: Nils Svedmyr" "DUFUpdateCodeGenerator64x64.bmp" "E-mail: mailto:support@rdctools.com" "Web-site: www.rdctools.com" ("This tool was created with DataFlex" * String(C_DFVersion) * "from Data Access Worldwide. Please visit http://www.dataaccess.com for a free personal copy of DataFlex.")
        End_Procedure

        On_Key Key_Ctrl+Key_Tab           Send Switch_Next_View
        On_Key Key_Ctrl+Key_Shift+Key_Tab Send Switch_Prior_View
    End_Object

    // Note that we have overriden the cHtmlHelp "GetHelpFile" function
    // in the oHtmlHelp object, so we need to explitetly send the message
    // to that object.
    Procedure ShowProgramHelp
        Set psHelpFile of ghoApplication to "Developer5.chm"
        Send DoDisplayKeyword of oHtmlHelp "DUF Code Generator"
    End_Procedure

    Procedure ActivateCompareView
        Send Execute of (oCompareDatabases_MenuItem(ghoCommandBars))
    End_Procedure

    Procedure ActivateGenerateView
        Send Execute of (oCodeGenerator_MenuItem(ghoCommandBars))
    End_Procedure

    On_Key Key_Alt+Key_D   Send ActivateCompareView
    On_Key Key_Ctrl+Key_D  Send ActivateCompareView
    On_Key Key_Alt+Key_G   Send ActivateGenerateView
    On_Key Key_Ctrl+Key_G  Send ActivateGenerateView    
    On_Key Key_F1          Send ShowProgramHelp
End_Object

Send Execute of (oCodeGenerator_MenuItem(ghoCommandBars))
Start_UI
