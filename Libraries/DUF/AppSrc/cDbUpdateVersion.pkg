//****************************************************************************
// $Module type: Class
// $Module name: cDbUpdateVersion
// $Author     : Nils G. Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2016-09-27 @ 09:33 (Military date format: YY-MM-DD)
//
// Description : Child class to cDbUpdateHandler.
//               Put an object of this class inside the global ghoDbUpdateHandler object.
//               Set the pnVersionNumber to a version number.
//               Inside the cDbUpdateVersion object put a "Use MyNewDbUpdatePackage.pkg"
//               Add one cVersion object for each update of the database to the ghoDbUpdateHandler object.
//               Place your code in the "OnUpdate" event that alters the database.
//
// $Rev History:
//    2016-09-27  Module header created
//****************************************************************************
Use UI
Use DUFLanguageConstants.inc
Use cDbUpdateFunctionLibrary.pkg
Use for_all.pkg // Handy to have available in the OnUpdate event.

#IFNDEF _struct_tDbVersionInfo
Struct tDbVersionInfo
    Number nVersionNumber
    Handle hObject
End_Struct
#ENDIF

{ OverrideProperty=peNeighborhood Visibility=Private }
{ OverrideProperty=Delegation_Mode Visibility=Private }
Class cDbUpdateVersion is a cObject

    Procedure Construct_Object    
        Boolean bOnCreateExecuted bUseCustomDbVersion
        String[] aSQLQueryMessages
        
        Forward Send Construct_Object

        // cDbUpdateHandler object event.
        Delegate Get Private.pbOnCreateExecuted to bOnCreateExecuted
        If (bOnCreateExecuted = False) Begin    
            Delegate Get pbUseCustomDbVersion to bUseCustomDbVersion
            If (bUseCustomDbVersion = False) Begin
                Delegate Send CheckAutoCreateDbVersionTable 
            End
            Delegate Send CheckIntFilesIntegrity
            Delegate Send OnCreate
            Delegate Set Private.pbOnCreateExecuted to True
        End

        { Visibility=Private }
        // Don't touch! It is used by class logic to indicate if the OnUpdate
        // event was triggered, thus an actual change of the database was made.
        Property Boolean pbVersionUpdate False

        // This property must be manually set within each cDbUpdateVersion object
        // by the programmer, to a consecutive number.
        {MethodType=Property Category="Database Update Version" InitialValue=True }
        Property Number pnVersionNumber

        {MethodType=Property Category="Convert to SQL" InitialValue=True }
        Property Boolean pbUseConnectionID True
        { Visibility=Private }
        Property Boolean private.pbToANSI   True
        { Visibility=Private }
        Property Boolean private.pbRecnum   True
        { Visibility=Private }
        Property Boolean private.pbCopyData True
        { Visibility=Private }
        Property Boolean private.pbApiTableUpdateAuto False
        { Visibility=Private }
        Property Boolean private.pbCompareDate_DateTime False
        { Visibility=Private }
        Property Boolean private.pbCompareIndexAscending False
        { Visibility=Private }
        Property Boolean private.pbCompareIndexUppercase False
        { Visibility=Private }
        Property String private.psSchema
        { Visibility=Private }
        Property String private.psBaseTableSpace
        { Visibility=Private }
        Property String private.psLongTableSpace
        { Visibility=Private }
        Property String private.psIndexTableSpace

        // Driver default value settings:
        { Visibility=Private }
        Property String private.psDriverDefaultValueASCII    ""
        { Visibility=Private }
        Property String private.psDriverDefaultValueBinary   ""
        { Visibility=Private }
        Property String private.psDriverDefaultValueDate     ""
        { Visibility=Private }
        Property String private.psDriverDefaultValueDateTime ""
        { Visibility=Private }
        Property String private.psDriverDefaultValueNumeric  ""
        { Visibility=Private }
        Property String private.psDriverDefaultValueText     ""

        // Driver "nullability" settings:
        { Visibility=Private }
        Property Boolean private.pbDriverDefaultNullableASCII    False
        { Visibility=Private }
        Property Boolean private.pbDriverDefaultNullableBinary   False
        { Visibility=Private }
        Property Boolean private.pbDriverDefaultNullableDate     False
        { Visibility=Private }
        Property Boolean private.pbDriverDefaultNullableDateTime False
        { Visibility=Private }
        Property Boolean private.pbDriverDefaultNullableNumeric  False
        { Visibility=Private }
        Property Boolean private.pbDriverDefaultNullableText     False

        // paSQLQueryMessages is a property of the container class cDbUpdateHandler.
        // It is being used to gather ESQL message replies, and is output to the log file
        // if pbVerboseState = True in the cDbUpdateHandler object.
        // (See: Procedure Set pbDatabaseWasUpdated in the cDbUpdateHandler class)
        // We reset it here for each cDbUpdateVersion object
        Delegate Set paSQLQueryMessages to aSQLQueryMessages
    End_Procedure

    { Visibility=Public MethodType=Event }
    // *** Main hook event message ***
    // Place your database update logic here!
    Procedure OnUpdate
    End_Procedure

    {MethodType=Property Category="Convert to SQL" InitialValue=True }
    // These properties also exists in the cDbUpdateFunctionLibray that is
    // imported to the cDbUpdateHandler container class which should be a
    // parent object to this object. To have the Studio's Property Panel
    // "behave" aka show these properties we need to duplicate them in this
    // class and "relay" them to the parent object.
    Procedure Set pbToANSI Boolean bState
        Set private.pbToANSI  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set pbToANSI to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    Function pbToANSI Returns Boolean
        Function_Return (private.pbToAnsi(Self))
    End_Function

    {MethodType=Property Category="Convert to SQL" InitialValue=True }
    Procedure Set pbRecnum Boolean bState
        Set private.pbRecnum  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set pbRecnum to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    Function pbRecnum Returns Boolean
        Function_Return (private.pbRecnum(Self))
    End_Function

    {MethodType=Property Category="Convert to SQL" InitialValue=True }
    Procedure Set pbCopyData Boolean bState
        Set private.pbCopyData  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set pbCopyData to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    Function pbCopyData Returns Boolean
        Function_Return (private.pbCopyData(Self))
    End_Function

    // ToDo: Should we put these four properties under another "Property Panel" section?
    {MethodType=Property Category="Convert to SQL" InitialValue=True }
    Procedure Set pbApiTableUpdateAuto Boolean bState
        Set private.pbApiTableUpdateAuto  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Set pbApiTableUpdateAuto of ghoSQLConnectionHandler to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    Function pbApiTableUpdateAuto Returns Boolean
        Function_Return (private.pbApiTableUpdateAuto(Self))
    End_Function

    {MethodType=Property Category="Convert to SQL" InitialValue=True }
    Procedure Set pbCompareDate_DateTime Boolean bState
        Set private.pbCompareDate_DateTime  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Set pbCompareDate_DateTime of ghoSQLConnectionHandler to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    Function pbCompareDate_DateTime Returns Boolean
        Function_Return (private.pbCompareDate_DateTime(Self))
    End_Function

    {MethodType=Property Category="Convert to SQL" InitialValue=True }
    Procedure Set pbCompareIndexAscending Boolean bState
        Set private.pbCompareIndexAscending  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Set pbCompareIndexAscending of ghoSQLConnectionHandler to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    Function pbCompareIndexAscending Returns Boolean
        Function_Return (private.pbCompareIndexAscending(Self))
    End_Function

    {MethodType=Property Category="Convert to SQL" InitialValue=True }
    Procedure Set pbCompareIndexUppercase Boolean bState
        Set private.pbCompareIndexUppercase  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Set pbCompareIndexUppercase of ghoSQLConnectionHandler to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    Function pbCompareIndexUppercase Returns Boolean
        Function_Return (private.pbCompareIndexUppercase(Self))
    End_Function

    {MethodType=Property Category="Convert to SQL" InitialValue="Default" }
    Procedure Set psSchema String sValue
        Set private.psSchema  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psSchema to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the ghoSQLConnectionHandler object as
    // it might have been specified in the SQLConnections.ini file.
    Function psSchema Returns String
        String sValue
        Get private.psSchema to sValue
        If (sValue = "") Begin
            Get psSchema of ghoSQLConnectionHandler to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="Convert to SQL" InitialValue="Default" }
    Procedure Set psBaseTableSpace String sValue
        Set private.psBaseTableSpace  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psBaseTableSpace to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the ghoSQLConnectionHandler object as
    // it might have been specified in the SQLConnections.ini file.
    Function psBaseTableSpace Returns String
        String sValue
        Get private.psBaseTableSpace to sValue
        If (sValue = "") Begin
            Get psBaseTableSpace of ghoSQLConnectionHandler to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="Convert to SQL" InitialValue="Default" }
    Procedure Set psLongTableSpace String sValue
        Set private.psLongTableSpace  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psLongTableSpace to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the ghoSQLConnectionHandler object as
    // it might have been specified in the SQLConnections.ini file.
    Function psLongTableSpace Returns String
        String sValue
        Get private.psLongTableSpace to sValue
        If (sValue = "") Begin
            Get psLongTableSpace of ghoSQLConnectionHandler to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="Convert to SQL" InitialValue="Default" }
    Procedure Set psIndexTableSpace String sValue
        Set private.psIndexTableSpace  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psIndexTableSpace to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the ghoSQLConnectionHandler object as
    // it might have been specified in the SQLConnections.ini file.
    Function psIndexTableSpace Returns String
        String sValue
        Get private.psIndexTableSpace to sValue
        If (sValue = "") Begin
            Get psIndexTableSpace of ghoSQLConnectionHandler to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue="Default" }
    Procedure Set psDriverDefaultValueASCII String sValue
        Set private.psDriverDefaultValueASCII  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psDriverDefaultValueASCII to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function psDriverDefaultValueASCII Returns String
        String sValue
        Get private.psDriverDefaultValueASCII to sValue
        If (sValue = "") Begin
            Delegate Get psDriverDefaultValueASCII to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue="Default" }
    Procedure Set psDriverDefaultValueBinary String sValue
        Set private.psDriverDefaultValueBinary  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psDriverDefaultValueBinary to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function psDriverDefaultValueBinary Returns String
        String sValue
        Get private.psDriverDefaultValueBinary to sValue
        If (sValue = "") Begin
            Delegate Get psDriverDefaultValueBinary to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue="Default" }
    Procedure Set psDriverDefaultValueDate String sValue
        Set private.psDriverDefaultValueDate  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psDriverDefaultValueDate to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function psDriverDefaultValueDate Returns String
        String sValue
        Get private.psDriverDefaultValueDate to sValue
        If (sValue = "") Begin
            Delegate Get psDriverDefaultValueDate to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue="Default" }
    Procedure Set psDriverDefaultValueDateTime String sValue
        Set private.psDriverDefaultValueDateTime  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psDriverDefaultValueDateTime to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function psDriverDefaultValueDateTime Returns String
        String sValue
        Get private.psDriverDefaultValueDateTime to sValue
        If (sValue = "") Begin
            Delegate Get psDriverDefaultValueDateTime to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue="Default" }
    Procedure Set psDriverDefaultValueNumeric String sValue
        Set private.psDriverDefaultValueNumeric  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psDriverDefaultValueNumeric to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function psDriverDefaultValueNumeric Returns String
        String sValue
        Get private.psDriverDefaultValueNumeric to sValue
        If (sValue = "") Begin
            Delegate Get psDriverDefaultValueNumeric to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue="Default" }
    Procedure Set psDriverDefaultValueText String sValue
        Set private.psDriverDefaultValueText  to sValue
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set psDriverDefaultValueText to sValue
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function psDriverDefaultValueText Returns String
        String sValue
        Get private.psDriverDefaultValueText to sValue
        If (sValue = "") Begin
            Delegate Get psDriverDefaultValueText to sValue
        End
        Function_Return sValue
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue=False }
    Procedure Set pbDriverDefaultNullableASCII Boolean bState
        Set private.pbDriverDefaultNullableASCII  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set pbDriverDefaultNullableASCII to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function pbDriverDefaultNullableASCII Returns Boolean
        Boolean bState
        Get private.pbDriverDefaultNullableASCII to bState
        If (bState = False) Begin
            Delegate Get pbDriverDefaultNullableASCII to bState
        End
        Function_Return bState
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue=False }
    Procedure Set pbDriverDefaultNullableBinary Boolean bState
        Set private.pbDriverDefaultNullableBinary  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set pbDriverDefaultNullableBinary to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function pbDriverDefaultNullableBinary Returns Boolean
        Boolean bState
        Get private.pbDriverDefaultNullableBinary to bState
        If (bState = False) Begin
            Delegate Get pbDriverDefaultNullableBinary to bState
        End
        Function_Return bState
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue=False }
    Procedure Set pbDriverDefaultNullableDate Boolean bState
        Set private.pbDriverDefaultNullableDate  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set pbDriverDefaultNullableDate to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function pbDriverDefaultNullableDate Returns Boolean
        Boolean bState
        Get private.pbDriverDefaultNullableDate to bState
        If (bState = False) Begin
            Delegate Get pbDriverDefaultNullableDate to bState
        End
        Function_Return bState
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue=False }
    Procedure Set pbDriverDefaultNullableDateTime Boolean bState
        Set private.pbDriverDefaultNullableDateTime  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set pbDriverDefaultNullableDateTime to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function pbDriverDefaultNullableDateTime Returns Boolean
        Boolean bState
        Get private.pbDriverDefaultNullableDateTime to bState
        If (bState = False) Begin
            Delegate Get pbDriverDefaultNullableDateTime to bState
        End
        Function_Return bState
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue=False }
    Procedure Set pbDriverDefaultNullableNumeric Boolean bState
        Set private.pbDriverDefaultNullableNumeric  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set pbDriverDefaultNullableNumeric to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function pbDriverDefaultNullableNumeric Returns Boolean
        Boolean bState
        Get private.pbDriverDefaultNullableNumeric to bState
        If (bState = False) Begin
            Delegate Get pbDriverDefaultNullableNumeric to bState
        End
        Function_Return bState
    End_Function

    {MethodType=Property Category="SQL Driver Defaults" InitialValue=False }
    Procedure Set pbDriverDefaultNullableText Boolean bState
        Set private.pbDriverDefaultNullableText  to bState
        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
        Delegate Set pbDriverDefaultNullableText to bState
        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
    End_Procedure

    // First retrieve the private value that might have been set in the object.
    // If blank; get it from the parent object
    Function pbDriverDefaultNullableText Returns Boolean
        Boolean bState
        Get private.pbDriverDefaultNullableText to bState
        If (bState = False) Begin
            Delegate Get pbDriverDefaultNullableText to bState
        End
        Function_Return bState
    End_Function

    Function ApiTableConvertToSQL Handle hTable Returns Boolean
        Boolean bUseConnectionID bToANSI bRecnum bCopyData bOK
        String sDriverID sSchema sBaseTableSpace sLongTableSpace sIndexTableSpace

        Get psDriverID to sDriverID
        Get psSchema to sSchema

        Get psBaseTableSpace to sBaseTableSpace
        If (sBaseTableSpace <> "") Begin
            Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
            Delegate Set psBaseTableSpace to sBaseTableSpace
            Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
        End

        Get psLongTableSpace to sLongTableSpace
        If (sLongTableSpace <> "") Begin
            Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
            Delegate Set psLongTableSpace to sLongTableSpace
            Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
        End

        Get psIndexTableSpace to sIndexTableSpace
        If (sIndexTableSpace <> "") Begin
            Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
            Delegate Set psIndexTableSpace to sIndexTableSpace
            Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
        End

        Get pbUseConnectionID to bUseConnectionID
        Get pbToANSI          to bToANSI
        Get pbRecnum          to bRecnum
        Get pbCopyData        to bCopyData

        Get ApiTableConvertToSQL_Ex hTable sDriverID bUseConnectionID bToANSI bRecnum bCopyData to bOK

        Function_Return bOK
    End_Function

//    Function ApiTableMoveAllToBackupFolder Returns Boolean
//        Boolean bOK bExists
//        String sDataPath sBackupFolder
//        
//        Set Message_Text of ghoStatusPanel to "Moving Embedded (*.dat) files to Backup folder."
//        Move CS_DUFBackupDataFolder to sBackupFolder
//        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
//        Get vFolderFormat sDataPath to sDataPath
//        
//        Get vFilePathExists (sDataPath + sBackupFolder) to bExists
//        If (bExists = False) Begin
//            Get vCreateDirectory (sDataPath + sBackupFolder) to bOK
//            Get vFilePathExists (sDataPath + sBackupFolder) to bExists
//            If (bExists = False) Begin
//                Error DFERR_PROGRAM ("Could not create the the backup data folder to move all *.dat and *.k?? files to. You need to move them somewhere manually.")
//                Function_Return False
//            End                                                                                                                                            
//            Get vMoveFile (sDataPath + "*.dat") (sDataPath + sBackupFolder) to bOK
//            Get vMoveFile (sDataPath + "*.hdr") (sDataPath + sBackupFolder) to bOK
//            Get vMoveFile (sDataPath + "*.k??") (sDataPath + sBackupFolder) to bOK
//            Get vMoveFile (sDataPath + "*.vld") (sDataPath + sBackupFolder) to bOK
//        End
//        
//        Set Message_Text of ghoStatusPanel to ""
//        Function_Return bOK
//    End_Function
//
    // This is automatically called after the OnUpdate
    // event has been executed. It will automatically update the
    // version database field/column with the "pnVersionNumber"
    // value of the parent cDbUpdateHandler class - if it has been changed.
    Procedure UpdateVersionColumnValue
        Number nVersion nCurrentValue
        Integer hTable iColumn iStatus
        Boolean bVersionUpdate bDbUpdateErrorHasOccured bUseCustomDbVersion

        // This is a property of the container class; cDbUpdateHandler that gets set when
        // an error occurres when processing ESQL or database API messages of the cDbUpdateFunctionLibrary.
        Delegate Get pbDbUpdateErrorHasOccured to bDbUpdateErrorHasOccured
        Get pbVersionUpdate to bVersionUpdate

        If (bVersionUpdate = True and bDbUpdateErrorHasOccured = False) Begin
            Get pnVersionNumber to nVersion
            Delegate Get piDbVersionFileNumber  to hTable
            Delegate Get piDbVersionFieldNumber to iColumn
            // NB! We need to permanently close tables as they e.g. now might no longer be embedded
            // but instead SQL tables. If we don't the old embedded table will be opened instead(!)
            Close DF_ALL DF_PERMANENT

            Open hTable

            // It is then the developer responsibility to take care of finding
            // the correct record that is to be updated (The DbVersion table is not used). 
            Delegate Get pbUseCustomDbVersion to bUseCustomDbVersion
            If (bUseCustomDbVersion = True) Begin
                Delegate Send OnFindVersionRecord   // cDbUpdateHandler object event (Programmer's hook!).
            End

            Get_Field_Value hTable iColumn to nCurrentValue
            If (nCurrentValue = 0) Begin
                Get_Attribute DF_FILE_STATUS of hTable to iStatus
                // Check to see if we need to refind this system record:
                If (iStatus = DF_FILE_INACTIVE) Begin
                    Vfind hTable 0 GT
                End
            End
            If (nCurrentValue < nVersion) Begin
                Reread
                    Set_Field_Value hTable iColumn to nVersion
                    SaveRecord hTable
                Unlock
            End
            Close hTable
        End
    End_Procedure

// Property of the container object (cDbUpdateHandler)
Register_Function piCurrentErrorHandlerID Returns Integer

    Procedure End_Construct_Object
        Forward Send End_Construct_Object
        Send ProcessUpdate True
    End_Procedure
    
    Procedure ProcessUpdate Boolean bShouldTestForDuplicateVersionNumbers
        Number nVersion nCurrentValue
        Integer hTable iColumn iSize iDbVersionFileNumber iStatus
        Boolean bStopOnFirstError bDbUpdateErrorHasOccured bContinueOnError bOpened bSystemTable bUseCustomDbVersion bTableExists bOnPreUpdateExecuted
        String sObjectName
        tDbVersionInfo[] dbVersionInfoArray

        Delegate Set Private.pbUpdateVersionObjectError to False

        // If the programmer forgot to set the version number we do not allow for the application
        // to continue to run, as this potentially could endanger the integrity of the database. E.g. if
        // one database update is depended on an earlier update and that earlier version
        // update was never executed it could lead to disastrous results.
        // This is a programmer error and should be discovered before any customer sees it. Thus no point in translating...
        Get pnVersionNumber to nVersion
        If (nVersion = 0) Begin
            Get piCurrentErrorHandlerID to Error_Object_Id
            Move (Name(Self)) to sObjectName
            Error DFERR_PROGRAM ("The pnVersionNumber property was not set properly by the programmer for the following object; Program will now exit!\n\n" + sObjectName)
            Send Exit_Application
        End

        // These are send to the parent container object (cDbUpdateHandler). The order is very sensitive!
        // Hook event for the developer to e.g. create a database before the update events starts.
        Delegate Get Private.pbOnPreUpdateExecuted to bOnPreUpdateExecuted
        If (bOnPreUpdateExecuted = False) Begin
            Delegate Send OnPreUpdate
            Delegate Set Private.pbOnPreUpdateExecuted to True
        End
        
        Delegate Get piDbVersionFileNumber to iDbVersionFileNumber
        Delegate Get pbUseCustomDbVersion to bUseCustomDbVersion
        If (bUseCustomDbVersion = True) Begin
            Get _UtilTableExists of ghoDbUpdateFunctionLibrary iDbVersionFileNumber to bTableExists
            If (bTableExists = False) Begin
                Delegate Send OnCreateCustomDbVersionTable
            End
        End
        
        // We now check that two or more cDbVersion objects does not have the same pnVersionNumber.
        // Note that the paDbVersionInfoArray is a property of the container object (cDbUpdateHandler)
        If (bShouldTestForDuplicateVersionNumbers = True) Begin
            Delegate Get paDbVersionInfoArray to dbVersionInfoArray
            Move (SizeOfArray(dbVersionInfoArray)) to iSize
            Move nVersion to dbVersionInfoArray[iSize].nVersionNumber
            Move (Self)   to dbVersionInfoArray[iSize].hObject
            Delegate Set paDbVersionInfoArray to dbVersionInfoArray
            Delegate Send CheckForDuplicates nVersion   // cDbUpdateHandler object event.
        End

        Delegate Get piDbVersionFileNumber  to hTable
        Delegate Get piDbVersionFieldNumber to iColumn

        Open hTable
        Get_Attribute DF_FILE_OPENED of hTable to bOpened
        If (bOpened = False) Begin
            Send Stop_Box CS_DUF_DbUpdateTableMissing
            Send Exit_Application
        End
        
        // It can happen that the table isn't initialized with a record even though it is a system table,
        // in case we take care of it here.
        Get_Attribute DF_FILE_STATUS of hTable to iStatus
        If (iStatus = DF_FILE_INACTIVE) Begin
            Vfind hTable 0 GT
        End
        Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTable to bSystemTable
        If (bSystemTable = True) Begin
            Get_Field_Value hTable iColumn to nCurrentValue
        End
        Else Begin
            If (bUseCustomDbVersion = True) Begin
                Send OnFindVersionRecord
                Get_Field_Value hTable iColumn to nCurrentValue
            End
        End

        Close hTable

        // We also guard from missing 'DatabaseVersionInfoTable' and column properties settings.
        // If not set we do nothing.
        If (nCurrentValue < nVersion) Begin

            // If pbStopOnFirstError is True in the parent, the idea is that we do _no_ further
            // execution of database update code. So if true _and_ one error
            // has already occured; we're out of here.
            Delegate Get pbStopOnFirstError        to bStopOnFirstError
            Delegate Get pbDbUpdateErrorHasOccured to bDbUpdateErrorHasOccured
            If (bStopOnFirstError = True) Begin
                If (bDbUpdateErrorHasOccured = True) Begin
                    Procedure_Return
                End
            End

            // This is send to the parent container object (cDbUpdateHandler)
            Delegate Send InitDatabaseUpdate (Self)    // cDbUpdateHandler object event.

            // If the parent property pbContinueOnError = False, an update
            // of a following cDbUpdateVersion object should not take place and we're out of here.
            Delegate Get pbContinueOnError to bContinueOnError
            If (bContinueOnError = False and bDbUpdateErrorHasOccured = True) Begin
                Procedure_Return
            End

            Delegate Set pnCurrentVersionUpdate to nVersion

            Set Title_Text of ghoStatusPanel to (CS_DUF_UpdateVersion * CS_DUF_UpdateFromVersion * String(nCurrentValue) * CS_DUF_UpdateToVersion * String(nVersion))

            // *** Programmer's main hook event for database update functions:
            Send OnUpdate

            Set pbVersionUpdate to True
            Send UpdateVersionColumnValue
            Delegate Set pbDatabaseWasUpdated to True   // cDbUpdateHandler property.
        End

    End_Procedure

End_Class
