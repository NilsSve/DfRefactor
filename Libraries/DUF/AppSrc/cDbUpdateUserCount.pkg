//****************************************************************************
// $Module type: Class
// $Module name: cDbUpdateUserCount.pkg
// $Author     : Emil Stojanov Quantaris B.V.
//
//               Collected from DAW's newsgroups.
//
// Description : It uses the windows API to lock bytes in a file.
//               If the application or PC craches it will release the lock
//               automatically.
//
// Note 1      : It will count the number of running app's, so if a
//               user starts the app twice on one machine it will count as two users.
// Note 2      : The class was originally named cUserCount by Emil Stojanov.
//               However, to not conflict with any other usage of this class it was
//               renamed to "fit" into the "Database Update Framework" (cDbUpdateHandler
//               and cDbUpdateVersion classes)
//
// $Rev History:
//    2008-10-17  Module header created (Militaty data format)
//    2008-10-17  Minor changes by Nils G Svedmyr. Created UI text constants
//                for easy translation to other languages.
//                Added the tUserCount struct for easier passing of parameters.
//                Added the ApplicationPath message.
//****************************************************************************
Use LanguageText.pkg
Use cDbUpdateUserCount.inc
Use vWin32fh.pkg
Use seq_chnl.pkg

// User interface constant strings:
#IFSAME Language$Current Language$English
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSAME Language$Current Language$Nederlands
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSAME Language$Current Language$Svenska
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSAME Language$Current Language$Deutsch
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSAME Language$Current Language$Dansk
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSAME Language$Current Language$Portugues
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSAME Language$Current Language$Francais
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSAME Language$Current Language$Italiano
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSAME Language$Current Language$Espanol
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSAME Language$Current Language$Norsk
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSame Language$Current = Language$Russian
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSame Language$Current = Language$Polish
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFSame Language$Current = Language$Hungarian
    Define CS_UserCountError            for "User count error:"
    Define CS_UnableToInitUserCountSys  for "Unable to initialize user counting system!"
    Define CS_UnableResetUserCountSys   for "Error resetting usercounting system!"
    Define CS_ErrorAdvancingPointer     for "Error advancing file pointer!"
    Define CS_MaxNoOfUserExceeded       for "Maximum number of users exceeded!"
#ENDIF

#IFNDEF _struct_tUserCount
    Struct tUserCount
        Integer iUserCount
        Integer iError
        String  sErrorTxt
    End_Struct
#ENDIF

#IFNDEF CI_UserCountMaxUsers
    Define CI_UserCountMaxUsers for 9999
#ENDIF

Class cDbUpdateUserCount is a cObject
    Procedure Construct_Object
        Forward Send Construct_Object

        { Visibility=Public }
        Property String  psLockFileName
        { Visibility=Public }
        Property Integer piMaxUsers
        { Visibility=Public }
        Property Boolean pbCheckDataFlexUserCount True

        { Visibility=Private }
        Property Handle  phUserCountFile
        { Visibility=Private }
        Property Integer pdwLockPosition
    End_Procedure

    Function IsProgramRunning Returns Boolean
        tUserCount UserCount

        Get CheckUserCount to UserCount

        Function_Return (UserCount.iUserCount > 1)
    End_Function

    // Returns the full path of the Application (no trailing "\")
    Function ApplicationPath Returns String
        String sApplicationFileName sPath
        Integer iNumChars iRetval

        Move (Repeat(Character(0), 1024))    to sApplicationFileName
        Move (GetModuleFileName(0, AddressOf(sApplicationFileName), 1024)) to iNumChars
        Move (CString(sApplicationFileName)) to sApplicationFileName
        Move (PathRemoveFileSpec(AddressOf(sApplicationFileName))) to iRetval
        Move (CString(sApplicationFileName)) to sPath

        Function_Return sPath
    End_Function

    Function OpenUserCountFile String sFileName Returns Handle
        Handle  hFile
        Pointer pFileName
        String sPath sFile
        Integer iCh

        Move (Addressof(sFileName)) to pFileName
        Move (Win32_CreateFile(pFileName, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, (FILE_ATTRIBUTE_NORMAL ior FILE_FLAG_WRITE_THROUGH), 0)) to hFile

        // If lock file doesn't exist, create it.
        If (hFile = INVALID_HANDLE_VALUE) Begin
            Get ApplicationPath to sPath
            Get vFolderFormat sPath to sPath
            Move (sPath + psLockFileName(Self)) to sFile
            Get Seq_Open_Output_Channel sFile to iCh
            If (iCh = DF_SEQ_CHANNEL_ERROR) Begin
                Function_Return 0
            End
            Direct_Output channel iCh sFile
                Write channel iCh ""
            Send Seq_Close_Channel iCh
            Move (Win32_CreateFile(pFileName, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, (FILE_ATTRIBUTE_NORMAL ior FILE_FLAG_WRITE_THROUGH), 0)) to hFile
        End

        Function_Return hFile
    End_Function

    Function CloseUserCountFile Handle hFile Returns Integer
        Integer iReturnValue 
        Boolean bOK

        Move (Win32_CloseHandle(hFile)) to iReturnValue
        If (iReturnValue = 0) Begin
            Move False to bOK
        End
        Else Begin
            Move True to bOK
        End
        Function_Return bOK
    End_Function

    Function UnlockUserCountFile Handle hFile dWord dwLockPos Returns Integer
        Integer iReturnValue
        Boolean bOK

        Move (Win32_UnLockFile(hFile, dwLockPos, 0, 1, 0)) to iReturnValue
        If (iReturnValue = 0) Begin
            Move False to bOK
        End
        Else Begin
            Move True to bOK
        End           
        Function_Return bOK
    End_Function

    Function ReSetUserCountPointer Handle hFile Returns dWord
        dWord dwCurrPos

        Move (Win32_SetFilePointer(hFile, 0, 0, FILE_BEGIN)) to dwCurrPos
        Function_Return dwCurrPos
    End_Function

    Function SetUserCountPointer Handle hFile Integer iAdvance Returns dWord
        DWord dwCurrPos

        Move (Win32_SetFilePointer(hFile, iAdvance, 0, FILE_CURRENT)) to dwCurrPos
        Function_Return dwCurrPos
    End_Function

    Function ReadUserCountFile Handle hFile Returns Boolean
        Integer iReturnValue                               
        Boolean bOK
        String  sBuffer
        Pointer pBuffer
        String  sSize
        Pointer pSize

        Move (Repeat((Character(0)),5)) to sBuffer
        Move (AddressOf(sBuffer)) to pBuffer

        Move (Repeat((Character(0)),4)) to sSize
        Move (AddressOf(sSize)) to pSize

        Move (Win32_ReadFile(hFile, pBuffer, 1, pSize, 0)) to iReturnValue
        If (iReturnValue = 0) Begin
            Move False to bOK
        End
        Else Begin
            Move True to bOK
        End                 
        Function_Return bOK
    End_Function

    Function LockUserCountFile Handle hFile dWord dwFilePos Returns Integer
        Integer iReturnValue

        Move (Win32_LockFile(hFile, dwFilePos, 0, 1, 0)) to iReturnValue
        Function_Return iReturnValue
    End_Function

    Procedure DoCheckUserCount
        tUserCount UserCount

        Get CheckUserCount to UserCount
        // If all is fine, we're done.
        If (UserCount.iError = 0) Begin
            Procedure_Return
        End

        Send UserError (CS_UserCountError * String(UserCount.iError) + "\n" + UserCount.sErrorTxt)

        If (UserCount.iUserCount = CI_UserCountMaxUsers) Begin
            Abort
        End
    End_Procedure

    Function CheckUserCount Returns tUserCount
        Handle  hFile
        String  sPath sFile
        Integer iResult
        DWord   dwFilePos
        Integer bLocked
        Integer iMaxUsers
        Integer iCurUser
        tUserCount UserCount

        Move 0 to UserCount.iError

        Get phUserCountFile to hFile
        If (not(hFile)) Begin
            Get ApplicationPath to sPath
            Get vFolderFormat sPath to sPath
            Move (sPath + psLockFileName(Self)) to sFile
            Get OpenUserCountFile sFile to hFile
            If (hFile = INVALID_HANDLE_VALUE) Begin
                Move 1 to UserCount.iUserCount
                Move 1 to UserCount.iError
                Move CS_UnableToInitUserCountSys to UserCount.sErrorTxt
                Function_Return UserCount
            End
            Else Begin
                Move False to bLocked
                Set phUserCountFile to hFile
                Get piMaxUsers to iMaxUsers

                // Set Filepointer to beginning of the file
                Get ResetUserCountPointer hFile to dwFilePos
                If (dwFilePos = -1) Begin
                    Move 1 to UserCount.iUserCount
                    Move 2 to UserCount.iError
                    Move CS_UnableResetUserCountSys to UserCount.sErrorTxt
                    Function_Return UserCount
                End
                For iCurUser from 1 to iMaxUsers
                    Get LockUserCountFile hFile dwFilePos to iResult
                    If (not(iResult)) Begin  // byte is locked
                        Get SetUserCountPointer hFile 10 to dwFilePos
                        If (dwFilePos = -1) Begin
                            Move 1 to UserCount.iUserCount
                            Move 3 to UserCount.iError
                            Move CS_ErrorAdvancingPointer to UserCount.sErrorTxt
                            Function_Return UserCount
                        End
                    End
                    Else Begin  // byte is not locked
                        Set pdwLockPosition to dwFilePos
                        Move True to bLocked
                        Move iMaxUsers to iCurUser
                    End
                Loop
                If (not(bLocked)) Begin
                    Move CI_UserCountMaxUsers to UserCount.iUserCount
                    Move 4 to UserCount.iError
                    Move CS_MaxNoOfUserExceeded to UserCount.sErrorTxt
                    Function_Return UserCount
                End
            End
        End

        Function_Return UserCount
    End_Function


    Procedure DoReleaseUserCount
        Integer iResult
        Handle  hFile
        DWord   dwLockPos

        Get phUserCountFile to hFile
        Get pdwLockPosition to dwLockPos
        If (hFile) Begin
            If (dwLockPos) Begin
                Get UnlockUserCountFile hFile dwLockPos to iResult
            End
            Get CloseUserCountFile hFile to iResult
        End
    End_Procedure

    Function CurrentNumberOfUsers Returns Integer
        Handle  hFile
        Integer iMaxUsers
        DWord   dwFilePos
        Integer iCurUser
        Integer iResult
        Integer iNumberOfLocks
        String  sPath sFile

        Move 0 to iNumberOfLocks

        Get ApplicationPath to sPath
        Get vFolderFormat sPath to sPath
        Move (sPath + psLockFileName(Self)) to sFile
        Get OpenUserCountFile sFile to hFile
        If (hFile = INVALID_HANDLE_VALUE) Begin
            Send UserError CS_UnableToInitUserCountSys
            Abort
        End

        If (hFile > 0) Begin
            Get piMaxUsers To iMaxUsers

            // Set Filepointer to beginning of the file
            Get ResetUserCountPointer hFile to dwFilePos
            If (dwFilePos = -1) Begin
                Send UserError CS_UnableResetUserCountSys
                Abort
            End
            For iCurUser from 1 to iMaxUsers
                Get LockUserCountFile hFile dwFilePos to iResult
                If (Not(iResult)) Begin  // byte is locked
                    Increment iNumberOfLocks
                End
                Else Begin  // byte is not locked
                    Get UnlockUserCountFile hFile dwFilePos to iResult
                End
                Get SetUserCountPointer hFile 10 to dwFilePos
                If (dwFilePos = -1) Begin
                    Send UserError CS_ErrorAdvancingPointer
                    Abort
                End
            Loop
        End
        Get CloseUserCountFile hFile to iResult
        Function_Return iNumberOfLocks
    End_Function

End_Class
