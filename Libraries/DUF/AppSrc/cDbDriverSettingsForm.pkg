//****************************************************************************
// $Module type: Class
// $Module name: cDbDriverSettingsForm
// $Author     : Nils Svedmyr, RDC Tools International
// Created     : 2014-03-17 @ 12:34
//
// Description :
//
// $Rev History:
//    2014-03-17  Module header created
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
//****************************************************************************
Use Windows.pkg
Use seq_chnl.pkg

Class cDbDriverSettingsForm is a Form

    Procedure Construct_Object
        Forward Send Construct_Object

        Property Boolean private.pbDriverLoadingError False
        
        Set Label_Col_Offset to 2
        Set Label_Justification_Mode to JMode_Right
        Set Size to 11 125 
        // We use these settings and not enabled_state to be able
        // to show tooltips.
        Set Color to clBtnFace
        Set Focus_Mode to NonFocusable
        Set peAnchors to anTopLeftRight

        Property String psDriverIniFile ""
    End_Procedure

    Procedure Set psToolTip String sText
        If (Trim(sText) = "") Begin
            Move "No info available" to sText
        End
        Forward Set psToolTip to sText
    End_Procedure

    Function psToolTip Returns String
        String sTooltip sSearchValue

        Get Label to sSearchValue
        Get ExtractIniFileComment sSearchValue to sTooltip

        Function_Return sTooltip
    End_Function

    Procedure SetValue String sDriver String sLabel Integer iAttribute
        Integer iDriver
        String sValue

        // Sadly driver API attributes are only supported by the CLI-drivers,
        // and the Pervasive driver is not amongst them. So do nothing if Pervasive.
        If (sDriver <> DFBTRDRV_ID and sDriver <> DATAFLEX_ID) Begin
            Send Ignore_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
            Get DriverIndex of ghoSQLConnectionHandler sDriver to iDriver
            Set private.pbDriverLoadingError to (iDriver = -1)
            Send Trap_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
            If (iDriver <= 0) Begin
                Procedure_Return
            End
            // Set indicator to false prior asking for the driver attribute.
            // This way we can decide to show the object or not, based on success/failure.
            Move False to Err
            Get_Attribute iAttribute of iDriver to sValue
            If (sValue = "0") Begin
                Move "0 (False)" to sValue
            End
            If (sValue = "1") Begin
                Move "1 (True)"  to sValue
            End
            Set Value to sValue

            Move (Replace("DF_DRIVER_", Uppercase(sLabel), "")) to sLabel
            // Its a bit annoying reading all caps, so "proper" case
            // all labels (DF_DRIVER_XXX values).
            Get Propercase sLabel to sLabel
            Set Label to sLabel

            Get ExtractIniFileComment sLabel to sValue
            Set Status_Help to sValue
            Set psToolTip to sValue
        End
    End_Procedure

    // Pass a driver ini filename with path & a comment value to search for.
    // Returns: The comments in the file as a string.
    Function ExtractIniFileComment String sSearchValue Returns String
        String sIniFile sValue sRetval sComment sCommentMarker
        Boolean bCommentRow bStart
        Integer iCh

        Get psDriverIniFile to sIniFile
        Move ";" to sCommentMarker
        Get Seq_Open_Input_Channel sIniFile to iCh
        While (SeqEof = False)
            Readln channel iCh sValue
            Move (Trim(sValue)) to sValue

            // Check for a ";" at pos 1 & if the line contains the passed search value (driver attribute).
            Move (Left(sValue, 1)) to sComment
            If (bStart = False) Begin
                Move (sComment = sCommentMarker and Lowercase(sValue) contains Lowercase(sSearchValue)) to bStart
            End
            If (bStart = True) Begin
                // Have we read past end of the comment for the driver attribute? If so, quit.
                If (sComment <> sCommentMarker) Begin
                    Move True to SeqEof
                End
                Else Begin
                    Move (sComment = sCommentMarker) to bCommentRow
                    If (bCommentRow = True) Begin
                        Move (Replace(sCommentMarker, sValue, "")) to sValue

                        // Replace all double spaces with a single space character.
                        Move (Replaces("  ", sValue, " ")) to sValue

                        If (sRetval = "") Begin
                            Move sValue to sRetval
                        End
                        Else Begin
                            Move (sRetval + " " + sValue) to sRetval
                        End
                    End
                End
            End
        Loop
        Send Seq_Close_Channel iCh

CompilerWarnings Off
        // Replaces all double spaces with a single space character.
        // The Replaces function doesn't quite work for this.
        Repeat
            Replace "  " in sRetval with " "
        Until (FindErr)
        
        Function_Return sRetval
    End_Function
CompilerWarnings On

    Function Propercase String sText Returns String 
        String[] sDelimiters
        Integer iPos
        
        //Lowercase everything and we'll handle uppercase by exception
        Move (Lowercase(sText)) to sText
        
        Move " " to sDelimiters[SizeOfArray(sDelimiters)]
        Move "-" to sDelimiters[SizeOfArray(sDelimiters)]
        Move "_" to sDelimiters[SizeOfArray(sDelimiters)]
        
        For iPos from 1 to (Length(sText)) // 1 based loop to match MID and OVERSTRIKE
            //If the previous character is a space, uppercase the current one (alway upper the first char)
            If ((iPos = 1) or (SearchArray( Mid(sText, 1, (iPos - 1)), sDelimiters) <> -1)) ;
                Move (Overstrike( Uppercase(Mid(sText, 1, iPos)), sText, iPos )) to sText
        Loop
        
        Function_Return sText
    End_Function

End_Class
