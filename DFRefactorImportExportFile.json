{
   "iNoOfFunctions": 35,
   "Data": [
     {
       "ID": "1",
       "Function_Name": "ChangeCurrent_ObjectToSelf",
       "Function_Description": "Current_Object -> Self",
       "Function_Help": "Replaces the legacy keyword 'Current_Object' with 'Self' (Function: ChangeCurrent_ObjectToSelf) (Function: ChangeCurrent2_ObjectToSelf)",
       "Function_Summary": "Replaced Current_Object with Self",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "2",
       "Function_Name": "ChangeDfTrueDfFalse",
       "Function_Description": "DFTrue -> True",
       "Function_Help": "Replaces legacy DfTrue and DFFalse with True or False (Function: ChangeDfTrueDfFalse)",
       "Function_Summary": "Replaced DFTrue\/DFFalse with True\/False",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "5",
       "Function_Name": "ChangeGetAddress",
       "Function_Description": "GetAdress -> (AddressOf(",
       "Function_Help": "Replaces legacy GetAddress command with function AddressOf (Function: ChangeGetAddress)",
       "Function_Summary": "Changed GetAddress command to function AddressOf",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "6",
       "Function_Name": "ChangeIndicateCommand",
       "Function_Description": "Indicate Found as -> Move True to Found",
       "Function_Help": "Changes Indicate [Found] as True -> Move True to Found (Function: ChangeIndicateCommand)",
       "Function_Summary": "Indicate [Found] as True -> Move True to Found",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "9",
       "Function_Name": "ChangeIndicatorToMoveStateToVariable",
       "Function_Description": "Indicate Select as -> If (Select) Move () to",
       "Function_Help": "Changes [Select] Indicate Select as Windowindex Eq Fieldindex --> If (Select) Move (Windowindex = Fieldindex) to Select (Function: ChangeIndicatorToMoveStateToVariable)",
       "Function_Summary": "Changed Indicate Select as -> If (Select) Move ()",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "10",
       "Function_Name": "ChangeInsertCommandToFunction",
       "Function_Description": "Insert command ->(Insert(",
       "Function_Help": "Changes legacy insert command to use the function Insert (Function: ChangeInsertCommandToFunction)",
       "Function_Summary": "Changed insert command to Insert function",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "11",
       "Function_Name": "ChangeInToContains",
       "Function_Description": "Replace IN command with Contains operator",
       "Function_Help": "Replace 'IN' command with expression operator 'Contains' (Function: ChangeInToContains)",
       "Function_Summary": "Changed Replace IN command with expression operato",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "4",
       "Function_Name": "ChangeLegacyIndicators",
       "Function_Description": "[Found][FindErr] -> (Found) (Not(Found))",
       "Function_Help": "Changes legacy square brackets found indicators; [Found] {FindErr] to expressions; (Found) or (Not(Found)) (Function: ChangeFoundAndFindErrIndicators) (Function: ChangeLegacyIndicators)",
       "Function_Summary": "Changed [Found]\/[FindErr] to (Found)\/(Not(Found))",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "13",
       "Function_Name": "ChangeLegacyOperators",
       "Function_Description": "Change lt, le, eq, ne, gt, ge -> <, <=, =, <>, >, >=",
       "Function_Help": "Changes legacy operators to: <, <=, =, <>, >, >= (Function: ChangeLegacyOperators)",
       "Function_Summary": "Changed legacy operators",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "39",
       "Function_Name": "ChangeLegacyShadow_State",
       "Function_Description": "(Asolvi) Changes Shadow_State -> Enabled_State",
       "Function_Help": "Changes Shadow_State and Object_Shadow_State to Enabled_State (Function: ChangeLegacyShadow_State)",
       "Function_Summary": "Changed Shadow_State -> Enabled_State",
       "Selected": true,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "14",
       "Function_Name": "ChangeLengthCommandToFunction",
       "Function_Description": "Change Length command to function",
       "Function_Help": "Changes the lenght command to function Length",
       "Function_Summary": "Changed Length command to function",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "15",
       "Function_Name": "ChangePosCommandToFunction",
       "Function_Description": "Change Pos command to function",
       "Function_Help": "Changes Pos command to function Pos",
       "Function_Summary": "Changed Pos command to function",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "16",
       "Function_Name": "ChangeReplaceCommandToFunction",
       "Function_Description": "Change Replace command to function",
       "Function_Help": "Changes legacy replace command with function Replace (Function: ChangeReplaceCommandToFunction)",
       "Function_Summary": "Changed Replace command to function Replace",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "17",
       "Function_Name": "ChangeSysdate4",
       "Function_Description": "Change Sysdate4 command to Sysdate",
       "Function_Help": "Changes legacy Sysdate4 command to Sysdate command (Function: ChangeSysdate4)",
       "Function_Summary": "Changed Sysdate4 to Sysdate",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "18",
       "Function_Name": "ChangeTrimCommandToFunction",
       "Function_Description": "Change Trim command to function",
       "Function_Help": "Changes the Trim command to function Trim",
       "Function_Summary": "Changed Trim command to function Trim",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "21",
       "Function_Name": "ChangeUClassToRefClass",
       "Function_Description": "Get Create U_Class to Get Create (RefClass(Class))",
       "Function_Help": "Changes Get Create U_Class to Get Create (RefClass(Class))",
       "Function_Summary": "Changed Get Create U_Class to Get Create (RefClass",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "19",
       "Function_Name": "ChangeZeroStringCommandToFunction",
       "Function_Description": "Change ZeroString command to function",
       "Function_Help": "Changes ZeroString command to function ZeroString",
       "Function_Summary": "Changed ZeroString command to function ZeroString",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "36",
       "Function_Name": "EditorDropSelf",
       "Function_Description": "Drop self reference in neighborhood",
       "Function_Help": "'Refactoring Editor function' Warning! Highly interactive Editor function that will ask permission for making changes for each occurance found. (Function: RefactorDropSelf) (Function: EditorDropSelf)",
       "Function_Summary": "RefactorDropSelf occurancies:",
       "Selected": false,
       "Type": 3,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "22",
       "Function_Name": "EditorNormalizeCase",
       "Function_Description": "Changes to proper Upper and lowercase",
       "Function_Help": "'Refactoring Editor function' Adjust the case of all scope and keywords to match the casing as defined in the language configuration. (Function: RefactorNormalizeCase) (Function: EditorNormalizeCase)",
       "Function_Summary": "Corrected Upper and lowercase",
       "Selected": false,
       "Type": 3,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "23",
       "Function_Name": "EditorReIndent",
       "Function_Description": "Reindents the code",
       "Function_Help": "'Refactoring Editor function' Reindents the full source code. (See 'Tab Size' setting under Additional Settings') (Function: RefactorReIndent) (Function: EditorReIndent)",
       "Function_Summary": "Reindented the code",
       "Selected": false,
       "Type": 3,
       "Count": 0,
       "bHasParameter": true,
       "Parameter": "4",
       "ParameterValidation": "1,2,3,4,5,6",
       "ParameterHelp": "Select the indent size you want to use when indenting code and when breaking a line on rewriting a single line to multiple lines. It is the same value that can be set on the Editor Settings dialog tab size."
     },
     {
       "ID": "29",
       "Function_Name": "RemoveEndComments",
       "Function_Description": "Remove line end comments",
       "Function_Help": "Removes line end comments (Function: RemoveEndComments)",
       "Function_Summary": "Removed EndComments",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "26",
       "Function_Name": "RemoveLocalKeyWord",
       "Function_Description": "Remove Local Key Word",
       "Function_Help": "Removes Local key word in Functions and Procedures (Function: RemoveLocalKeyWord)",
       "Function_Summary": "Removed Local Key Word in Functions and Procedures",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "25",
       "Function_Name": "RemoveMultipleBlankLines",
       "Function_Description": "Removes consecutive blank Lines",
       "Function_Help": "Removes blank lines if more than 'Max blank lines' (See setting under 'Other Function Settings'.) (Function: RemoveBlankLines) (Function: RemoveMultipleBlankLines)",
       "Function_Summary": "Removed consecutive blank lines",
       "Selected": false,
       "Type": 6,
       "Count": 0,
       "bHasParameter": true,
       "Parameter": "1",
       "ParameterValidation": "1,2,3,4,5,6",
       "ParameterHelp": "Enter the max number of consecutive blank lines allowed in source files."
     },
     {
       "ID": "30",
       "Function_Name": "RemoveOldStudioMarkers",
       "Function_Description": "Remove legacy IDE markers",
       "Function_Help": "Removes legacy IDE markers \/\/AB-Store etc. (Function: RemoveOldStudioMarkers)",
       "Function_Summary": "Removed legacy IDE markers",
       "Selected": false,
       "Type": 2,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "37",
       "Function_Name": "RemoveProjectObjectStructure",
       "Function_Description": "Removes Register_Object structures",
       "Function_Help": "Removes legacy Register_Object structures on top of e.g. view files. It does not do so with WebApp (*.wo) files. (Function: RemoveRegisterObjectStructure) (Function: RemoveProjectObjectStructure)",
       "Function_Summary": "Removed Register_Object structure lines:",
       "Selected": false,
       "Type": 2,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "27",
       "Function_Name": "RemovePropertyPrivate",
       "Function_Description": "Remove Property Private",
       "Function_Help": "Removes Private keyword from Property declaration",
       "Function_Summary": "Removed Property Private",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "28",
       "Function_Name": "RemovePropertyPublic",
       "Function_Description": "Remove Property Public",
       "Function_Help": "Removes Public key word in Functions and Procedures",
       "Function_Summary": "Removed Property Public",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "31",
       "Function_Name": "RemoveSansSerif",
       "Function_Description": "Removes \"MS Sans Serif\" font lines",
       "Function_Help": "Removes \"MS Sans Serif\" font lines (Function: RemoveSansSerif)",
       "Function_Summary": "Removed \"MS Sans Serif\" fonts",
       "Selected": false,
       "Type": 2,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "12",
       "Function_Name": "RemoveStudioGeneratedComments",
       "Function_Description": "Remove Studio Generated Comments",
       "Function_Help": "Removes Studio generated comments lines (Function: RemoveStudioGeneratedComments)",
       "Function_Summary": "Removed Studio generated comments",
       "Selected": false,
       "Type": 2,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "32",
       "Function_Name": "RemoveTrailingSpaces",
       "Function_Description": "Remove spaces at end of line",
       "Function_Help": "Removes all spaces at the end of code lines (Function: RemoveTrailingSpaces)",
       "Function_Summary": "Removed spaces at end of line",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "33",
       "Function_Name": "RemoveUnusedLocals",
       "Function_Description": "Remove unused local variables",
       "Function_Help": "Remove variables from functions and procedures that aren't used (Function: RemoveUnusedLocals)",
       "Function_Summary": "Removed unused local variables",
       "Selected": false,
       "Type": 6,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "24",
       "Function_Name": "ReplaceCalcWithMoveStatement",
       "Function_Description": "Change Calc\/MoveInt\/MoveStr -> Move",
       "Function_Help": "Changes Calc\/MoveInt\/MoveStr\/MoveNum to Move command (Function: ReplaceCalcWithMoveStatement)",
       "Function_Summary": "Changed Calc\/MoveInt\/MoveStr -> Move",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "35",
       "Function_Name": "ReportUnusedSourceFiles",
       "Function_Description": "Reports fles that are never used.",
       "Function_Help": "Reports Only! Makes no changes to the source code. Checks all files in the current workspace to see if they are used, else list them in a report. (Function: ReportUnusedSourceFiles)",
       "Function_Summary": "Number of Unused Files:",
       "Selected": false,
       "Type": 5,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "38",
       "Function_Name": "RestylelDDOs",
       "Function_Description": "Renames DataDictionaries objects to newer Studio standard.",
       "Function_Help": "Allows you to switch between the following code styles:\r\n  <TableName>_DD     >> eDDOldStyle\r\n o<TableName>_DD   >> eDDStudioStyle (Function: RestylelDDOs)",
       "Function_Summary": "Renames DataDictionaries objects to newer Studio s",
       "Selected": false,
       "Type": 7,
       "Count": 0,
       "bHasParameter": false,
       "Parameter": "",
       "ParameterValidation": "",
       "ParameterHelp": ""
     },
     {
       "ID": "34",
       "Function_Name": "SplitInlineIfElseLine",
       "Function_Description": "Split line If\/Else line",
       "Function_Help": "Splits If\/Else single lines  to If\/Else - Begin constructs.   This function accepts a parameter that controls how the If\/Else or Begin\/End block is constructed. (Function: SplitInlineIfElseLine)",
       "Function_Summary": "Split If\/Else line",
       "Selected": false,
       "Type": 1,
       "Count": 0,
       "bHasParameter": true,
       "Parameter": "CI_SplitAddBeginEndBlock",
       "ParameterValidation": "CI_SplitWithSpaceAndSemicolon,CI_SplitWithSemicolon,CI_SplitAddBeginEndBlock",
       "ParameterHelp": "Valid Values; CI_SplitWithSpaceAndSemicolon = Split line with space and semicolon\\nCI_SplitWithSemicolon = Split line with semicolon\\nCI_SplitAddBeginEndBlock = Add a Begin\/End block"
     }
   ],
   "Code": [
     {
       "sFunctionName": "ChangeCurrent_ObjectToSelf",
       "iSourceLines": 27,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Replaces \"Current_Object\" to \"Self\"",
         "    Function ChangeCurrent_ObjectToSelf String ByRef sLine String sParameter Returns Boolean",
         "        String sStart sStop",
         "        Boolean bFound",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        If (TokenizerData.bLineIsReady = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move (Pos(Lowercase(CS_Current_Object), Lowercase(sLine))) to iPos",
         "        If (iPos = 0) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Get _ReplaceLineToken TokenizerData sLine CS_Current_Object CS_Self to sLine",
         "        \/\/ Note! We call ourself recursively if there are more than one \"current_object\".",
         "        Move (Pos(Lowercase(CS_Current_Object), Lowercase(sLine))) to iPos",
         "        If (iPos <> 0) Begin",
         "            Get ChangeCurrent_ObjectToSelf (&sLine) \"\" to bFound",
         "        End",
         "",
         "        Function_Return True",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeDfTrueDfFalse",
       "iSourceLines": 36,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Changes \"DfTrue\" --> \"True\" and \"DfFalse\" --> \"False\"",
         "    Function ChangeDfTrueDfFalse String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bFound",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "",
         "        If (TokenizerData.bLineIsReady = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        \/\/ Note: The sKeywords string must be separated by \"|\" _and_ end with a \"|\".",
         "        Get _IsKeywordInLine (CS_DfTrue + \"|\" + CS_DfFalse + \"|\" ) TokenizerData.asLineTokensLC to bFound",
         "        If (bFound = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        While (bFound = True)",
         "            Move (Pos(Lowercase(CS_DfTrue), Lowercase(sLine))) to iPos",
         "            If (iPos > 0) Begin",
         "                Get _ReplaceLineToken TokenizerData sLine CS_DfTrue CS_True to sLine",
         "            End",
         "            Move (iPos > 0) to bFound",
         "            Move (Pos(Lowercase(CS_DfFalse), Lowercase(sLine))) to iPos",
         "            If (iPos > 0) Begin",
         "                Get _ReplaceLineToken TokenizerData sLine CS_DfFalse CS_False to sLine",
         "            End",
         "            If (bFound = False) Begin",
         "                Move (iPos > 0) to bFound",
         "            End",
         "        Loop",
         "",
         "        Function_Return True",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeGetAddress",
       "iSourceLines": 34,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Changes 'GetAddress of sVal to aAddress --> Move (AddressOf(sVal)) to aAddress'",
         "    \/\/ For the function to do anything, the line needs to contain a \"GetAddress\" command.",
         "    Function ChangeGetAddress String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bFound",
         "        String sText sToVar sOfVar sCommand",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Move sLine to sText",
         "",
         "        If (TokenizerData.bLineIsReady = True or TokenizerData.bHasEndSemiColon = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        If (TokenizerData.bIsInFunction = True or TokenizerData.bIsInProcedure = True ) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Get _IsKeywordInLine (CS_GetAddress + \"|\") TokenizerData.asLineTokensLC to bFound",
         "        If (bFound = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        If (TokenizerData.sEndComment <> \"\") Begin",
         "            Move (TokenizerData.sIndentation + CS_Move * \"(\" + CS_AddressOf + \"(\" + TokenizerData.OfStatement.sCode + \"))\" * CS_To * String(TokenizerData.ToStatement.sCode) * String(TokenizerData.sEndComment)) to sLine",
         "        End",
         "        Else Begin",
         "            Move (TokenizerData.sIndentation + CS_Move * \"(\" + CS_AddressOf + \"(\" + TokenizerData.OfStatement.sCode + \"))\" * CS_To * String(TokenizerData.ToStatement.sCode)) to sLine",
         "        End",
         "",
         "        Function_Return True",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeIndicateCommand",
       "iSourceLines": 42,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Changes e.g. \"Indicate Found as True\" --> \"Move (True) to Found\"",
         "    \/\/              \"[Select] Indicate Select as Windowindex Eq Fieldindex\" --> Move (WindowInex = FieldIndex) to Select",
         "    Function ChangeIndicateCommand String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bIsCommentLineOrBlank bIsParanthesis",
         "        String sText sVariable sExpression sIndicate sChar",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Move False to bChanged",
         "",
         "        Get pTokenizer to TokenizerData",
         "        If (TokenizerData.bLineIsReady = True) Begin",
         "            Function_Return False",
         "        End",
         "        If (TokenizerData.IndicatorInfo.bHasIndicateCommand = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move (Ltrim(Lowercase(sText))) to sText",
         "        Move (Pos(\" \", TokenizerData.sLine)) to iPos",
         "\/\/        Move (Left(TokenizerData.sCode, (iPos -1))) to sIndicate",
         "\/\/        Move (Pos(\" \", TokenizerData.sCode)) to iPos \/\/ Indicate (a < b) as False",
         "\/\/        Move (Left(TokenizerData.sCode, (iPos -1))) to sText \/\/   (a < b) as False",
         "\/\/        Move (Replace(sText, TokenizerData.sCode, \"\")) to TokenizerData.sCode",
         "\/\/        Move (Trim(TokenizerData.sCode)) to TokenizerData.sCode",
         "\/\/        Move (Pos((\" \" + Lowercase(CS_As) + \" \"), Lowercase(TokenizerData.sCode))) to iPos",
         "\/\/        Move (Left(TokenizerData.sCode, (iPos -1))) to sExpression \/\/ (a < b)",
         "\/\/        Move (Replace(sExpression, TokenizerData.sCode, \"\")) to TokenizerData.sCode \/\/  as False",
         "\/\/        Move (Pos((\" \" + Lowercase(CS_As) + \" \"), Lowercase(TokenizerData.sCode))) to iPos",
         "\/\/        Move (Mid(TokenizerData.sCode, Length(TokenizerData.sCode), (iPos + Length(CS_As) + 2))) to sVariable",
         "        Move (Left(sVariable, 1)) to sChar",
         "        Move (sChar = \"(\") to bIsParanthesis",
         "        If (bIsParanthesis = False) Begin",
         "            Move (TokenizerData.sIndentation + CS_Move * \"(\" + String(sVariable) + \")\" * CS_To * String(sExpression) + TokenizerData.sEndComment) to sLine",
         "        End",
         "        Else Begin",
         "            Move (TokenizerData.sIndentation + CS_Move * String(sVariable) * CS_To * String(sExpression) + TokenizerData.sEndComment) to sLine",
         "        End",
         "",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeIndicatorToMoveStateToVariable",
       "iSourceLines": 136,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ ToDo: Needs to be revised!",
         "    \/\/ Changes:",
         "    \/\/     [Select] Indicate Select as Windowindex Eq Fieldindex \/\/ End comment",
         "    \/\/ --> If (Select) Move (Windowindex = Fieldindex) to Select \/\/ End comment",
         "    Function ChangeIndicatorToMoveStateToVariable String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bIsCommentLineOrBlank bIsParanthesis bStartIndicator bFound bIsIfStatement",
         "        String sText sVariable sExpression sIndicator sChar sOrgLine sIfStatement sCommand",
         "        Integer iPos iStart iEnd",
         "        tBooleanIndicator BooleanIndicator",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        If (TokenizerData.bLineIsReady = True) Begin",
         "            Function_Return False",
         "        End",
         "        If (TokenizerData.bIsInCommand = True) Begin",
         "            Function_Return False",
         "        End",
         "        \/\/ While, Repeat, Loop and Until are delt with by other functions.",
         "        Get _HasBeginStatement TokenizerData.sOverstrikeLine to bFound",
         "        If (Lowercase(TokenizerData.FirstLeftCommand.sCode) = Lowercase(CS_Begin) = True or Lowercase(TokenizerData.SecondLeftCommand.sCode) = Lowercase(CS_Begin) = True) Begin",
         "            Function_Return False",
         "        End",
         "        If (Lowercase(TokenizerData.FirstLeftCommand.sCode) = Lowercase(CS_Repeat) = True or Lowercase(TokenizerData.SecondLeftCommand.sCode) = Lowercase(CS_Repeat) = True) Begin",
         "            Function_Return False",
         "        End",
         "        If (Lowercase(TokenizerData.FirstLeftCommand.sCode) = Lowercase(CS_Loop) = True or Lowercase(TokenizerData.SecondLeftCommand.sCode) = Lowercase(CS_Loop) = True) Begin",
         "            Function_Return False",
         "        End",
         "        If (Lowercase(TokenizerData.FirstLeftCommand.sCode) = Lowercase(CS_Until) = True or Lowercase(TokenizerData.SecondLeftCommand.sCode) = Lowercase(CS_Until) = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move False to bChanged",
         "        Move sLine to sText",
         "        Move sLine to sOrgLine",
         "        Get _RetrieveFirstToken TokenizerData.sOverstrikeLine to sIfStatement",
         "        Move (Lowercase(sIfStatement) = Lowercase(CS_If)) to bIsIfStatement",
         "        If (bIsIfStatement = True) Begin",
         "            Move \"\" to sIfStatement",
         "        End",
         "",
         "        If (TokenizerData.IndicatorInfo.bHasBracket = False and TokenizerData.IndicatorInfo.bHasIndicateCommand = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        \/\/ ToDo: Review after the Tokenizer has been finished!",
         "        \/\/ There are other function dealing with loop, while & move statements.",
         "        Get _IsRepeatStatement TokenizerData.sOverstrikeLine to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "        Get _HasBeginStatement TokenizerData.sOverstrikeLine to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "        Get _IsMoveCommand TokenizerData.sOverstrikeLine to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        \/\/ ToDo: Review after the tokenizer is finalized!",
         "        \/\/ I have commented out several lines below to be able to remove the tBooleanIndicator sCode menber.",
         "        If (Lowercase(TokenizerData.FirstLeftCommand.sCode) contains Lowercase(CS_Indicate)) Begin",
         "            Move (Pos(Lowercase(\" \" + CS_As + \" \"), Lowercase(TokenizerData.sOverstrikeLine))) to iEnd",
         "            If (iEnd <> 0) Begin",
         "                Move (Pos(Lowercase(CS_Indicate + \" \"), Lowercase(TokenizerData.sOverstrikeLine))) to iStart",
         "                Move (Left(TokenizerData.sOverstrikeLine, (iStart + Length(CS_Indicate)))) to sText",
         "\/\/                Move (Replace(sText, BooleanIndicator.sCode, \"\")) to BooleanIndicator.sCode",
         "\/\/                Move (Pos(Lowercase(CS_As + \" \"), Lowercase(BooleanIndicator.sCode))) to iPos",
         "\/\/                Move (Left(BooleanIndicator.sCode, (iPos - 1))) to sIndicator",
         "\/\/                Move (Replace(sIndicator, BooleanIndicator.sCode, \"\")) to BooleanIndicator.sCode",
         "\/\/                Move (Pos(Lowercase(\" \" + CS_As + \" \"), Lowercase(BooleanIndicator.sCode))) to iPos",
         "\/\/                Move (Mid(BooleanIndicator.sCode, Length(BooleanIndicator.sCode), (iPos + 1 + Length(CS_As)))) to BooleanIndicator.sCode",
         "\/\/                Move (Trim(sIndicator)) to sIndicator",
         "\/\/                Move (String(CS_Move) * Trim(BooleanIndicator.sCode) * CS_To * String(sIndicator)) to BooleanIndicator.sCode",
         "\/\/                Get _HasLegacyOperators BooleanIndicator.sCode to bFound",
         "                If (bFound = True) Begin",
         "                    Move TokenizerData.sLeftExpression1 to sText",
         "                    Get _AddExpressionParenthesis TokenizerData (&sText) to bFound",
         "\/\/                    If (bFound = True) Begin",
         "\/\/                        Move sText to BooleanIndicator.sExpression",
         "\/\/                    End",
         "                End",
         "            End",
         "        End",
         "",
         "        If (bIsIfStatement = True) Begin",
         "            Get _RetrieveFirstToken (&TokenizerData) to sCommand",
         "            If (Lowercase(sCommand) = Lowercase(CS_If)) Begin",
         "\/\/                Move (String(TokenizerData.sIndentation) + String(BooleanIndicator.sExpression) * String(BooleanIndicator.sCode)) to sLine",
         "            End",
         "            Else Begin",
         "\/\/                Move (String(TokenizerData.sIndentation) + String(CS_If) * String(BooleanIndicator.sExpression) * String(BooleanIndicator.sCode)) to sLine",
         "            End",
         "        End",
         "\/\/        Else If (BooleanIndicator.sExpression <> \"\" or BooleanIndicator.sCode <> \"\") Begin",
         "\/\/            If (Left(BooleanIndicator.sExpression, 1) = \"(\") Begin",
         "\/\/                If (TokenizerData.LeftMostIndicator.sCode <> \"\") Begin",
         "\/\/                    If (Left(TokenizerData.LeftMostIndicator.sCode, 1) <> \"(\") Begin",
         "\/\/                        Move (\"(\" + String(TokenizerData.LeftMostIndicator.sCode) + \")\") to TokenizerData.LeftMostIndicator.sCode",
         "\/\/                    End",
         "\/\/                    Move (CS_If * String(TokenizerData.LeftMostIndicator.sCode)) to sLine",
         "\/\/                    Move BooleanIndicator.sCode to sText",
         "\/\/                    Get _AddExpressionParenthesis TokenizerData (&sText) to bFound  \/\/ XXXX",
         "\/\/                    If (bFound = True) Begin",
         "\/\/                        Move sText to BooleanIndicator.sCode",
         "\/\/                    End",
         "\/\/                    Move (String(sLine) * String(BooleanIndicator.sCode)) to BooleanIndicator.sCode",
         "\/\/                    Move \"\" to BooleanIndicator.sExpression",
         "\/\/                End",
         "\/\/                Else Begin",
         "\/\/                    Move (CS_If * String(BooleanIndicator.sExpression)) to sLine",
         "\/\/                    Move (String(TokenizerData.sIndentation) + String(sLine) + String(BooleanIndicator.sExpression) * String(BooleanIndicator.sCode)) to sLine",
         "\/\/                End",
         "\/\/            End",
         "\/\/            If (BooleanIndicator.sExpression <> \"\") Begin",
         "\/\/                Move (String(TokenizerData.sIndentation) + String(BooleanIndicator.sExpression) * String(BooleanIndicator.sCode)) to sLine",
         "\/\/            End",
         "\/\/            Else Begin",
         "\/\/                Move (String(TokenizerData.sIndentation) + String(BooleanIndicator.sCode)) to sLine",
         "\/\/            End",
         "\/\/        End",
         "",
         "        If (TokenizerData.OfStatement.sCode <> \"\") Begin",
         "            Move (String(sLine) * CS_Of * String(TokenizerData.OfStatement.sCode)) to sLine",
         "        End",
         "        If (TokenizerData.ToStatement.sCode <> \"\") Begin",
         "            Move (String(sLine) * CS_To * String(TokenizerData.ToStatement.sCode)) to sLine",
         "        End",
         "        If (TokenizerData.sEndComment <> \"\") Begin",
         "            Move (String(sLine) * String(TokenizerData.sEndComment)) to sLine",
         "        End",
         "        Function_Return (sLine <> sOrgLine)",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeInsertCommandToFunction",
       "iSourceLines": 45,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Changes: Insert \",\" In sText At 2 --> Move (Inert(\",\", sText, 2)) to sText",
         "    Function ChangeInsertCommandToFunction String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bIsCommentOrBlank bIsReplace",
         "        String sText sStart sStop sVariableName sPlace sChar",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Move sLine to sText",
         "        \/\/ Check if this is a comment line, in case we do nothing.",
         "        Get _IsCommentLineOrBlank sText to bIsCommentOrBlank",
         "        If (bIsCommentOrBlank = True) Begin",
         "            Function_Return False",
         "        End",
         "        Move (Ltrim(sText)) to sText",
         "        Move (Pos(Lowercase(CS_Insert + \" \"), Lowercase(sText))) to iPos",
         "        If (iPos < 1) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        \/\/ Also check that the keyword is not part of a variable name:",
         "        Move (Mid(sText, 1, (iPos -1))) to sChar",
         "        If (sChar <> \" \" and sChar <> \"(\") Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Get _SingleCommandSyntaxToFunction (&sLine) CS_Insert to bChanged",
         "        Get pTokenizer to TokenizerData",
         "        Move (Replace(TokenizerData.sIndentation, sLine, \"\")) to sLine",
         "        Get _StripConcatenatingSpaces sLine to sLine",
         "        Move (Lowercase(sLine)) to sText",
         "        Move (Pos(Lowercase(\" \" + CS_In + \" \"), sText)) to iPos",
         "        Move (Overstrike(\"||||\", sLine, iPos)) to sLine",
         "        Move (Replace(\"||||\", sLine, \", \")) to sLine",
         "        Move (Mid(sLine, Length(sLine), (iPos + 2))) to sStop",
         "        Move (Pos(\" \", sStop)) to iPos",
         "        Move (Left(sStop, (iPos -1))) to sVariableName",
         "        Move (Lowercase(sLine)) to sText",
         "        Move (Pos(Lowercase(\" \" + CS_At + \" \"), sText)) to iPos",
         "        Move (Overstrike(\"||||\", sLine, iPos)) to sLine",
         "        Move (Replace(\"||||\", sLine, \", \")) to sLine",
         "",
         "        Move (TokenizerData.sIndentation + String(sLine) * String(sVariableName)) to sLine",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeInToContains",
       "iSourceLines": 84,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Replaces 'IN' with 'Contains",
         "    Function ChangeInToContains String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bIsPosCommand bIsCommentOrBlank bFound",
         "        String sPattern sOrg",
         "        String sMatched sRemain sHost sSub sText sKeyWord sStart",
         "        tRegexMatch[] myReg",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Move False to bChanged",
         "        Move sLine to sText",
         "        Move sLine to sOrg",
         "        \/\/ Check if this is a comment line, in case we do nothing.",
         "        Get _IsCommentLineOrBlank sLine to bIsCommentOrBlank",
         "        If (bIsCommentOrBlank = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move TokenizerData.sOverstrikeLine to sText",
         "        Move (Lowercase(sText)) to sText",
         "        Move (Ltrim(sText)) to sText",
         "        \/\/ First check if there is a \"In\" keyword in the source code.",
         "        Move (Lowercase((\" \" + CS_In + \" \"))) to sKeyWord",
         "        If (Pos(sKeyWord, sText) = 0) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        \/\/ Check for \"home cocked\" commands; in case we do nothing.",
         "        \/\/ If we are in a \"Pos\", \"Insert\" or \"Replace\" command line, we're done.",
         "        Get _IsKeywordInLine (CS_Pos + \"|\" + CS_Insert + \"|\" + CS_Replace + \"|\") TokenizerData.asLineTokensLC to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        If (TokenizerData.OfStatement.sCode <> \"\") Begin",
         "            Move (TokenizerData.LeftStatement.sCode * CS_Of * String(TokenizerData.OfStatement.sCode)) to sText",
         "        End",
         "        If (TokenizerData.ToStatement.sCode <> \"\") Begin",
         "            Move (TokenizerData.LeftStatement.sCode * CS_To * String(TokenizerData.ToStatement.sCode)) to sText",
         "        End",
         "",
         "        Get _RetrieveFirstToken (&TokenizerData) to sStart",
         "        Move (\" \" + Lowercase(sStart) + \" \") to sStart",
         "        Get _FindCommand (&TokenizerData) sStart to iPos",
         "        If (iPos = 0) Begin",
         "            Get _TestCommandFunctions sStart to iPos",
         "        End",
         "        If (iPos = 0) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move TokenizerData.sLine to sText",
         "        Move (Replaces('`', '(\".*\"|`.*`|\\S+)\\s+in\\s+(\".*\"|`.*`|\\S+)', \"'\")) to sPattern",
         "        Get Regex_Match sText sPattern True to myReg",
         "        If (SizeOfArray(myReg)) Begin",
         "            Move myReg[0].Val to sMatched",
         "            Move (Replaces('`', '(\".*\"|`.*`|\\S+)\\s+', \"'\")) to sPattern",
         "            Get Regex_Match sMatched sPattern True to myReg",
         "            Move (Trim(myReg[0].Val)) to sSub",
         "            Move (Trim(Replace(sSub, sMatched, ''))) to sRemain \/\/ Remove the subString",
         "            Move (Remove(sRemain,0 ,2)) to sRemain \/\/ Remove the 'In'",
         "            Move (Replaces('`', '\\s+(\".*\"|`.*`|\\S+)', \"'\")) to sPattern",
         "            Get Regex_Match sRemain sPattern True to myReg",
         "            Move (Trim(myReg[0].Val)) to sHost",
         "",
         "            Move (Replace(sMatched, sText, (\"(\" + sHost + ' contains ' + sSub + \")\"))) to sLine",
         "            If (Length(TokenizerData.sIndentation)) Begin",
         "                Move (TokenizerData.sIndentation + String(sLine)) to sLine",
         "            End",
         "            If (TokenizerData.OfStatement.sCode <> \"\") Begin",
         "                Move (String(sLine) * String(CS_Of) * String(TokenizerData.OfStatement.sCode)) to sLine",
         "            End",
         "            If (TokenizerData.ToStatement.sCode <> \"\") Begin",
         "                Move (String(sLine) * String(CS_To) * String(TokenizerData.ToStatement.sCode)) to sLine",
         "            End",
         "            If (TokenizerData.sEndComment <> \"\") Begin",
         "                Move (String(sLine) * String(TokenizerData.sEndComment)) to sLine",
         "            End",
         "        End",
         "",
         "        Function_Return (sLine <> sOrg)",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeLegacyIndicators",
       "iSourceLines": 117,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Changes legacy [Found] and [FindErr] indicator statements.",
         "    \/\/ Changes: [Found|Not Found|FindErr|Not FindErr] Command -> e.g. If (Not(Found)) Command",
         "    \/\/ Changes: While [Found|Not Found|FindErr|Not FindErr]   -> e.g. While (Not(Found))",
         "    \/\/ Changes: [Found|Not Found|FindErr|Not FindErr] While   -> e.g. While (Not(Found))",
         "    \/\/",
         "    Function ChangeLegacyIndicators String ByRef sLine String sParameter Returns Boolean",
         "        String sText sIndicator sEndString sFirstToken sEndComment sNewCode sBoolean sBooleanExpr sCommandLC",
         "        Boolean bChanged bFound bIfStart",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        If (TokenizerData.bLineIsReady = True) Begin",
         "            Function_Return False",
         "        End",
         "        If (TokenizerData.IndicatorInfo.bHasBracket = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move sLine to sText",
         "        If (TokenizerData.sEndComment <> \"\") Begin",
         "            Get _RemoveEndComment sText to sText",
         "        End",
         "        Move (Lowercase(sText)) to sText",
         "",
         "        Move TokenizerData.IndicatorInfo.FirstIndicator.sCode to sBoolean",
         "        Move (\"[\" + sBoolean + \"]\") to sIndicator",
         "        Move (Pos((Lowercase(CS_Not) + \" \"), Lowercase(sBoolean))) to iPos",
         "        Move (iPos <> 0) to TokenizerData.IndicatorInfo.bHasNot",
         "        If (TokenizerData.IndicatorInfo.bHasNot = False) Begin",
         "            Move (\"(\" + sBoolean + \")\") to sBooleanExpr",
         "        End",
         "        Else Begin",
         "            Move (Overstrike(\"####\", sBoolean, iPos)) to sBoolean",
         "            Move (Replace(\"####\", sBoolean, \"\")) to sBoolean",
         "            Move (\"(\" + CS_Not + \"(\" + sBoolean + \"))\") to sBooleanExpr",
         "        End",
         "        \/\/ Does the line start with an \"if\" statement?",
         "        Get _FirstToken sLine to sFirstToken",
         "        Move (Lowercase(CS_If) = Lowercase(sFirstToken)) to bIfStart",
         "        Move (Lowercase(TokenizerData.FirstLeftCommand.sCode)) to sCommandLC",
         "",
         "        Case Begin",
         "            Case (sCommandLC = Lowercase(CS_Reread))",
         "                If (bIfStart = False) Begin",
         "                    Move (CS_If * sBooleanExpr) to sNewCode",
         "                End",
         "                Else Begin",
         "                    Move sBooleanExpr to sNewCode",
         "                End",
         "                Move (Replace(sIndicator, sLine, sNewCode)) to sLine",
         "                Case Break",
         "            Case (sCommandLC = Lowercase(CS_Loop))",
         "                \/\/ If line has an indicator *before* the \"Loop\" command, remove it.",
         "                If (Lowercase(sIndicator) = Lowercase(sFirstToken)) Begin",
         "                    Move (Replace((sIndicator + \" \"), sLine, \"\")) to sLine",
         "                End",
         "                Case Break",
         "            Case (sCommandLC = Lowercase(CS_Until))",
         "                \/\/ If line has an indicator *before* the \"Until\" command, remove it.",
         "                If (Lowercase(sIndicator) = Lowercase(sFirstToken)) Begin",
         "                    Move (Replace((sIndicator + \" \"), sLine, \"\")) to sLine",
         "                    If (TokenizerData.IndicatorInfo.SecondIndicator.sCode <> \"\") Begin",
         "                        Move (Replace(\"[\", sLine, \"(\")) to sLine",
         "                        Move (Replace(\"]\", sLine, \")\")) to sLine",
         "                    End",
         "                End",
         "                Else Begin",
         "                    Move sBooleanExpr to sNewCode",
         "                    Move (Replace(sIndicator, sLine, sNewCode)) to sLine",
         "                End",
         "                Case Break",
         "            Case (sCommandLC = Lowercase(CS_Repeat))",
         "                \/\/ If line has an indicator *before* the \"Repeat\" command, replace with a \"While (Found)\" construct.",
         "                If (Lowercase(sFirstToken) contains Lowercase(sIndicator)) Begin",
         "                    Move (Replace((sIndicator + \" \"), sLine, \"\")) to sLine",
         "                    Move sBooleanExpr to sNewCode",
         "                    Move (TokenizerData.sIndentation + CS_While * String(sNewCode)) to sLine",
         "                    If (Length(TokenizerData.sEndComment) <> 0) Begin",
         "                        Append sLine \" \"  TokenizerData.sEndComment",
         "                    End",
         "                End",
         "                Case Break",
         "            Case (sCommandLC = Lowercase(CS_While))",
         "                \/\/ If line has an indicator *before* the \"While\" command, remove it.",
         "                If (Lowercase(sIndicator) = Lowercase(sFirstToken)) Begin",
         "                    Move (Replace((sIndicator + \" \"), sLine, \"\")) to sLine",
         "                End",
         "                If (Lowercase(sFirstToken) contains Lowercase(sIndicator)) Begin",
         "                    If (TokenizerData.sEndComment <> \"\") Begin",
         "                        Get _RemoveEndComment sLine to sLine",
         "                    End",
         "                    If ((Pos(Lowercase(sIndicator), sText)) > (Pos(sCommandLC, sText))) Begin",
         "                        Move (Replace(sIndicator, sLine, \"\")) to sLine",
         "                        Move (Rtrim(sLine)) to sLine",
         "                    End",
         "                    Append sLine \" \" sBooleanExpr",
         "                    If (TokenizerData.sEndComment <> \"\") Begin",
         "                        Append sLine \" \" TokenizerData.sEndComment",
         "                    End",
         "                End",
         "                Case Break",
         "            Case Else",
         "                If (TokenizerData.IndicatorInfo.bHasNot = False) Begin",
         "                    Move (CS_If * \"(\" + String(sBoolean) + \")\") to sNewCode",
         "                End",
         "                Else Begin",
         "                    Move (CS_If * \"(\" + (CS_Not + \"(\" + sBoolean + \"))\")) to sNewCode",
         "                End",
         "                If (Lowercase(sFirstToken) contains Lowercase(sBoolean)) Begin",
         "                    Move (Replace(sFirstToken, sLine, sNewCode)) to sLine",
         "                End",
         "        Case End",
         "",
         "        Function_Return True",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeLegacyOperators",
       "iSourceLines": 105,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Replaces \"gt, ge, lt, le, eq, ne\" with \"> >= < <= = <>\" for If-Begin lines and While statements.",
         "    \/\/ Pass only the code part of a source line.",
         "    Function ChangeLegacyOperators String ByRef sLine String sParameter Returns Boolean",
         "        String sSource sText sLeftExpression sRightExpression sStart sCommand sFirstChar sLastChar sOrg",
         "        Boolean bFound bChanged",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Move sLine to sText",
         "        Move sLine to sOrg",
         "        Get pTokenizer to TokenizerData",
         "        \/\/ Skip line if it is a comment or blank",
         "        Get _IsCommentLineOrBlank sLine to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "        \/\/ Skip line if it contains a semi colon ?? Should we??",
         "        Get _HasLineEndSemiColon TokenizerData.sOverstrikeLine to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "        Get _IsFirstWord sLine CS_Find to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "        Get _IsFirstWord sLine CS_Send to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "        Get _IsFirstWord sLine CS_Constrain to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "        Get _HasLegacyOperators (&TokenizerData) to bFound",
         "        If (bFound = False) Begin",
         "            Function_Return False",
         "        End",
         "        Move (Lowercase(sText)) to sSource",
         "",
         "        Move (Pos(\" gt \", sSource)) to iPos",
         "        While (iPos <> 0)",
         "            Move (Overstrike(\" >_ \", sText, iPos)) to sText",
         "            Move (Replace(\" >_ \", sText, \" > \")) to sText",
         "            Move (Pos(\" gt \", sText)) to iPos",
         "        Loop",
         "",
         "        Move (Pos(\" ge \", sSource)) to iPos",
         "        While (iPos <> 0)",
         "            Move (Overstrike(\" >= \", sText, iPos)) to sText",
         "            Move (Pos(\" ge \", sText)) to iPos",
         "        Loop",
         "",
         "        Move (Pos(\" lt \", sSource)) to iPos",
         "        While (iPos <> 0)",
         "            Move (Overstrike(\" <_ \", sText, iPos)) to sText",
         "            Move (Replace(\" <_ \", sText, \" < \")) to sText",
         "            Move (Pos(\" lt \", sText)) to iPos",
         "        Loop",
         "",
         "        Move (Pos(\" le \", sSource)) to iPos",
         "        While (iPos <> 0)",
         "            Move (Overstrike(\" <= \", sText, iPos)) to sText",
         "            Move (Pos(\" le \", sText)) to iPos",
         "        Loop",
         "",
         "        Move (Pos(\" eq \", sSource)) to iPos",
         "        While (iPos <> 0)",
         "            Move (Overstrike(\" =_ \", sText, iPos)) to sText",
         "            Move (Replace(\" =_ \", sText, \" = \")) to sText",
         "            Move (Pos(\" eq \", sText)) to iPos",
         "        Loop",
         "",
         "        Move (Pos(\" ne \", sSource)) to iPos",
         "        While (iPos <> 0)",
         "            Move (Overstrike(\" <> \", sText, iPos)) to sText",
         "            Move (Pos(\" ne \", sText)) to iPos",
         "        Loop",
         "",
         "        Move (String(sText) <> String(sLine)) to bChanged",
         "        If (bChanged = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        \/\/ For some reason we can get an exception error passing a struct member as",
         "        \/\/ a ByRef argument. Just moving to a local variable cures it.",
         "        Move TokenizerData.sOverstrikeLine to sText",
         "        Get _AddExpressionParenthesis TokenizerData (&sText) to bChanged",
         "        If (bChanged = True) Begin",
         "            Move sText to TokenizerData.LeftStatement",
         "        End",
         "",
         "        Move (String(TokenizerData.sIndentation + String(TokenizerData.LeftStatement.sCode))) to sLine",
         "        If (TokenizerData.OfStatement.sCode <> \"\") Begin",
         "            Move (String(sLine) * TokenizerData.OfStatement.sCode) to sLine",
         "        End",
         "        If (TokenizerData.ToStatement.sCode <> \"\") Begin",
         "            Move (String(sLine) * String(CS_To) * String(TokenizerData.ToStatement.sCode)) to sLine",
         "        End",
         "        If (TokenizerData.sEndComment <> \"\") Begin",
         "            Move (String(sLine) * String(TokenizerData.sEndComment)) to sLine",
         "        End",
         "",
         "        Function_Return (sLine <> sOrg)",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeLegacyShadow_State",
       "iSourceLines": 102,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Changes: \"Set Shadow_State [of oObject] to True\" -> \"Set Enabled_State [of oObject] to False\"",
         "    \/\/          \"Set Object_Shadow_State [of oObject] to True\" -> \"Set Enabled_State [of oObject] to False\"",
         "    Function ChangeLegacyShadow_State String ByRef sLine Returns Boolean",
         "        String sToState sText sLineLC sEndComment sSpaces",
         "        Boolean bFound bIsComment",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Get _IsCommentLineOrBlank sLine to bIsComment",
         "        If (bIsComment = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Get _IsKeywordInLine CS_Object_Shadow_State TokenizerData.asLineTokensLC to bFound",
         "        If (bFound = False) Begin",
         "            Get _IsKeywordInLine CS_Shadow_State TokenizerData.asLineTokensLC to bFound",
         "        End",
         "        If (bFound = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        If (TokenizerData.sEndComment <> \"\") Begin",
         "            Get _EndComment sLine to sEndComment",
         "            Move (Replace(sEndComment, sLine, \"\")) to sLine",
         "            Move (Rtrim(sLine)) to sText",
         "            Move (Replace(sText, sLine, \"\")) to sSpaces",
         "            Move (sSpaces + String(sEndComment)) to sEndComment",
         "        End",
         "",
         "        Move (Lowercase(sLine)) to sLineLC",
         "        Move (Pos(Lowercase(CS_Object_Shadow_State), sLineLC)) to iPos",
         "        If (iPos <> 0) Begin",
         "            Get _ReplaceLineToken TokenizerData sLine CS_Object_Shadow_State CS_Enabled_State to sLine",
         "        End",
         "        Else Begin",
         "            Move (Pos(Lowercase(CS_Shadow_State), sLineLC)) to iPos",
         "            If (iPos <> 0) Begin",
         "                Get _ReplaceLineToken TokenizerData sLine CS_Shadow_State CS_Enabled_State to sLine",
         "            End",
         "        End",
         "",
         "        \/\/ We also need to negate any \"True\" or \"False\" in the \"to\" part of the line",
         "        Move TokenizerData.ToStatement.sCode to sToState",
         "        If (Lowercase(sToState) = Lowercase(CS_True) or Lowercase(sToState) = Lowercase(CS_False)) Begin",
         "            Get _IsKeywordInLine CS_True TokenizerData.asLineTokensLC to bFound",
         "            If (bFound = True) Begin",
         "                Move (Pos(Lowercase(CS_True), sLineLC)) to iPos",
         "                If (iPos <> 0) Begin",
         "                    Get _ReplaceLineToken TokenizerData sLine CS_True CS_False to sLine",
         "                End",
         "            End",
         "            Else Begin",
         "                Get _IsKeywordInLine CS_False TokenizerData.asLineTokensLC to bFound",
         "                Move (Pos(Lowercase(CS_False), sLineLC)) to iPos",
         "                If (iPos <> 0) Begin",
         "                    Get _ReplaceLineToken TokenizerData sLine CS_False CS_True to sLine",
         "                End",
         "            End",
         "        End",
         "        \/\/ Or any self defined boolean variable at end of line:",
         "        Else Begin",
         "            Move (Pos(Lowercase(CS_Not), Lowercase(sToState))) to iPos",
         "            \/\/ Add \"not\" keyword",
         "            If (iPos = 0) Begin",
         "                Move (Replace(sToState, sLine, (\"(\" + CS_Not + \"(\" + sToState + \"))\"))) to sLine",
         "            End",
         "            \/\/ Remove \"not\" keyword and its parantheses. Note that it can contain spaces.",
         "            Else Begin",
         "                Move (Replace(\"(\", sToState, \"\")) to sText",
         "                Move (Replace(CS_Not, sText, \"\")) to sText",
         "                Move (Pos(Lowercase(CS_Not), Lowercase(sToState))) to iPos",
         "                Move (Overstrike(\"   \", sText, (iPos -1))) to sText",
         "                Move (Replace(\"(\", sText, \"\"))    to sText",
         "                Move (Replace(\"))\", sText, \"\"))   to sText",
         "                Move (Trim(sText))                to sText",
         "                Move (Pos(Lowercase(sToState), sLineLC)) to iPos",
         "                If (iPos <> 0) Begin",
         "                    Move (Left(sLine, iPos)) to sLine",
         "                    Append sLine sText",
         "                End",
         "\/\/                Move (Replace(\"(\", sToState, \"\")) to sText",
         "\/\/                Move (Replace(CS_Not, sText, \"\")) to sText",
         "\/\/                Move (Pos(Lowercase(CS_Not), Lowercase(sToState))) to iPos",
         "\/\/                Move (Overstrike(\"   \", sText, (iPos -1))) to sText",
         "\/\/                Move (Replace(\"(\", sText, \"\"))    to sText",
         "\/\/                Move (Replace(\"))\", sText, \"\"))   to sText",
         "\/\/                Move (Trim(sText))                to sText",
         "\/\/                Move (Pos(Lowercase(sToState), sLineLC)) to iPos",
         "\/\/                If (iPos <> 0) Begin",
         "\/\/                    Move (Left(sLine, (iPos - 1))) to sLine",
         "\/\/                End",
         "            End",
         "        End",
         "",
         "        If (TokenizerData.sEndComment <> \"\") Begin",
         "            Append sLine sEndComment",
         "        End",
         "",
         "        Function_Return True",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeLengthCommandToFunction",
       "iSourceLines": 6,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    Function ChangeLengthCommandToFunction String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged",
         "        Get _SingleCommandSyntaxToFunction (&sLine) CS_Length to bChanged",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangePosCommandToFunction",
       "iSourceLines": 6,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    Function ChangePosCommandToFunction String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged",
         "        Get _SingleCommandSyntaxToFunction (&sLine) CS_Pos to bChanged",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeReplaceCommandToFunction",
       "iSourceLines": 61,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Changes: Replace \",\" In sText With \".\" --> Move (Replace(\",\",sText,\".\")) to sText",
         "    Function ChangeReplaceCommandToFunction String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bFound",
         "        String sText sStart sStop sVariableName sOrg sFirstWord",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Move sLine to sOrg",
         "        Move sLine to sText",
         "        Get pTokenizer to TokenizerData",
         "        \/\/ Check if this is a comment line, in case we do nothing.",
         "        Get _IsCommentLineOrBlank sLine to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "        Get _IsKeywordInLine (CS_Replace + \"|\") TokenizerData.asLineTokensLC to bFound",
         "        If (bFound = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        \/\/ If a \"#Replace\" command line, we're done.",
         "        Move (Pos((\"#\"+ CS_Replace), TokenizerData.sOverstrikeLine)) to iPos",
         "        If (iPos <> 0) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move TokenizerData.sOverstrikeLine to sLine",
         "        Move (Lowercase(sLine)) to sText",
         "",
         "        Get _RetrieveFirstToken (&TokenizerData) to sFirstWord",
         "        If (Lowercase(sFirstWord) = Lowercase(CS_Replace)) Begin",
         "            \/\/ ToDo: *** !!!!",
         "            Get _RemoveFirstToken sLine to sLine",
         "            Get _RemoveFirstToken sText to sText",
         "        End",
         "",
         "        Move (Pos(Lowercase(\" \" + CS_In + \" \"), sText)) to iPos",
         "        Move (Overstrike(\"||||\", sLine, iPos)) to sLine",
         "        Move (Mid(sLine, Length(sLine), (iPos + Length(\" \" + CS_In + \" \")))) to sStop",
         "        Move (Pos(\" \", sStop)) to iPos",
         "        Move (Left(sStop, (iPos -1))) to sVariableName",
         "        Move (Replace(\"||||\", sLine, \", \")) to sLine",
         "        Move (Lowercase(sLine)) to sText",
         "        Move (Pos(Lowercase(\" \" + CS_With + \" \"), sText)) to iPos",
         "        Move (Overstrike(\"||||||\", sLine, iPos)) to sLine",
         "        Move (Replace(\"||||||\", sLine, \", \")) to sLine",
         "",
         "        Move (CS_Move * \"(\" + CS_Replace + \"(\" + String(sLine)) to sLine",
         "\/\/        Get pTokenizer to TokenizerData",
         "\/\/        Get _AddExpressionParenthesis TokenizerData (&sLine) to bChanged",
         "        If (Lowercase(sFirstWord) = Lowercase(CS_Replace)) Begin",
         "            Move (sLine + \"))\") to sLine",
         "        End",
         "",
         "        Move (TokenizerData.sIndentation + String(sLine) * CS_To * String(sVariableName)) to sLine",
         "        If (TokenizerData.sEndComment <> \"\") Begin",
         "            Move (String(sLine) * String(TokenizerData.sEndComment)) to sLine",
         "        End",
         "        Function_Return (sLine <> sOrg)",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeSysdate4",
       "iSourceLines": 28,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Changes the command \"Sysdate4\" -> \"Sysdate\", as the SysDate4 command is obsolete.",
         "    Function ChangeSysdate4 String ByRef sLine String sParameter Returns Boolean",
         "        String sText",
         "        Boolean bFound",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "        tToken Token",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Get _IsCommentLineOrBlank sLine to bFound",
         "        If (TokenizerData.bLineIsReady = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move TokenizerData.FirstLeftCommand to Token",
         "        Move (Lowercase(Token.sCode) = Lowercase(CS_Sysdate4)) to bFound",
         "        If (bFound = False) Begin",
         "            Move TokenizerData.SecondLeftCommand to Token",
         "            Move (Lowercase(Token.sCode) = Lowercase(CS_Sysdate4)) to bFound",
         "            If (bFound = False) Begin",
         "                Function_Return False",
         "            End",
         "        End",
         "",
         "        Move (Replace(\"4\", sLine, \"\")) to sLine",
         "        Function_Return True",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeTrimCommandToFunction",
       "iSourceLines": 38,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Example: Trim sVal to sVal -> Move (Trim(sVal)) to sVal",
         "    Function ChangeTrimCommandToFunction String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bFound",
         "        Integer iItem iPos",
         "        tTokenizer TokenizerData",
         "        String sVarName sKeyword sKeywordLC sLineLC",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Get _IsCommentLineOrBlank sLine to bFound",
         "        If (TokenizerData.bLineIsReady = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Get _IsKeywordInLine CS_Trim TokenizerData.asLineTokensLC to bFound",
         "        If (bFound = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move False to bChanged",
         "        Move CS_Trim              to sKeyword",
         "        Move (Lowercase(CS_Trim)) to sKeywordLC",
         "        Move (Lowercase(sLine))   to sLineLC",
         "        Move (SearchArray(sKeywordLC, TokenizerData.asLineTokensLC)) to iItem",
         "        Move TokenizerData.asLineTokens[iItem + 1] to sVarName",
         "        If (sVarName = \"\") Begin",
         "            Function_Return False",
         "        End",
         "        Move (Pos(sKeywordLC, sLineLC)) to iPos",
         "        If (iPos <> 0) Begin",
         "            Move (Replace(sKeyword, sLine, \"\")) to sLine",
         "            Move (Replace(\" \" + sVarName + \" \", sLine, \"\")) to sLine",
         "            Move (Insert(CS_Move + \" (\" + CS_Trim + \"(\" + String(sVarName) + \")) \", sLine, iPos)) to sLine",
         "            Move True to bChanged",
         "        End",
         "",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeUClassToRefClass",
       "iSourceLines": 36,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Rewrites Get Create U_Class to Get Create (RefClass(Class))",
         "    Function ChangeUClassToRefClass String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bValid bIgnore",
         "        String sTest sClassName sOldStyle sNewStyle",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Move False to bChanged",
         "        Move \"\" to sClassName",
         "        Move (Lowercase(sLine)) to sTest",
         "        Move (Replaces(Character(9), sTest, \" \")) to sTest \/\/ tab",
         "        Get _StripConcatenatingSpaces sTest to sTest",
         "        \/\/ Two lines which are mostly for protection when running DfRefactor on the DfRefactor code itself",
         "        Get _RemoveComments (&sTest)     to bIgnore \/\/ Don't rewrite this in a comment",
         "        Get _RemoveStringsFromLine sTest to sTest   \/\/ If this is in a string then obviously leave it alone too",
         "        If (Pos(\" create u_\", sTest)) Begin",
         "            Move (Lowercase(sLine)) to sTest",
         "            Move (Pos(\"u_\", sTest)) to iPos",
         "            Get _IsValidClassCharacter sTest iPos to bValid",
         "            While (bValid)",
         "                Move (sClassName + Mid(sLine, 1, iPos)) to sClassName",
         "                Increment iPos",
         "                Get _IsValidClassCharacter sTest iPos to bValid",
         "            Loop",
         "        End",
         "        If (sClassName <> \"\") Begin",
         "            Move True to bChanged",
         "            Move sClassName to sOldStyle",
         "            Move (Right(sClassName, Length(sClassName) - 2)) to sClassName \/\/ strip away the \"U_\"",
         "            Move (\"(RefClass(\" + sClassName + \"))\") to sNewStyle",
         "            Move (Replace(sOldStyle, sLine, sNewStyle)) to sLine",
         "        End",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ChangeZeroStringCommandToFunction",
       "iSourceLines": 8,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    Function ChangeZeroStringCommandToFunction String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged",
         "        tTokenizer TokenizerData",
         "        Get pTokenizer to TokenizerData",
         "        Get _SingleCommandSyntaxToFunction sLine CS_ZeroString to bChanged",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "EditorDropSelf",
       "iSourceLines": 20,
       "CodeArray": [
         "    \/\/ *** EDITOR FUNCTION ***",
         "    \/\/ Pass the *full* source file as a string array",
         "    Function EditorDropSelf String[] ByRef asSourceFile String sParameter Returns Integer",
         "        Handle hoEditor",
         "        Integer iRetval",
         "",
         "        Send SaveErrorState",
         "        Move False to Err",
         "        Get phoEditor to hoEditor",
         "        If (hoEditor = 0) Begin",
         "            Send UserError \"phoEditor = 0 (Function: EditorDropSelf)\"",
         "            Function_Return 0",
         "        End",
         "        Send RefactorDropSelf of hoEditor",
         "        Else Begin",
         "            Move 1 to iRetval",
         "        End",
         "        Send RestoreErrorState",
         "        Function_Return iRetval",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "EditorNormalizeCase",
       "iSourceLines": 26,
       "CodeArray": [
         "    \/\/ *** EDITOR FUNCTION ***",
         "    \/\/ Wrapper functions for the cScintillaEdit editor",
         "    \/\/ Note that a full visible instantiation of the cScintillaEdit class",
         "    \/\/ should be used for usage, and the phoEditor property for that",
         "    \/\/ object _must_ be set to that editor object id.",
         "    \/\/",
         "    Function EditorNormalizeCase String[] ByRef asSourceFile String sParameter Returns Integer",
         "        Handle hoEditor",
         "        Integer iRetval",
         "",
         "        Send SaveErrorState",
         "        Get phoEditor to hoEditor",
         "        If (hoEditor = 0) Begin",
         "            Send UserError \"phoEditor = 0 (Function: EditorNormalizeCase)\"",
         "            Function_Return 0",
         "        End",
         "        Send RefactorNormalizeCase of hoEditor",
         "        If (Err = True) Begin",
         "            Move 0 to iRetval",
         "        End",
         "        Else Begin",
         "            Move 1 to iRetval",
         "        End",
         "        Send RestoreErrorState",
         "        Function_Return iRetval",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "EditorReIndent",
       "iSourceLines": 22,
       "CodeArray": [
         "    \/\/ *** EDITOR FUNCTION ***",
         "    Function EditorReIndent String[] ByRef asSourceFile String sParameter Returns Integer",
         "        Handle hoEditor",
         "        Integer iRetval",
         "",
         "        Send SaveErrorState",
         "        Get phoEditor to hoEditor",
         "        If (hoEditor = 0) Begin",
         "            Send UserError \"phoEditor = 0 (Function: EditorReIndent)\"",
         "            Function_Return 0",
         "        End",
         "        Set piTabSize of hoEditor to sParameter",
         "        Send RefactorReIndent of hoEditor",
         "        If (Err = True) Begin",
         "            Move 0 to iRetval",
         "        End",
         "        Else Begin",
         "            Move 1 to iRetval",
         "        End",
         "        Send RestoreErrorState",
         "        Function_Return iRetval",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemoveEndComments",
       "iSourceLines": 69,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Removes end of line comments for: End_Class, End_Object, End_Function & End_Procedure",
         "    Function RemoveEndComments String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bFound",
         "        String  sTestLine sTest",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Move False to bChanged",
         "        Move (LTrim(sLine)) to sTestLine",
         "        Move (Lowercase(sTestLine)) to sTestLine",
         "        Get _IsCommentLineOrBlank sLine to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move False to bFound",
         "        \/\/ We check both for a space between the key word and the comment _and_",
         "        \/\/ comments placed directly after the key word _without_ a space between, aka \"end_object\/\/this is a comment\"",
         "        \/\/",
         "        \/\/ end_class:",
         "        Move (Left(sTestLine, 10)) to sTest",
         "        Move (sTest = Lowercase(CS_EndClass) + \" \") to bFound",
         "        If (bFound = False) Begin",
         "            Move (Left(sTestLine, 11)) to sTest",
         "            Move (sTest = (Lowercase(CS_EndClass) + CS_CommentSymbol)) to bFound",
         "        End",
         "        If (bFound = True) Begin",
         "            Get _RemoveComments (&sLine) to bChanged",
         "            Function_Return bChanged",
         "        End",
         "",
         "        \/\/ end_object:",
         "        Move (Left(sTestLine, 11)) to sTest",
         "        Move (sTest = Lowercase(CS_EndObject) + \" \") to bFound",
         "        If (bFound = False) Begin",
         "            Move (Left(sTestLine, 12)) to sTest",
         "            Move (sTest = (Lowercase(CS_EndObject) + CS_CommentSymbol)) to bFound",
         "        End",
         "        If (bFound = True) Begin",
         "            Get _RemoveComments (&sLine) to bChanged",
         "            Function_Return bChanged",
         "        End",
         "",
         "        \/\/ end_function:",
         "        Move (Left(sTestLine, 13)) to sTest",
         "        Move (sTest = Lowercase(CS_EndFunction) + \" \") to bFound",
         "        If (bFound = False) Begin",
         "            Move (Left(sTestLine, 14)) to sTest",
         "            Move (sTest = (Lowercase(CS_EndFunction) + CS_CommentSymbol)) to bFound",
         "        End",
         "        If (bFound = True) Begin",
         "            Get _RemoveComments (&sLine) to bChanged",
         "            Function_Return bChanged",
         "        End",
         "",
         "        \/\/ end_procedure:",
         "        Move (Left(sTestLine, 14)) to sTest",
         "        Move (sTest = Lowercase(CS_EndProcedure) + \" \") to bFound",
         "        If (bFound = False) Begin",
         "            Move (Left(sTestLine, 15)) to sTest",
         "            Move (sTest = (Lowercase(CS_EndProcedure) + CS_CommentSymbol)) to bFound",
         "        End",
         "        If (bFound = True) Begin",
         "            Get _RemoveComments (&sLine) to bChanged",
         "        End",
         "",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemoveLocalKeyWord",
       "iSourceLines": 37,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Removes local statement if present.",
         "    Function RemoveLocalKeyWord String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bFound bVariableDeclaration bLocalVariableArrayDeclaration",
         "        String sText",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Move sLine to sText",
         "        Get _IsCommentLineOrBlank sLine to bFound",
         "        If (bFound = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Get _IsVariableDeclarationLine  of ghoRefactorFunctionLibrary TokenizerData.sOverstrikeLine  to bVariableDeclaration",
         "        Get _IsVariableArrayDeclaration of ghoRefactorFunctionLibrary TokenizerData.sOverstrikeLine to bLocalVariableArrayDeclaration",
         "        If (bVariableDeclaration = False and bLocalVariableArrayDeclaration = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move False to bChanged",
         "        Move (LTrim(sLine)) to sText",
         "        Move (Left(sText, 6)) to sText",
         "        Move (Lowercase(sText)) to sText",
         "        If (sText = (Lowercase(CS_Local) + \" \")) Begin",
         "            \/\/ local must be the first word on the line.",
         "            \/\/ Now find the local statement and remove it.",
         "            Move (Lowercase(sLine)) to sText",
         "            Move (Pos((Lowercase(CS_Local) + \" \"), sText)) to iPos",
         "            If (iPos > 0) Begin",
         "                Move (Remove(sLine, iPos, 6)) to sLine",
         "                Move True to bChanged",
         "            End",
         "        End",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemoveMultipleBlankLines",
       "iSourceLines": 57,
       "CodeArray": [
         "    \/\/ *** FULL SOURCE FILE FUNCTION ***",
         "    \/\/ Pass the whole source file as a string array.",
         "    \/\/ Removes  consecutive empty blank lines if more than piMaxNoOfEmptyLines.",
         "    \/\/ Returns the passed string array but with removed duplicated empty lines.",
         "    Function RemoveMultipleBlankLines String[] ByRef asSourceFile String sParameter Returns Integer",
         "        String[] asSourceFileOut",
         "        Integer iCount iSize iCurrentNoOfEmptyLines iEmptyLines iMaxNoOfEmptyLines",
         "        String sLine",
         "        Boolean bImageStart bImageEnd bMakeImageTest",
         "",
         "        Move False to bImageStart",
         "        Move False to bImageEnd",
         "        Move True  to bMakeImageTest",
         "        Move 0 to iCurrentNoOfEmptyLines",
         "        Move sParameter to iMaxNoOfEmptyLines",
         "",
         "        Move (SizeOfArray(asSourceFile)) to iSize",
         "        Decrement iSize",
         "",
         "        For iCount from 0 to iSize",
         "            Move (Trim(asSourceFile[iCount])) to sLine",
         "",
         "            If (bMakeImageTest = True) Begin",
         "                If (bImageStart = False and bImageEnd = False) Begin",
         "                    Get _IsImagePageStartOrEnd sLine True to bImageStart",
         "                End",
         "            End",
         "",
         "            If (bImageStart = False and bImageEnd = False) Begin",
         "                If (sLine = \"\") Begin",
         "                    Increment iCurrentNoOfEmptyLines",
         "                End",
         "                Else Begin",
         "                    Move 0 to iCurrentNoOfEmptyLines",
         "                End",
         "            End",
         "            If (iCurrentNoOfEmptyLines <= iMaxNoOfEmptyLines) Begin",
         "                Move asSourceFile[iCount] to asSourceFileOut[SizeOfArray(asSourceFileOut)]",
         "            End",
         "",
         "            If (bMakeImageTest = True) Begin",
         "                If (bImageStart = True) Begin",
         "                    Get _IsImagePageStartOrEnd sLine False to bImageEnd",
         "                    If (bImageEnd = True) Begin",
         "                        Move False to bImageStart",
         "                        Move False to bImageEnd",
         "                        Move False to bMakeImageTest",
         "                    End",
         "                End",
         "            End",
         "        Loop",
         "",
         "        Move (SizeOfArray(asSourceFile) - SizeOfArray(asSourceFileOut)) to iEmptyLines",
         "        Move asSourceFileOut to asSourceFile",
         "",
         "        Function_Return iEmptyLines",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemoveOldStudioMarkers",
       "iSourceLines": 112,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Returns True if a legacy IDE (Studio) source code marker is found.",
         "    \/\/ This is a \"Remove Type Function\".",
         "    Function RemoveOldStudioMarkers String sLine Returns Boolean",
         "        Boolean bFound",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Move False to bFound",
         "        Move (Trim(sLine)) to sLine",
         "",
         "        Case Begin",
         "            Case (sLine = \"\/\/AB-IgnoreStart\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-IgnoreEnd\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-StoreStart\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-StoreEnd\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-StoreTopStart\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-StoreTopEnd\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-PanelStoreTopStart\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-PanelStoreTopEnd\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-PanelStoreStart\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-PanelStoreEnd\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-ClientStoreTopStart\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-ClientStoreTopEnd\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-ClientStoreStart\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-ClientStoreEnd\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-DDOStart\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-DDOEnd\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (Left(sLine, 6) = \"\/\/AB\/ \")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-MenuPackage\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-End\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-ToolbarPackage\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-ViewStart\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-ViewEnd\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/AB-StatusBarPackage\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "            Case (sLine = \"\/\/IDE-FileType=ftApplication\")",
         "                Move True to bFound",
         "                Case Break",
         "",
         "        Case End",
         "",
         "        Function_Return bFound",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemoveProjectObjectStructure",
       "iSourceLines": 41,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    Function RemoveProjectObjectStructure String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bWriteLine bRegisterAllObjectsStart bRegisterAllObjectsEnd",
         "        Boolean bProjectObjectStructureStart bProjectObjectStructureEnd",
         "        Move False to bWriteLine",
         "        String[] asObjectNames",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Get pbRegisterAllObjectsStart     to bRegisterAllObjectsStart",
         "        Get pbRegisterAllObjectsEnd       to bRegisterAllObjectsEnd",
         "        Get pbProjectObjectStructureStart to bProjectObjectStructureStart",
         "        Get pbProjectObjectStructureEnd   to bProjectObjectStructureEnd",
         "        Get pasObjectNames                to asObjectNames",
         "",
         "        If (bRegisterAllObjectsEnd = False) Begin",
         "            If (bRegisterAllObjectsStart = False) Begin",
         "                Get _IsRegisterAllObjectsStart sLine to bRegisterAllObjectsStart",
         "                Set pbRegisterAllObjectsStart       to bRegisterAllObjectsStart",
         "            End",
         "            If (bRegisterAllObjectsStart = True) Begin",
         "                Get _IsRegisterObjectInArray sLine asObjectNames to bWriteLine",
         "                Move False to bProjectObjectStructureStart",
         "                Set           pbProjectObjectStructureStart to False",
         "            End",
         "            If (bRegisterAllObjectsStart = False and bProjectObjectStructureEnd = False and bProjectObjectStructureStart = False) Begin",
         "                Get _IsProjectObjectStructureStart sLine to bProjectObjectStructureStart",
         "                Set pbProjectObjectStructureStart       to bProjectObjectStructureStart",
         "            End",
         "            If (bProjectObjectStructureStart = True) Begin",
         "                Get _IsProjectObjectStructureLine sLine (&asObjectNames) to bWriteLine",
         "            End",
         "            Get _IsRegisterAllObjectsEnd sLine to bRegisterAllObjectsEnd",
         "            If (bRegisterAllObjectsEnd = True) Begin",
         "                Send ResetProjectObjectStructureProperties",
         "                \/\/ This means that we won't bother with the rest of the file.",
         "                Set pbRegisterAllObjectsEnd to True",
         "            End",
         "        End",
         "        Function_Return bWriteLine",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemovePropertyPrivate",
       "iSourceLines": 6,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    Function RemovePropertyPrivate String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged",
         "        Get _RemovePropertyPublicPrivate (&sLine) \"private\" to bChanged",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemovePropertyPublic",
       "iSourceLines": 6,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    Function RemovePropertyPublic String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged",
         "        Get _RemovePropertyPublicPrivate (&sLine) \"public\" to bChanged",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemoveSansSerif",
       "iSourceLines": 16,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ To remove hardcoded MS Sans Serif fonts if present.",
         "    Function RemoveSansSerif String sLine Returns Boolean",
         "        String sTest",
         "        Boolean bWriteLine",
         "",
         "        Move False to bWriteLine",
         "        Move (Lowercase(Trim(sLine))) to sTest",
         "        Move (Replaces(\" \", sTest, \"\"))  to sTest",
         "        Move (Replaces(\"'\", sTest, \"*\")) to sTest",
         "        Move (Replaces('\"', sTest, \"*\")) to sTest",
         "        If (sTest contains 'settypefaceto*mssansserif*') Begin",
         "            Move True to bWriteLine",
         "        End",
         "        Function_Return bWriteLine",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemoveStudioGeneratedComments",
       "iSourceLines": 71,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Removes Studio generated comments:",
         "    \/\/               \"\/\/ fires when the button is clicked\"",
         "    \/\/               \"\/\/OnChange is called on every changed character",
         "    \/\/               \"\/\/ Visual DataFlex 14.0 Client Size Adjuster",
         "    \/\/               \"\/\/ Visual DataFlex 14.0 Migration Utility,\"",
         "    \/\/               ...and so on",
         "    Function RemoveStudioGeneratedComments String ByRef sLine Returns Boolean",
         "        String sText sComment",
         "        Boolean bFound bChanged",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        Move False to bChanged",
         "        Move sLine to sText",
         "        Get _IsCommentLine sLine to bFound",
         "        If (bFound = False) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move \"fires when the button is clicked\" to sComment",
         "        Get _IsStudioGeneratedComment sLine sComment to bFound",
         "        If (bFound = True) Begin",
         "            Move \"\" to sLine",
         "            Function_Return True",
         "        End",
         "",
         "        Move \"onchange is called on every changed character\" to sComment",
         "        Get _IsStudioGeneratedComment sLine sComment to bFound",
         "        If (bFound = True) Begin",
         "            Move \"\" to sLine",
         "            Function_Return True",
         "        End",
         "",
         "        Move \"visual dataflex 14.0 client size adjuster\" to sComment",
         "        Get _IsStudioGeneratedComment sLine sComment to bFound",
         "        If (bFound = True) Begin",
         "            Move \"\" to sLine",
         "            Function_Return True",
         "        End",
         "",
         "        Move \"visual dataflex 14.0 migration utility,\" to sComment",
         "        Get _IsStudioGeneratedComment sLine sComment to bFound",
         "        If (bFound = True) Begin",
         "            Move \"\" to sLine",
         "            Function_Return True",
         "        End",
         "",
         "        Move \"If you set Current_radio you must set this after the\" to sComment",
         "        Get _IsStudioGeneratedComment sLine sComment to bFound",
         "        If (bFound = True) Begin",
         "            Move \"\" to sLine",
         "            Function_Return True",
         "        End",
         "",
         "        Move \"radio objects have been created AND after Notify_select_State has been\" to sComment",
         "        Get _IsStudioGeneratedComment sLine sComment to bFound",
         "        If (bFound = True) Begin",
         "            Move \"\" to sLine",
         "            Function_Return True",
         "        End",
         "",
         "        Move \"created. i.e. Set in bottom-code at end!!\" to sComment",
         "        Get _IsStudioGeneratedComment sLine sComment to bFound",
         "        If (bFound = True) Begin",
         "            Move \"\" to sLine",
         "            Function_Return True",
         "        End",
         "",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemoveTrailingSpaces",
       "iSourceLines": 14,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Remove trailing spaces if present.",
         "    Function RemoveTrailingSpaces String ByRef sLine Returns Boolean",
         "        Integer iBefore iAfter",
         "        Boolean bChanged",
         "        tTokenizer TokenizerData",
         "",
         "        Move (Length(sLine))     to iBefore",
         "        Move (RTrim(sLine))      to sLine",
         "        Move (Length(sLine))     to iAfter",
         "        Move (iBefore <> iAfter) to bChanged",
         "",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RemoveUnusedLocals",
       "iSourceLines": 22,
       "CodeArray": [
         "    \/\/ *** FULL SOURCE FILE FUNCTION ***",
         "    \/\/ Pass the whole source file as a string array",
         "    \/\/ Removes all unusad locally defined (in Procedures & Functions) for the",
         "    \/\/ passed string array. Returns number of removed unused local variables.",
         "    Function RemoveUnusedLocals String[] ByRef asSourceFile String sParameter Returns Integer",
         "        Handle ho",
         "        Integer iRetval",
         "        Get phoRemoveUnusedLocals to ho",
         "        If (ho = 0) Begin",
         "            Send UserError \"phoRemoveUnusedLocals = 0\"",
         "            Function_Return 0",
         "        End",
         "        Get MainProcedure of ho asSourceFile to iRetval",
         "\/\/        If (iRetval > 1) Begin",
         "\/\/            Reread SysFile",
         "\/\/                Add iRetval to SysFile.iCountUnusedLocals",
         "\/\/                SaveRecord SysFile",
         "\/\/            Unlock",
         "\/\/        End",
         "",
         "        Function_Return iRetval",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ReplaceCalcWithMoveStatement",
       "iSourceLines": 82,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ Replaces \"Calc\/MoveInt\/MoveNum\/MoveReal\/MoveStr\" statements to \"Move\" if present.",
         "    \/\/ This would compile but not work well with the ReplaceCalcWithMoveStatement function.",
         "    \/\/ ToDo: Reported by: JJ",
         "    \/\/    Procedure Testing",
         "    \/\/        \/\/ Before refactor",
         "    \/\/        String moveStr",
         "    \/\/        String s",
         "    \/\/        Move moveStr to s",
         "    \/\/",
         "    \/\/        \/\/ After refactor",
         "    \/\/        String moveStr",
         "    \/\/        String s",
         "    \/\/        Move Move to s",
         "    \/\/    End_Procedure",
         "    Function ReplaceCalcWithMoveStatement String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bChanged bFound bIsCommentOrBlank",
         "        String sTest sStart sStop",
         "        Integer iPos",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        If (TokenizerData.bLineIsReady = True) Begin",
         "            Function_Return False",
         "        End",
         "",
         "        Move (Lowercase(sLine) contains \"movestr\") to bFound",
         "        If (bFound = False) Begin",
         "            \/\/ Check if line contains one of the keywords and that none of the keywords are within quotes.",
         "            Get _IsKeywordInLine \"calc|moveint|movenum|movereal|\" TokenizerData.asLineTokensLC to bFound",
         "            If (bFound = False) Begin",
         "                Function_Return False",
         "            End",
         "        End",
         "",
         "        Move False to bChanged",
         "        Move (Lowercase(TokenizerData.sOverstrikeLine)) to sTest",
         "",
         "        Case Begin",
         "            Case (Pos(\"calc \", sTest))",
         "                Move (Pos(\"calc \", sTest))         to iPos",
         "                Move (Left(sLine, (iPos -1)))      to sStart",
         "                Move (Mid(sLine, CI_EOL, (iPos + 4))) to sStop",
         "                Move (sStart + \"Move\" + sStop)     to sLine",
         "                Move True                          to bChanged",
         "                Case Break",
         "",
         "            Case (Pos(\"moveint \", sTest))",
         "                Move (Pos(\"moveint \", sTest))      to iPos",
         "                Move (Left(sLine, (iPos -1)))      to sStart",
         "                Move (Mid(sLine, CI_EOL, (iPos + 7))) to sStop",
         "                Move (sStart + \"Move\" + sStop)     to sLine",
         "                Move True                          to bChanged",
         "                Case Break",
         "",
         "            Case (Pos(\"movenum \", sTest))",
         "                Move (Pos(\"movenum \", sTest))      to iPos",
         "                Move (Left(sLine, (iPos -1)))      to sStart",
         "                Move (Mid(sLine, CI_EOL, (iPos + 7))) to sStop",
         "                Move (sStart + \"Move\" + sStop)     to sLine",
         "                Move True                          to bChanged",
         "                Case Break",
         "",
         "            Case (Pos(\"movereal \", sTest))",
         "                Move (Pos(\"movereal \", sTest))     to iPos",
         "                Move (Left(sLine, (iPos -1)))      to sStart",
         "                Move (Mid(sLine, CI_EOL, (iPos + 8))) to sStop",
         "                Move (sStart + \"Move\" + sStop)     to sLine",
         "                Move True                          to bChanged",
         "                Case Break",
         "",
         "            Case (Pos(\"movestr \", sTest))",
         "                Move (Pos(\"movestr \", sTest))      to iPos",
         "                Move (Left(sLine, (iPos -1)))      to sStart",
         "                Move (Mid(sLine, CI_EOL, (iPos + 7))) to sStop",
         "                Move (sStart + \"Move\" + sStop)     to sLine",
         "                Move True                          to bChanged",
         "                Case Break",
         "        Case End",
         "",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "ReportUnusedSourceFiles",
       "iSourceLines": 30,
       "CodeArray": [
         "    \/\/ *** REPORT FUNCTION ***",
         "    \/\/ Makes no change to the source code.",
         "    \/\/ Pass an array with *all source files*",
         "    Function ReportUnusedSourceFiles String[] ByRef asSourceFiles String sParameter Returns Integer",
         "        Handle ho",
         "        String sFilter",
         "        Integer iRetval",
         "        tRefactorSettings RefactorSettings",
         "",
         "        Get phoReportUnusedSourceFiles to ho",
         "        If (ho = 0) Begin",
         "            Function_Return 0",
         "        End",
         "",
         "        Get pRefactorSettings to RefactorSettings",
         "        Set psFileFilter  of ho to RefactorSettings.sFileFilter",
         "\/\/        Set pasAllFolders of ho to RefactorSettings.asFolderNames",
         "\/\/ ToDo: *** Change interface!!! ***",
         "\/\/        Set pasSourceFiles of ho to asSourceFiles",
         "Function_Return 0",
         "",
         "        Send DoProcess    of ho",
         "",
         "        Get piNoOfUnusedSourceFiles of ho to iRetval",
         "        Reread SysFile",
         "            Move iRetval to SysFile.iCountUnusedSourceFiles",
         "            SaveRecord SysFile",
         "        Unlock",
         "        Function_Return iRetval",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "RestylelDDOs",
       "iSourceLines": 50,
       "CodeArray": [
         "    \/\/ *** ALL SOURCE FILES FUNCTION ***",
         "    \/\/ Pass the all source files as a string array, including path.",
         "    \/\/  The naming style of datadictionaries over time has not been constant.",
         "    \/\/  The new style is",
         "    \/\/    Object o<tablename>_DD is a c<TableName>Datadictionary",
         "    \/\/  They also have a switch so you can keep on using the legacy style name which is",
         "    \/\/    Object o<tablename>_DD is a <tablename>_Datadictionary",
         "    \/\/",
         "    \/\/  However before VDF12, the",
         "    \/\/    Object <tableName>_DD is a <tablename>_Datadictionary",
         "    \/\/",
         "    \/\/  This caused tremendous headaches as due to the extra \"o\" we ended up with name clashes",
         "    \/\/  all over the place. Copying old code into new views\/dialogs simply breaks and if your",
         "    \/\/  codebase has mixed styles then the compiler will not catch that.",
         "    \/\/  A code nightmare.",
         "    \/\/",
         "    \/\/  This program allows you to switch between the following code styles:",
         "    \/\/  <TableName>_DD  == eDDOldStyle",
         "    \/\/  TO: o<TableName>_DD == eDDStudioStyle",
         "    Function RestylelDDOs String[] ByRef asSourceFile String sParameter Returns Integer",
         "        String sHomePath",
         "        Handle ho",
         "        Integer iRetval iSize iCount",
         "        tRefactorSettings RefactorSettings",
         "        tsSearchResult[] asAllSourceFiles",
         "        String[] asFilesArray",
         "",
         "        \/\/ ToDo: This needs to be available for the unit tester as well.",
         "        Get phoDDOReStyler to ho",
         "        If (ho = 0) Begin",
         "            Send UserError \"phoDDORestyler = 0\"",
         "            Function_Return 0",
         "        End",
         "",
         "        Get psHomePath of ghoApplication to sHomePath",
         "        Get pRefactorSettings to RefactorSettings",
         "        Get AllSourceFiles of ghoApplication RefactorSettings.asFolderNames RefactorSettings.sFileFilter to asAllSourceFiles",
         "",
         "        Set psHomePath of ho to sHomePath",
         "        Set peDDOStyle of ho to RefactorSettings.eDDOStyle",
         "        Move (SizeOfArray(asAllSourceFiles)) to iSize",
         "        Decrement iSize",
         "        For iCount from 0 to iSize",
         "            Move asAllSourceFiles[iCount].sFilename to asFilesArray[SizeOfArray(asFilesArray)]",
         "        End",
         "        Set pasAllSourceFiles of ho to asFilesArray",
         "",
         "        Get MainDDORestyler of ho to iRetval",
         "        Function_Return iRetval",
         "    End_Function"
       ]
     },
     {
       "sFunctionName": "SplitInlineIfElseLine",
       "iSourceLines": 48,
       "CodeArray": [
         "    \/\/ *** LINE-BY-LINE FUNCTION ***",
         "    \/\/ The older version's passed parameters; eSplitBy and iTabSize has been made into",
         "    \/\/ class properties. This way we can have a uniform calling interface for all functions.",
         "    \/\/ The two user selected values can be found in Sysfile.",
         "    \/\/ Valid sParameter values;",
         "    \/\/    CI_SplitWithSpaceAndSemicolon",
         "    \/\/    CI_SplitWithSemicolon",
         "    \/\/    CI_SplitAddBeginEndBlock",
         "    Function SplitInlineIfElseLine String ByRef sLine String sParameter Returns Boolean",
         "        Boolean bStop bChanged",
         "        Integer iIndent eSplitBy iTabSize",
         "        String  sText",
         "        tTokenizer TokenizerData",
         "",
         "        Get pTokenizer to TokenizerData",
         "        \/\/ ToDo: *** Make this into a class property, set before refactoring starts!",
         "        \/\/           This is not something that is changed during the run of a refactoring process.",
         "        \/\/ We need to get a second parameter; the tab-size:",
         "",
         "        Move False to bChanged",
         "        Move sParameter to eSplitBy",
         "        Get piTabSize to iTabSize",
         "",
         "        Move (LTrim(sLine))     to sText",
         "        Move (Pos(sText,sLine) - 1) to iIndent",
         "        Move (Left(sText, 3))   to sText",
         "        Move (Lowercase(sText)) to sText",
         "        If (sText = (Lowercase(CS_If) + \" \")) Begin",
         "            Get _IsLineEndSemiColonOrBegin TokenizerData.sOverstrikeLine to bStop",
         "            If (bStop = False) Begin",
         "                \/\/ It's one of those single line if statements, break it up",
         "                Move (Lowercase(sLine)) to sText",
         "                Get _BreakupCompoundStatement iIndent (&sLine) eSplitBy iTabSize to bChanged",
         "            End",
         "        End",
         "        Else Begin",
         "            Move (LTrim(sLine))     to sText",
         "            Move (Left(sText, 5))   to sText",
         "            Move (Lowercase(sText)) to sText",
         "            If (sText = (Lowercase(CS_Else) + \" \")) Begin",
         "                Get _IsLineEndSemiColonOrBegin TokenizerData.sOverstrikeLine to bStop",
         "                If (bStop = False) Begin",
         "                    Get _BreakupCompoundStatement iIndent (&sLine) eSplitBy iTabSize to bChanged",
         "                End",
         "            End",
         "        End",
         "        Function_Return bChanged",
         "    End_Function"
       ]
     }
   ],
   "Unit": [
     {
       "sFunctionName": "Tokenizer",
       "iSourceLines": 604,
       "UnitArray": [
         "    Object oTokenizer is a cTestFixture",
         "        Set psFunctionName to \"Tokenizer\"",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move \"This is a quoted string\" to sVal' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bHasOverstrikeChars = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"Move 'Single quoted string' to sVal\" to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bHasOverstrikeChars = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"Move 'Single quoted string' to sVal\" to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Move \"Move '++++++++++++++++++++' to sVal\" to sExpected",
         "            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_4",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move \"This is a test string on multiple lines;'   to sLine",
         "            Move 'Move \"_______________________________________;'   to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine       to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_5",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move \"Double quoted string\" to sVal' to sLine",
         "            Move 'Move \"____________________\" to sVal' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_6",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '           \/\/Move WindowIndex to FieldIndex' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsComment = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_7",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move aA to sB \/\/This is an end comment' to sLine",
         "            Move '\/\/This is an end comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sEndComment sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_8",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/* Move (iA \/ iB) to nC' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineComment = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_9",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/* Move (iA \/ iB) to nC' to sLine",
         "            Move '#######################' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_10",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '  Continuation of a DF23 multi-line comment' to sLine",
         "            Move '###########################################' to sExpected",
         "            Set pbIsInDF23MultiLineComment of ghoRefactorFunctionLibrary to True",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_11",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move (iA \/ iB) to nC *\/' to sLine",
         "            Set pbIsInDF23MultiLineComment of ghoRefactorFunctionLibrary to True",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineComment = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_12",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/* Move (iA \/ iB) to nC' to sLine",
         "            Move '#######################' to sExpected",
         "            Set pbIsInDF23MultiLineComment of ghoRefactorFunctionLibrary to True",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_13",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move (iA \/ iB) to nC *\/' to sLine",
         "            Move '#######################' to sExpected",
         "            Set pbIsInDF23MultiLineComment of ghoRefactorFunctionLibrary to True",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_14",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move (iA \/ iB) to nD' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineComment = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_15",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move CS_CRLF to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsBlank = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_16",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"\" to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsBlank = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_17",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/MyPageName' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInImage = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_18",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/*' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bLineIsReady = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_19",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/\/  \/*' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInImage = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_20",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Send Info_Box \"This is a text string with an embedded semi-colon ;\"' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bHasEndSemiColon = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_21",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move \"This is a source line with an ending semi-colon\" ;' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bHasEndSemiColon = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_22",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'If bOK ;  \/\/ Expand vDataType in the debugger' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bHasEndSemiColon = True)",
         "        End_Procedure",
         "",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_23",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '@\"Hello World' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_24",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '@\"Hello World' to sLine",
         "            Move '@\"___________' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected",
         "        End_Procedure",
         "",
         "        \/\/ The pbIsInDF23MultiLineString property should now be = True (after the Tokenizer_IsMultiLineStringStart_1_1 test)",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_25",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '    we will MOVE our warehouse to Lincoln next month.' to sLine",
         "            Move     '_________________________________________________' to sExpected",
         "            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True",
         "            Set pbIsOpenString            of ghoRefactorFunctionLibrary to True",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_26",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '    we will MOVE our warehouse to Lincoln next month.' to sLine",
         "            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True",
         "            Set pbIsOpenString            of ghoRefactorFunctionLibrary to True",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_27",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '    we will MOVE our warehouse to Lincoln next month.' to sLine",
         "            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True",
         "            Set pbIsOpenString            of ghoRefactorFunctionLibrary to True",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bLineIsReady = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_28",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Get SQLExecDirect of ghoSQLExecutor @SQL\"\"\"' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_29",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move @SQL\"\"\" SELECT * FROM Customer WHERE Customer.Name = \"John Doe\" \"\"\" to sSQL \/\/ End comment' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_30",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move \"@SQL\" to sString \/\/ And an end comment' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_31",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move \"This is a string\" to sText' to sLine",
         "            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_32",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/\/ This is a comment' to sLine",
         "            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_33",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/\/ Function MyFunction String sA Returns Boolean ' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInFunction = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_34",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Function MyFunction String sA Returns Boolean ' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInFunction = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_35",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move \"Function MyFunction String sA Returns Boolean\" to sMyString' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInFunction = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_36",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/\/ Procedure MyProc String sLine' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInProcedure = False)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_37",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Procedure MyProc String sLine' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInProcedure = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_38",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '#COMMAND WebPublishProcedure R .' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bIsInCommand = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_39",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '         Move aA to sB \/\/This is an end comment' to sLine",
         "            Move '         ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sIndentation sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_40",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move ('      \/\/Move Windowindex to FieldIndex') to sLine",
         "            Move '       ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.bLineIsReady = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_41",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Indicate [Found] as (True = bTrue)' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.IndicatorInfo.bHasIndicateCommand = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_42",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'If [Found] Indicate Err as (True = bTrue)' to sLine",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.IndicatorInfo.bHasIndicateCommand = True)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_43",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Indicate [Found] as (True = bTrue)' to sLine",
         "            Move 'Found' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.IndicatorInfo.FirstIndicator.sCode = sExpected)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_44",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '[Found] Move [Not Seqeof] to [Select]' to sLine",
         "            Move 'Found' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.IndicatorInfo.FirstIndicator.sCode = sExpected)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_45",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move [Not Select] to [Found]' to sLine",
         "            Move 'Found' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send Assert (TokenizerData.IndicatorInfo.ToIndicator.sCode = sExpected)",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_46",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Get phoHandle of (oMyObject(Current_Object)) to Found' to sLine",
         "            Move '(oMyObject(Current_Object))' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.OfStatement.sCode sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_47",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Get psString of ghoApplication to sString' to sLine",
         "            Move 'ghoApplication' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.OfStatement.sCode sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_48",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move (iA * iB) to iC' to sLine",
         "            Move 'iC' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_49",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move \"New Label\" to (Label(phoMainPanel(ghoApplication)))' to sLine",
         "            Move '(Label(phoMainPanel(ghoApplication)))' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_50",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move \"New Label\" to (Label(phoMainPanel(ghoApplication))) \/\/ Some comment' to sLine",
         "            Move '(Label(phoMainPanel(ghoApplication)))' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_51",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA \/ iB) to nNumber \/\/ Some comment' to sLine",
         "            Move 'Move' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.SecondLeftCommand.sCode sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_52",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA \/ iB) to nNumber \/\/ Some comment' to sLine",
         "            Move 'Move' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.SecondLeftCommand.sCode sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_53",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA \/ iB) to nNumber \/\/ Some comment' to sLine",
         "            Move '((iA * iB > 10) + (iD + iE) > 100)' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sLeftExpression1 sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_54",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA \/ iB) to nNumber \/\/ Some comment' to sLine",
         "            Move '(iA \/ iB)' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sLeftExpression2 sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_55",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath \/\/ Some comment' to sLine",
         "            Move '(phoWorkspace(ghoApplication))' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sOfExpression sExpected",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure Tokenizer_OverStrikeStrings_56",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'For iChar from 1 to (iPos - 1) \/\/ Some comment' to sLine",
         "            Move '(iPos - 1)' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Send AssertSAreEqual TokenizerData.sToExpression sExpected",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeCurrent_ObjectToSelf",
       "iSourceLines": 28,
       "UnitArray": [
         "    Object oChangeCurrent_ObjectToSelf is a cTestFixture",
         "        Set psFunctionName to \"ChangeCurrent_ObjectToSelf\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeCurrent_ObjectToSelf_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move (piCurrentRow(Current_Object)) to iRow' to sLine",
         "            Move 'Move (piCurrentRow(Self)) to iRow' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeCurrent_ObjectToSelf of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeCurrent_ObjectToSelf_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move (piCurrentRow(Current_Object)) to (phoTestHandle(Current_Object))' to sLine",
         "            Move 'Move (piCurrentRow(Self)) to (phoTestHandle(Self))' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeCurrent_ObjectToSelf of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeDfTrueDfFalse",
       "iSourceLines": 28,
       "UnitArray": [
         "    Object oChangeDfTrueDfFalse is a cTestFixture",
         "        Set psFunctionName to \"ChangeDfTrueDfFalse\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeDfTrueDfFalse_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move DFTrue to Found' to sLine",
         "            Move 'Move True to Found' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeDfTrueDfFalse of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeDfTrueDfFalse_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move DFFalse to Found' to sLine",
         "            Move 'Move False to Found' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeDfTrueDfFalse of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeGetAddress",
       "iSourceLines": 52,
       "UnitArray": [
         "    Object oChangeGetAddress is a cTestFixture",
         "        Set psFunctionName to \"ChangeGetAddress\"",
         "",
         "        {Published=True}",
         "        Procedure GetAddress_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"    GetAddress of sString to pMyPointer\" to sLine",
         "            Move \"    Move (AddressOf(sString)) to pMyPointer\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure GetAddress_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \" Function GetAddress Returns String\" to sLine",
         "            Move \" Function GetAddress Returns String\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure GetAddress_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \" Entry_Item (GetAddress(oCustomer_DD))\" to sLine",
         "            Move \" Entry_Item (GetAddress(oCustomer_DD))\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure GetAddress_4",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"String structBytesRead      \/\/Actual bytes read - Should be integer but getAddress cannot find \" to sLine",
         "            Move \"String structBytesRead      \/\/Actual bytes read - Should be integer but getAddress cannot find \" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeIndicateCommand",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oChangeIndicateCommand is a cTestFixture",
         "        Set psFunctionName to \"ChangeIndicateCommand\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure ChangeIndicateCommand_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeIndicateCommand of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeIndicatorToMoveStateToVariable",
       "iSourceLines": 28,
       "UnitArray": [
         "    Object oChangeIndicatorToMoveStateToVariable is a cTestFixture",
         "        Set psFunctionName to \"ChangeIndicatorToMoveStateToVariable\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeIndicatorToMoveStateToVariable__1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"    [Select] Indicate Select as Windowindex Eq Fieldindex \/\/ Comment\" to sLine",
         "            Move \"    If (Select) Move Windowindex Eq Fieldindex to Select \/\/ Comment\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeIndicatorToMoveStateToVariable of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeIndicatorToMoveStateToVariable_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"    Indicate Select as Windowindex Eq Fieldindex \/\/ Comment\" to sLine",
         "            Move \"    Move (Windowindex = Fieldindex) to Select \/\/ Comment\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeIndicatorToMoveStateToVariable of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeInsertCommandToFunction",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oChangeInsertCommandToFunction is a cTestFixture",
         "        Set psFunctionName to \"ChangeInsertCommandToFunction\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure ChangeInsertCommandToFunction_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInsertCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeInToContains",
       "iSourceLines": 138,
       "UnitArray": [
         "    Object oChangeInToContains_Fixture is a cTestFixture",
         "        Set psFunctionName to \"ChangeInToContains\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '    indicate Select as sSubString in sHostString \/\/ Comment' to sLine",
         "            Move '    indicate Select as (sHostString contains sSubString) \/\/ Comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '    if sSubString in sHostString RunProgram' to sLine",
         "            Move '    if (sHostString contains sSubString) RunProgram' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Until sSubString in sHostString' to sLine",
         "            Move 'Until (sHostString contains sSubString)' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_4",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'While sSubString in sHostString' to sLine",
         "            Move 'While (sHostString contains sSubString)' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        \/\/ This test will fail because the logic assumes the source line to be of proper syntax,",
         "        \/\/ e.g. it needs to start with a command (or indicator + command).",
         "        {Published=True}",
         "        Procedure ChangeInToContains_5",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '    If sSubString    in     sHostString Move True to bFound' to sLine",
         "            Move '    If (sHostString contains sSubString) Move True to bFound' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_6",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'if \".\" in a_number' to sLine",
         "            Move 'if (a_number contains \".\")' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_7",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'if \".\" in \"12.12\"' to sLine",
         "            Move 'if (\"12.12\" contains \".\")' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_8",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move (Replaces('`', 'if \"`\" in \"I`m okay\"', \"'\")) to sLine",
         "            Move (Replaces('`', 'if (\"I`m okay\" contains \"`\")', \"'\")) to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_9",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move (Replaces('`', 'if \"`\" in \"I`m okay\"', \"'\")) to sLine",
         "            Move (Replaces('`', 'if (\"I`m okay\" contains \"`\")', \"'\")) to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_10",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"If (Character(10)) in sValue RunProgram\" to sLine",
         "            Move \"If (sValue contains (Character(10))) RunProgram\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeInToContains_11",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'If \"Support Classes\" in sShow Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sLine",
         "            Move 'If (sShow contains \"Support Classes\") Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeLegacyIndicators",
       "iSourceLines": 138,
       "UnitArray": [
         "    Object oChangeLegacyIndicators is a cTestFixture",
         "        Set psFunctionName to \"ChangeLegacyIndicators\"",
         "        \/\/ Changes [Found] Command -> If (Found) Command",
         "        \/\/         [Found] While -> While (Found)",
         "        \/\/         [Found] Repeat -> While (Found)",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [Found] Reread \/\/ End comment' to sLine",
         "            Move '   If (Found) Reread \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [found]   reread' to sLine",
         "            Move '   If (found)   reread' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [Not Found] Move iA to iB \/\/ End comment' to sLine",
         "            Move '   If (Not(Found)) Move iA to iB \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_4",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [Found] Repeat \/\/ End comment' to sLine",
         "            Move '   While (Found) \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_5",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [not Seqeof] Repeat \/\/ End comment' to sLine",
         "            Move '   While (Not(Seqeof)) \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_6",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [not Found] Repeat \/\/ End comment' to sLine",
         "            Move '   While (Not(Found)) \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_7",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [Found] Loop \/\/ End comment' to sLine",
         "            Move '   Loop \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_8",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [not Seqeof] Loop \/\/ End comment' to sLine",
         "            Move '   Loop \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_9",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [Select] Until [Found] \/\/ End comment' to sLine",
         "            Move '   Until (Found) \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_10",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   [not Found] While \/\/ End comment' to sLine",
         "            Move '   While (Not(Found)) \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyIndicators_11",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   While [not Found] \/\/ End comment' to sLine",
         "            Move '   While (Not(Found)) \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeLegacyOperators",
       "iSourceLines": 28,
       "UnitArray": [
         "    Object oChangeLegacyOperators is a cTestFixture",
         "        Set psFunctionName to \"ChangeLegacyOperators\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyOperators_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"    While ((Found) and (iA Eq iB))\" to sLine",
         "            Move \"    While ((Found) and (iA = iB))\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyOperators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyOperators_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"    While L lt 13\" to sLine",
         "            Move \"    While (L < 13)\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyOperators of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeLegacyShadow_State",
       "iSourceLines": 77,
       "UnitArray": [
         "    Object oChangeLegacyShadow_State is a cTestFixture",
         "        Set psFunctionName to \"ChangeLegacyShadow_State\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyShadow_State_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   Set Shadow_State of (oApplication(Self)) to False  \/\/ Comment here' to sLine",
         "            Move '   Set Enabled_State of (oApplication(Self)) to True  \/\/ Comment here' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyShadow_State_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   Get Shadow_State to bState   \/\/ Other comment' to sLine",
         "            Move '   Get Enabled_State to (Not(bState))   \/\/ Other comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyShadow_State_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   Set Shadow_State of oButton to (not(bState))' to sLine",
         "            Move '   Set Enabled_State of oButton to bState' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyShadow_State_4",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   Set Object_Shadow_state to True' to sLine",
         "            Move '   Set Enabled_State to False' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyShadow_State_5",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '   Set Shadow_State of oButton to (not(bState)) \/\/ End comment' to sLine",
         "            Move '   Set Enabled_State of oButton to bState \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeLegacyShadow_State_6",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '        Set Shadow_State of oButton to (not(bState))' to sLine",
         "            Move '        Set Enabled_State of oButton to bState' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeLengthCommandToFunction",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oChangeLengthCommandToFunction is a cTestFixture",
         "        Set psFunctionName to \"ChangeLengthCommandToFunction\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure ChangeLengthCommandToFunction_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeLengthCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangePosCommandToFunction",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oChangePosCommandToFunction is a cTestFixture",
         "        Set psFunctionName to \"ChangePosCommandToFunction\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure ChangePosCommandToFunction_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangePosCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeReplaceCommandToFunction",
       "iSourceLines": 16,
       "UnitArray": [
         "    Object oChangeReplaceCommandToFunction is a cTestFixture",
         "        Set psFunctionName to \"ChangeReplaceCommandToFunction\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeReplaceCommandToFunction_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '  Replace  \"A\"  In  sNameX  With \"B\" \/\/ End comment' to sLine",
         "            Move '  Move (Replace(\"A\", sNameX, \"B\")) to sNameX \/\/ End comment' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeReplaceCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeSysdate4",
       "iSourceLines": 16,
       "UnitArray": [
         "    Object oChangeSysdate4 is a cTestFixture",
         "        Set psFunctionName to \"ChangeSysdate4\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeSysdate4_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Sysdate4 dToday' to sLine",
         "            Move 'Sysdate dToday' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeSysdate4 of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeTrimCommandToFunction",
       "iSourceLines": 40,
       "UnitArray": [
         "    Object oChangeTrimCommandToFunction is a cTestFixture",
         "        Set psFunctionName to \"ChangeTrimCommandToFunction\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeTrimCommandToFunction_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \" Trim sTmp to sValue\" to sLine",
         "            Move \" Move (Trim(sTmp)) to sValue\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeTrimCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeTrimCommandToFunction_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \" Move sTmp to sValue \/\/ That's mighty trim of you\" to sLine",
         "            Move \" Move sTmp to sValue \/\/ That's mighty trim of you\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeTrimCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeTrimCommandToFunction_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \" If iA gt iB Trim sTmp to sValue\" to sLine",
         "            Move \" If iA gt iB Move (Trim(sTmp)) to sValue\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeTrimCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeUClassToRefClass",
       "iSourceLines": 28,
       "UnitArray": [
         "    Object oChangeUClassToRefClass_Fixture is a cTestFixture",
         "        Set psFunctionName to \"ChangeUClassToRefClass\"",
         "",
         "        {Published=True}",
         "        Procedure ChangeUClassToRefClass_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"    Get Create U_Array to hArray\" to sLine",
         "            Move \"    Get Create (RefClass(Array)) to hArray\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeUClassToRefClass of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ChangeUClassToRefClass_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move \"    Get    Create   U_Array    to     hArray\" to sLine",
         "            Move \"    Get    Create   (RefClass(Array))    to     hArray\" to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeUClassToRefClass of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ChangeZeroStringCommandToFunction",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oChangeZeroStringCommandToFunction is a cTestFixture",
         "        Set psFunctionName to \"ChangeZeroStringCommandToFunction\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure ChangeZeroStringCommandToFunction_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ChangeZeroStringCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "EditorDropSelf",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oEditorDropSelf is a cTestFixture",
         "        Set psFunctionName to \"EditorDropSelf\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure EditorDropSelf_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get EditorDropSelf of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "EditorNormalizeCase",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oEditorNormalizeCase is a cTestFixture",
         "        Set psFunctionName to \"EditorNormalizeCase\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure EditorNormalizeCase_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get EditorNormalizeCase of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "EditorReIndent",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oEditorReIndent is a cTestFixture",
         "        Set psFunctionName to \"EditorReIndent\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure EditorReIndent_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get EditorReIndent of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemoveEndComments",
       "iSourceLines": 52,
       "UnitArray": [
         "    Object oRemoveEndComments is a cTestFixture",
         "        Set psFunctionName to \"RemoveEndComments\"",
         "",
         "        {Published=True}",
         "        Procedure RemoveEndComments_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'End_Procedure   \/\/ This is a bla bla procedure' to sLine",
         "            Move 'End_Procedure' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveEndComments of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure RemoveEndComments_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'End_Function   \/\/ This is an end function' to sLine",
         "            Move 'End_Function' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveEndComments of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure RemoveEndComments_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'End_Class   \/\/ This class does bla bla bla' to sLine",
         "            Move 'End_Class' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveEndComments of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure RemoveEndComments_4",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'End_Object   \/\/ This object does bla bla bla' to sLine",
         "            Move 'End_Object' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveEndComments of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemoveLocalKeyWord",
       "iSourceLines": 40,
       "UnitArray": [
         "    Object oRemoveLocalKeyWord is a cTestFixture",
         "        Set psFunctionName to \"RemoveLocalKeyWord\"",
         "",
         "        {Published=True}",
         "        Procedure RemoveLocalKeyWord_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '  Local Integer iRename' to sLine",
         "            Move '  Integer iRename' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure RemoveLocalKeyWord_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '  \/\/ Local Integer iRename' to sLine",
         "            Move '  \/\/ Local Integer iRename' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure RemoveLocalKeyWord_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '  \"Local Integer iRename\"' to sLine",
         "            Move '  \"Local Integer iRename\"' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemoveMultipleBlankLines",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oRemoveMultipleBlankLines is a cTestFixture",
         "        Set psFunctionName to \"RemoveMultipleBlankLines\"",
         "",
         "        {Published=False}",
         "        \/\/ Don't know if and how this should\/could be tested?",
         "        Procedure RemoveMultipleBlankLines_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveMultipleBlankLines of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemoveOldStudioMarkers",
       "iSourceLines": 66,
       "UnitArray": [
         "    Object oRemoveOldStudioMarkers is a cTestFixture",
         "        Set psFunctionName to \"RemoveOldStudioMarkers\"",
         "",
         "        {Published=True}",
         "        Procedure RemoveOldStudioMarkers_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/\/AB-IgnoreStart' to sLine",
         "            Move '\/\/AB-IgnoreStart' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            \/\/ Returns True if a legacy IDE (Studio) source code marker is found, and",
         "            \/\/ in case the source line should be removed.",
         "            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure RemoveOldStudioMarkers_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/\/AB-DDOEnd' to sLine",
         "            Move '\/\/AB-DDOEnd' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure RemoveOldStudioMarkers_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '  \/\/AB-PanelStoreTopStart' to sLine",
         "            Move '  \/\/AB-PanelStoreTopStart' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure RemoveOldStudioMarkers_4",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '  \/\/AB\/ ' to sLine",
         "            Move '  \/\/AB\/ ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure RemoveOldStudioMarkers_5",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '\/\/IDE-FileType=ftApplication' to sLine",
         "            Move '\/\/IDE-FileType=ftApplication' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemoveProjectObjectStructure",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oRemoveProjectObjectStructure is a cTestFixture",
         "        Set psFunctionName to \"RemoveProjectObjectStructure\"",
         "",
         "        {Published=False}",
         "        \/\/ Don't know if and how this should\/could be tested?",
         "        Procedure RemoveProjectObjectStructure_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveProjectObjectStructure of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemovePropertyPrivate",
       "iSourceLines": 16,
       "UnitArray": [
         "    Object oRemovePropertyPrivate is a cTestFixture",
         "        Set psFunctionName to \"RemovePropertyPrivate\"",
         "",
         "        {Published=True}",
         "        Procedure RemovePropertyPrivate_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Property Boolean pbState Private' to sLine",
         "            Move 'Property Boolean pbState' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemovePropertyPrivate of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemovePropertyPublic",
       "iSourceLines": 16,
       "UnitArray": [
         "    Object oRemovePropertyPublic is a cTestFixture",
         "        Set psFunctionName to \"RemovePropertyPublic\"",
         "",
         "        {Published=True}",
         "        Procedure RemovePropertyPublic_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Property Boolean pbState Public' to sLine",
         "            Move 'Property Boolean pbState' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemovePropertyPublic of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemoveSansSerif",
       "iSourceLines": 19,
       "UnitArray": [
         "    Object oRemoveSansSerif is a cTestFixture",
         "        Set psFunctionName to \"RemoveSansSerif\"",
         "",
         "        {Published=True}",
         "        Procedure RemoveSansSerif_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Set TypeFace to \"MS Sans serif\"' to sLine",
         "            Move '' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveSansSerif of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            If (bChanged = True) Begin",
         "                Move \"\" to sLine",
         "            End",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemoveStudioGeneratedComments",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oRemoveStudioGeneratedComments is a cTestFixture",
         "        Set psFunctionName to \"RemoveStudioGeneratedComments\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure RemoveStudioGeneratedComments_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveStudioGeneratedComments of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemoveTrailingSpaces",
       "iSourceLines": 16,
       "UnitArray": [
         "    Object oRemoveTrailingSpaces is a cTestFixture",
         "        Set psFunctionName to \"RemoveTrailingSpaces\"",
         "",
         "        {Published=True}",
         "        Procedure RemoveTrailingSpaces_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Move True to Seqeof     ' to sLine",
         "            Move 'Move True to Seqeof' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveTrailingSpaces of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RemoveUnusedLocals",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oRemoveUnusedLocals is a cTestFixture",
         "        Set psFunctionName to \"RemoveUnusedLocals\"",
         "",
         "        {Published=False}",
         "        \/\/ Not sure how we should test this?",
         "        Procedure RemoveUnusedLocals_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RemoveUnusedLocals of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ReplaceCalcWithMoveStatement",
       "iSourceLines": 64,
       "UnitArray": [
         "    Object oReplaceCalcWithMoveStatement is a cTestFixture",
         "        Set psFunctionName to \"ReplaceCalcWithMoveStatement\"",
         "",
         "        {Published=True}",
         "        Procedure ReplaceCalcWithMoveStatement_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'Calc (iA * iB) to iC' to sLine",
         "            Move 'Move (iA * iB) to iC' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ReplaceCalcWithMoveStatement_2",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'MoveInt (iA * iB) to iC' to sLine",
         "            Move 'Move (iA * iB) to iC' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ReplaceCalcWithMoveStatement_3",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'MoveNum (nA * nB) to nC' to sLine",
         "            Move 'Move (nA * nB) to nC' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ReplaceCalcWithMoveStatement_4",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'MoveReal (rA * rB) to rC' to sLine",
         "            Move 'Move (rA * rB) to rC' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "        {Published=True}",
         "        Procedure ReplaceCalcWithMoveStatement_5",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move 'MoveStr (\"Yes\" * \"and\") to sC' to sLine",
         "            Move 'Move (\"Yes\" * \"and\") to sC' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "ReportUnusedSourceFiles",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oReportUnusedSourceFiles is a cTestFixture",
         "        Set psFunctionName to \"ReportUnusedSourceFiles\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure ReportUnusedSourceFiles_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get ReportUnusedSourceFiles of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "RestylelDDOs",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oRestylelDDOs is a cTestFixture",
         "        Set psFunctionName to \"RestylelDDOs\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure RestylelDDOs_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get RestylelDDOs of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     },
     {
       "sFunctionName": "SplitInlineIfElseLine",
       "iSourceLines": 17,
       "UnitArray": [
         "    Object oSplitInlineIfElseLine is a cTestFixture",
         "        Set psFunctionName to \"SplitInlineIfElseLine\"",
         "",
         "        {Published=False}",
         "        \/\/ Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'",
         "        Procedure SplitInlineIfElseLine_1",
         "            String sLine sExpected",
         "            Boolean bChanged",
         "            tTokenizer TokenizerData",
         "            Move '' to sLine",
         "            Move ' ' to sExpected",
         "            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData",
         "            Get SplitInlineIfElseLine of ghoRefactorFunctionLibrary (&sLine) to bChanged",
         "            Send AssertSAreEqual sExpected sLine",
         "        End_Procedure",
         "",
         "    End_Object"
       ]
     }
   ]
 }