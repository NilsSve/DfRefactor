//****************************************************************************
// $Module type: Program
// $Module name: TestBench
// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2018-08-05 @ 09:50 (Military date format: YY-MM-DD)
//
// Description : The Refactor Testing program is aimed at testing refactoring functions,
//               and make them work as intended.
//               After new refactoring functions have been thoroughly tested, they can be 
//               implemented in the oRefactorFuncLib.pkg and run with the DFRefactor program.
//               The legacyCode.pkg should contain various legacy code snippets to test as 
//               many legacy code samples as possible with the refactoring functions.
//
// This code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
//****************************************************************************
Use DFAllEnt.pkg
Use cRDCCJCommandBarSystem.pkg
Use File_dlg.pkg
Use gFormatNumbers.pkg
Use vwin32fh.pkg
Use RefactorConstants.h.pkg

// Uncomment thie define statement to show a "Theme selector" combobutton and
// a "Snap Shot" camera iton in the toolbar.
//Define Is$BlingStuff

Function Can_UndoAction Desktop Returns Boolean
    Function_Return False
End_Function

Function Can_RedoAction Desktop Returns Boolean
    Function_Return False
End_Function

// Not sure why we need these, but it is due to the IsEnabled functions in the ghoCommandBarSytem"
Procedure Exit_Application for cDesktop
    Send SuspendGUI of Desktop True
    If (Exit_System_Confirmation(Self)) ;
        Abort
End_Procedure

Object oHtmlHelp is a cHtmlHelp
    Set pbAlwaysOnTop to False
End_Object

Use cRefactorApplication.pkg
Object oApplication is a cRefactorApplication
    Set psProduct to "Test Bench"
    Set psCompany to "RDC Tools International"
    Set psHelpFile to "DFRefactor.chm"
    Set peHelpType to htHtmlHelp
    Set pbWorkspaceMode to False

    Property Boolean pbIsRefactoring False
    Property Handle phoEditorLegacy
    Property Handle phoEditorRefactored
    Property String private.psExpFileJson
    Property String private.psImpFileJson   
    
    Procedure OnWorkspaceOpened
        String sHome sSWSFile sProduct
        Integer iRetval
        
        Forward Send OnWorkspaceOpened
        //
        // Check that the 'correct' collating.cfg is used when the program is
        // started. The data in the database was entered with an english (standard)
        // collating sequence. If another df_collate.cfg is encountered at runtime,
        // all data tables will automatically be reindexed, prior to running the program.
        // Note: We cannot use the event OnCreate for this, because the psDataPath
        // et. al. is set after that event. Instead we augment the
        // predefined cApplication's DoOpenworkSpace message.
        Open Functions
        Send CheckCollatingSequence of ghoDatabaseFunctions File_Field Functions.Function_Name

        Get psHome of (phoWorkspace(Self)) to sHome
        Set psHomePath to sHome
        Get vFolderFormat sHome to sHome
        Move (sHome + String(CS_SWSFile)) to sSWSFile
        Set psSWSFile to sSWSFile
    End_Procedure

    Procedure Set psExpFileJson String sJsonFile
        Send WriteString CS_Settings CS_ExportJsonFile sJsonFile
        Set private.psExpFileJson to sJsonFile
    End_Procedure

    Function psExpFileJson Returns String
        String sJsonFile
        Get private.psExpFileJson to sJsonFile
        If (sJsonFile = "") Begin
            Get ReadString CS_Settings CS_ExportJsonFile "" to sJsonFile
            Set private.psExpFileJson to sJsonFile
        End
        Function_Return sJsonFile
    End_Function

    Procedure Set psImpFileJson String sJsonFile
        Send WriteString CS_Settings CS_ImportJsonFile sJsonFile
        Set private.psImpFileJson to sJsonFile
    End_Procedure

    Function psImpFileJson Returns String
        String sJsonFile
        Get private.psImpFileJson to sJsonFile
        If (sJsonFile = "") Begin
            Get ReadString CS_Settings CS_ImportJsonFile "" to sJsonFile
            Set private.psImpFileJson to sJsonFile
        End
        Function_Return sJsonFile
    End_Function

    Procedure CompareFiles
        Boolean bExist bExist2
        String sCompareApp sLegacyCodeFile sRefactoredCodeFile

        Get psFileCompareApp to sCompareApp
        File_Exist sCompareApp bExist
        If (bExist = False) Begin
            Send Info_Box "You need to specify the compare program first."
            Procedure_Return
        End

        Get psCodeFile of (phoEditorLegacy(Self)) to sLegacyCodeFile
        File_Exist sLegacyCodeFile bExist
        Get psCodeFile of (phoEditorRefactored(Self)) to sRefactoredCodeFile
        File_Exist sRefactoredCodeFile bExist2
        If (bExist = False or bExist2 = False) Begin
            Send Info_Box "You have to create the legacy and refactored source code files first."
            Procedure_Return
        End
        
        Runprogram Background ('"' + sCompareApp + '"') ('"' + sLegacyCodeFile + '" "' + sRefactoredCodeFile + '"')
    End_Procedure

    Procedure SaveCodeFiles
        Handle hoEditor
        Boolean bChanged
        Get phoEditorLegacy to hoEditor
        If (hoEditor) Begin
            Send SaveFile of hoEditor
        End
        
        Get phoEditorRefactored to hoEditor
        If (hoEditor) Begin
            Send SaveFile of hoEditor
        End
    End_Procedure

    Procedure CompileRefactoredCode
        String sRefactoredFile sBinPath sHome sAppSrc sCompareApp sCompPath sCompOpt
        Boolean bExists bIsRefactoring
        Integer iLines
        Handle ho
        
        Get pbIsRefactoring to bIsRefactoring
        If (bIsRefactoring = True) Begin
            Procedure_Return
        End
        Get phoEditorRefactored to ho
        Get Line_Count of ho to iLines
        If (iLines <= 1) Begin
            Send Info_Box "You need to press 'Refactor Legacy Code', or short-cut key (Ctrl+R)"
            Procedure_Return
        End
        
        Get psCompiler to sCompPath
        If (sCompPath = "") Begin
            Get DFBinPath to sBinPath
            Get vFolderFormat sBinPath to sBinPath
            Move (sBinPath + CS_Compiler) to sCompPath
        End
        Get psCompOpt to sCompOpt
        Get psHome of (phoWorkspace(Self)) to sHome
        Get vFolderFormat sHome to sHome
        Get psAppSrcPath of (phoWorkspace(Self)) to sAppSrc
        Get vFolderFormat sAppSrc to sAppSrc
        
        Send Execute of (oSave_ToolItem(ghoCommandBars))
        
        Get psCodeFile of (phoEditorRefactored(Self)) to sRefactoredFile
        Send Cursor_Wait of Cursor_Control
        Runprogram Wait ('"' + sCompPath + '"' * "-x" + '"' + sHome + CS_SWSFile + '"' * String(sCompOpt) * String(CS_TestProgram))
        
        Send Cursor_Ready of Cursor_Control
        Get FileSize of ghoFileSystem (sAppSrc + CS_TestErrFile) to iLines
//        Get FileSizeEx of ghoFileSystem (sAppSrc + CS_TestErrFile) to iLines
        If (iLines > 0) Begin
            Send ActivateCompileErrorDialog of (Client_Id(ghoCommandBars)) (sAppSrc + CS_TestErrFile)
        End
        Else Begin                   
            Send CloseCompileErrorDialog of (Client_Id(ghoCommandBars))
            Send Info_Box "The refactored code compiled successfully!"
        End
    End_Procedure
    
    Procedure OpenContainingContainer
        String sPath sFile
        Handle hoEditor
        Get phoEditorLegacy to hoEditor
        Get psCodeFile of hoEditor to sFile
        Get ParseFolderName sFile to sPath
        // We want to have that file to be selected in Windows Explorer
        If (sFile <> "") Begin
            Move ("/select, " + sFile) to sPath
        End
        Send vShellExecute "open" "explorer.exe" sPath ""
    End_Procedure
                
    Procedure SelectSourceFile
        Boolean bOpen bReadOnly
        String  sFileName sInitialFolder
        String[] asFiles
        Handle ho hoEditor

        Move (phoOpenSourceFileDialog(Self)) to ho
        Set Filter_String of ho to (CS_SourceCodeFilters+"|All Files (*.*)|*.*")
        Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sInitialFolder
        Set Initial_Folder of ho to sInitialFolder
        Set MultiSelect_State of ho to False
        
        Get Show_Dialog of ho to bOpen
        If (bOpen = True) Begin
            Get Selected_Files of ho to asFiles
            Get TickReadOnly_State of ho to bReadOnly
            If (bReadOnly = True) Begin
                Send Info_Box ("Files should *not* be opened as ReadOnly.") "Warning!"
            End
            Else Begin
                Move asFiles[0] to sFileName
                Get phoEditorLegacy of ghoApplication to hoEditor
                Set psCodeFile of hoEditor to sFileName
                Send LoadFile of hoEditor sFileName
            End
        End
        Else Begin
            Send Info_Box "No file selected."
        End
    End_Procedure   
    
End_Object

Use cDbUpdateHandler.pkg
Object oDbUpdateHandler is a cDbUpdateHandler
    Set piDbVersionFileNumber  to 363
    Set piDbVersionFieldNumber to 1
    Set pbAutoCreateDbVersionTable to True   
    Set pbUseIntFilesBackup to True
    Set piIntFilesFileNumber to 364
    Set pbContinueOnError to True
    Set pbEnableCancelButton to True
    Set pbExitIfDebuggerActive to False

//    Use DUF_MultipleTables1_0.pkg
//    Use DUF_MultipleTables1_1.pkg
    Use DUF_MultipleTables1_2.pkg
End_Object

// *** Include Main Refactoring Functions ***
// Object is of the cRefactorFuncLib class.
Use oRefactorFuncLib.pkg

// *** Create the Refactor Engine ***
Use cRefactorEngine.pkg
Get Create (RefClass(cRefactorEngine)) to ghoRefactorEngine
Set Name of ghoRefactorEngine to "oRefactorEngine"

Use cRDCTooltipController.pkg
Object oToolTipController is a cRDCTooltipController
End_Object

Open SysFile
Register_Object oSysfile_DD

Use oEditContextMenu.pkg
Use oDEOEditContextMenu.pkg

Object oMain is a Panel
    Set Label to (Uppercase(psProduct(ghoApplication)) * "- DFRefactor")
    Set Location to 4 3
    Set Size to 300 633
    Set piMinSize to 294 550
    Set Icon to "DFRefactorTest.ico"
    
    Object oCommandBarSystem is a cRDCCJCommandBarSystem
//        Set pbTimerUpdate to True
//        Set pbToolBarAccelTips to True
//        Set pbTabbedWorkspaces to True
//        Set pbAutoResizeIcons to True
        Set piLayoutBuild to 5

        Procedure OnCreateCommandBars
            Integer iSize
            Forward Send OnCreateCommandBars
            Get piToolbarIconSize of ghoApplication to iSize
            Set piToolbarIconSize to iSize
            
//            Send DoChangeToolTipFormat
//            Send SetTheTheme xtpThemeOffice2016Word 
        End_Procedure
//
//        Procedure OnCreateTabbedWorkspace Handle hoTabWorkspace Handle hoTabPaintManager
//            Set ComShowIcons of hoTabPaintManager to True
//            // This will truncate the middle part of long items
//            Set ComDrawTextPathEllipsis of hoTabPaintManager to True
//            Send DisplayTabWorkspace
//        End_Procedure
//
//        Procedure DisplayTabWorkspace
//            Handle hoTab hoPaintManager hoOptions
//            Variant vTab vPaintManager
//            Integer iSize iType
//
//            If (not(IsComObjectCreated(Self))) Begin
//                Procedure_Return
//            End
//
//            Get OptionsObject to hoOptions
//
//            // Create the tab workspace object. It will get created for the Client_Area so
//            // each view will be displayd on a separate tab-page (instead of the standard DF MDI-interface)
//            Get Create (RefClass(cCJTabWorkspace)) to hoTab
//            // Enable or disable tab pages. (bShow = True/False)
//            Get ComShowTabWorkspace True to vTab
//            // Connect the CodeJock side to the VDF proxy object.
//            Set pvComObject               of hoTab to vTab
//            Set ComAutoTheme              of hoTab to False    
//
//            Get Create (RefClass(cCJTabPaintManager)) to hoPaintManager
//            Get ComPaintManager of hoTab        to vPaintManager
//            Set pvComObject   of hoPaintManager to vPaintManager
//
//            // Don't show the tab-pages "close" and next/prev buttons.
//            Set ComFlags of hoTab to xtpWorkspaceHideAll
//
//            Move 16 to iSize
//            Send ComSetIconSize of hoPaintManager iSize iSize   // Set icon size for Tab-workspace.
//            Send ComSetPopupIconSize of hoOptions 24 24
//            // To show or not to show tab-page icons...
//            Set ComShowIcons    of hoPaintManager to True
//
//            // Sets the tab-pages to display on the left side, instead of at the top:
//            Get ReadInteger of ghoApplication CS_Settings CS_TabPosition xtpTabPositionLeft to iType
//            Set ComPosition     of hoPaintManager to iType
//
//            // This will truncate the middle part of long items
//            //Set ComDrawTextPathEllipsis of hoPaintManager to True
//
//            Get piToolbarIconSize of ghoApplication to iSize
//            Set piToolbarIconSize to iSize
//            Set ComToolTipBehaviour of hoPaintManager to xtpTabToolTipAlways // We _must_ have this for tooltips to show on tab-pages (views)
//
//            Send ComRecalcLayout
//            
//            Send Destroy of hoTab
//            Send Destroy of hoPaintManager
//        End_Procedure
//
//        Procedure DoChangeToolTipFormat
//            Variant vToolTip
//            Handle  hoObject
//            Integer eTheme iToolTipStyle
//            Boolean bIsBalloonStyleSupported
//
//            Get ComToolTipContext to vTooltip
//            Get Create (RefClass(cCJToolTipContext)) to hoObject
//            Set pvComObject of hoObject to vTooltip
//            Move xtpToolTipStandard to iToolTipStyle
//            
//            // Baloon tooltip style requires IE 5.0 or later, so check if installed.
//            // The ComShowTitleAndDescription also requires IE 5.0.
//            Get ComIsBalloonStyleSupported of hoObject to bIsBalloonStyleSupported
//            If (bIsBalloonStyleSupported = False) Begin
//                // If not supported we cannot show baloon tooltip; use standard style instead.
//                If (iToolTipStyle = xtpToolTipBalloon) Begin
//                    Move xtpToolTipStandard to iToolTipStyle
//                End
//            End
//            If (bIsBalloonStyleSupported = True) Begin
//                Send ComShowTitleAndDescription of hoObject True xtpToolTipIconInfo
//            End
//            
//            Set ComStyle            of hoObject to iToolTipStyle
//            Set ComShowOfficeBorder of hoObject to True
//            Set ComShowShadow       of hoObject to True
//            // Set the max width for a tooltip. 250 just seems to be a good
//            // compromise. After 250 pixels the text will wrap to the next line automatically.
//            Set  ComMaxTipWidth     of hoObject to 250 // In pixels
//            Send Destroy            of hoObject
//            
//            If (phoStatusBar(ghoCommandBars)) Begin
//                Send DoChangeToolTipFormat of (phoStatusBar(Self))
//            End
//        End_Procedure
//
//        Procedure Set piToolbarIconSize Integer iSize
//            Handle hoOptions
//
//            If (not(IsComObjectCreated(Self))) Begin
//                Procedure_Return
//            End
//
//            If (iSize < 16) Begin
//                Move 32 to iSize
//            End
//            Set pbLargeIcons to (iSize = 32)
//            Get OptionsObject to hoOptions
//            Send ComSetIconSize of hoOptions False iSize iSize  // Set icon size for Toolbar buttons.
//            Send ComRecalcLayout
//        End_Procedure
//
//        Procedure SetTheTheme Integer eTheme  
//            Get ReadInteger of ghoApplication CS_Settings CS_ThemeKeyWord eTheme to eTheme
//            Set peVisualTheme to eTheme
////            Broadcast Recursive Set Color of (Client_Id(ghoCommandBars))     to clGreyBlue
////            Broadcast Recursive Set TextColor of (Client_Id(ghoCommandBars)) to clDarkThemeText 
//            Send ComRecalcLayout
//        End_Procedure

        // This is needed to get the "Key_Shift+Key_Tab" key combination to activate
        // the previous tab workspace view.
        Object oPreviousTabAction is a cCJAction
            Set piShortCutKey to (xtpKey_Shift + xtpKey_Ctrl) VK_TAB
            Procedure OnExecute Variant vCommandBarControl
                Handle hoCommandBars hoClientArea
                Forward Send OnExecute vCommandBarControl
                Get CommandBarSystemObject to hoCommandBars
                Get ClientAreaObject of hoCommandBars to hoClientArea
                If hoClientArea Begin
                    Send Switch_Next_View of hoClientArea
                End
            End_Procedure
        End_Object

    Procedure VisualThemeParamsEx Integer ByRef eTheme String ByRef sDll String ByRef sIni
        Case Begin
            Case (eTheme=xtpThemeNativeWindows10)
                Move "Windows10.dll" to sDll
                Move "Windows10Light.ini" to sIni
//                Move xtpThemeResource to eTheme
                Case Break
            Case (eTheme=xtpThemeWindows10Dark)
                Move "Windows10.dll" to sDll
                Move "Windows10Dark.ini" to sIni
//                Move xtpThemeResource to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2007)
            Case (eTheme=xtpThemeResource)
            Case (eTheme=xtpThemeOffice2007Blue)
                Move "Office2007.dll" to sDll
                Move "Office2007Blue.ini" to sIni
                Move xtpThemeResource to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2007Aqua)
                Move "Office2007.dll" to sDll
                Move "Office2007Aqua.ini" to sIni
                Move xtpThemeResource to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2007Black)
                Move "Office2007.dll" to sDll
                Move "Office2007Black.ini" to sIni
                Move xtpThemeResource to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2007Silver)
                Move "Office2007.dll" to sDll
                Move "Office2007Silver.ini" to sIni
                Move xtpThemeResource to eTheme
                Case Break
            
            Case (eTheme=xtpThemeOffice2010Blue)
            Case (eTheme=xtpThemeOffice2010)
                Move "Office2010.dll" to sDll
                Move "Office2010Blue.ini" to sIni
                Move xtpThemeResource to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2010Black)
                Move "Office2010.dll" to sDll
                Move "Office2010Black.ini" to sIni
                Move xtpThemeResource to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2010Silver)
                Move "Office2010.dll" to sDll
                Move "Office2010Silver.ini" to sIni
                Move xtpThemeResource to eTheme
                Case Break
            
            Case (eTheme=xtpThemeOffice2013)
            Case (eTheme=xtpThemeOffice2013Word)
                Move "Office2013.dll" to sDll
                Move "Office2013Word.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2013Excel)
                Move "Office2013.dll" to sDll
                Move "Office2013Excel.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2013PowerPoint)
                Move "Office2013.dll" to sDll
                Move "Office2013PowerPoint.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2013OutLook)
                Move "Office2013.dll" to sDll
                Move "Office2013OutLook.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2013Publisher)
                Move "Office2013.dll" to sDll
                Move "Office2013Publisher.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2013Access)
                Move "Office2013.dll" to sDll
                Move "Office2013Access.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2013OneNote)
                Move "Office2013.dll" to sDll
                Move "Office2013OneNote.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
                
            Case (eTheme=xtpThemeOffice2016Access)
                Move "Office2016.dll" to sDll
                Move "Office2016AccessWhite.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2016Excel)
                Move "Office2016.dll" to sDll
                Move "Office2016ExcelWhite.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2016OneNote)
                Move "Office2016.dll" to sDll
                Move "Office2016OneNoteWhite.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2016Outlook)
                Move "Office2016.dll" to sDll
                Move "Office2016OutlookWhite.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2016Publisher)
                Move "Office2016.dll" to sDll
                Move "Office2016PublisherWhite.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2016PowerPoint)
                Move "Office2016.dll" to sDll
                Move "Office2016PowerPointWhite.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            Case (eTheme=xtpThemeOffice2016Word)
                Move "Office2016.dll" to sDll
                Move "Office2016WordWhite.ini" to sIni
                Move xtpThemeOffice2013 to eTheme
                Case Break
            
            Case (eTheme=xtpThemeWindows7)
                Move "Windows7.dll" to sDll
                Move "Windows7Blue.ini" to sIni
                Move xtpThemeResource to eTheme
                Case Break
            
            Case (eTheme=xtpThemeVisualStudio2012)
            Case (eTheme=xtpThemeVisualStudio2012Light)
                Move "VisualStudio2012.dll" to sDll
                Move "VisualStudio2012Light.ini" to sIni
                Move xtpThemeVisualStudio2012 to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2012Dark)
                Move "VisualStudio2012.dll" to sDll
                Move "VisualStudio2012Dark.ini" to sIni
                Move xtpThemeVisualStudio2012Dark to eTheme
                Case Break
            
            Case (eTheme=xtpThemeVisualStudio2015)
            Case (eTheme=xtpThemeVisualStudio2015Blue)
                Move "VisualStudio2015.dll" to sDll
                Move "VisualStudio2015Blue.ini" to sIni
                Move xtpThemeVisualStudio2015 to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2015Light)
                Move "VisualStudio2015.dll" to sDll
                Move "VisualStudio2015Light.ini" to sIni
                Move xtpThemeVisualStudio2015 to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2015Dark)
                Move "VisualStudio2015.dll" to sDll
                Move "VisualStudio2015Dark.ini" to sIni
                Move xtpThemeVisualStudio2015Dark to eTheme
                Case Break

            Case (eTheme=xtpThemeVisualStudio2017)
            Case (eTheme=xtpThemeVisualStudio2017Blue)
                Move "VisualStudio2017.dll" to sDll
                Move "VisualStudio2017Blue.ini" to sIni
                Move xtpThemeVisualStudio2017 to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2017Light)
                Move "VisualStudio2017.dll" to sDll
                Move "VisualStudio2017Light.ini" to sIni
                Move xtpThemeVisualStudio2017 to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2017Dark)
                Move "VisualStudio2017.dll" to sDll
                Move "VisualStudio2017Dark.ini" to sIni
                Move xtpThemeVisualStudio2017 to eTheme
                Case Break
                
            Case (eTheme=xtpThemeVisualStudio2019)
            Case (eTheme=xtpThemeVisualStudio2019Blue)
                Move "VisualStudio2019.dll" to sDll
                Move "VisualStudio2019Blue.ini" to sIni
                Move xtpThemeVisualStudio2019 to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2019BlueExtra)
                Move "VisualStudio2019.dll" to sDll
                Move "VisualStudio2019BlueExtra.ini" to sIni
                Move xtpThemeVisualStudio2019BlueExtra to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2019Light)
                Move "VisualStudio2019.dll" to sDll
                Move "VisualStudio2019Light.ini" to sIni
                Move xtpThemeVisualStudio2019 to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2019Dark)
                Move "VisualStudio2019.dll" to sDll
                Move "VisualStudio2019Dark.ini" to sIni
                Move xtpThemeVisualStudio2019Dark to eTheme
                Case Break
                
            Case (eTheme=xtpThemeVisualStudio2022)
            Case (eTheme=xtpThemeVisualStudio2022Blue)
                Move "VisualStudio2022.dll" to sDll
                Move "VisualStudio2022Blue.ini" to sIni
                Move xtpThemeVisualStudio2022 to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2022BlueExtra)
                Move "VisualStudio2022.dll" to sDll
                Move "VisualStudio2022BlueExtra.ini" to sIni
                Move xtpThemeVisualStudio2022BlueExtra to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2022Light)
                Move "VisualStudio2022.dll" to sDll
                Move "VisualStudio2022Light.ini" to sIni
                Move xtpThemeVisualStudio2022 to eTheme
                Case Break
            Case (eTheme=xtpThemeVisualStudio2022Dark)
                Move "VisualStudio2022.dll" to sDll
                Move "VisualStudio2022Dark.ini" to sIni
                Move xtpThemeVisualStudio2022Dark to eTheme
                Case Break
            Case Else
                Move "" to sDll
                Move "" to sIni
        Case End
    End_Procedure

    Object oFindToolBar is a cCJToolbar
        Set psTitle to "Find Toolbar"
        Set pbDockNextTo to False
        
        Object oFindFirstTool is a cCJFindFirstMenuItem
        End_Object
        
        Object oFindPreviousTool is a cCJFindPreviousMenuItem
        End_Object
        
        Object oFindMenuTool is a cCJFindMenuItem
        End_Object
        
        Object oFindNextTool is a cCJFindNextMenuItem
        End_Object
        
        Object oFindLastTool is a cCJFindLastMenuItem
        End_Object
        
        Object oPromptToolItem is a cCJPromptMenuItem
            Set pbControlBeginGroup to True
        End_Object
    
    End_Object
        
    Object oClearSaveToolBar is a cCJToolbar
        Set psTitle to "Clear/Save Toolbar"
        
        Object oClear_ToolItem is a cCJClearMenuItem
            Set peControlStyle to xtpButtonIconAndCaption
        End_Object

        Object oRefresh_ToolItem is a cCJMenuItem
            Set psCaption to "Refresh"
            Set psToolTip to "Refresh view data"
            Set psDescription to "Reloades the 'Legacy Code' editor file and clears the 'Refactored Code' editor"
            Set psImage to "Refresh.ico"
            Set psShortcut to "Ctrl+R"
            Set peControlStyle to xtpButtonIconAndCaption
            Set pbActiveUpdate to True
            
            Procedure OnExecute Variant vCommandBarControl
                Handle ho
                String sFileName
                
                Get phoRefactorView of ghoApplication to ho
                Get phoEditorRefactored of ghoApplication to ho
                Send Request_Clear of ho
                Get phoEditorLegacy of ghoApplication to ho
                Get psCodeFile of ho to sFileName
                Send LoadFile of ho sFileName
                Send OnModified of ho
            End_Procedure
            
            Function IsEnabled Returns Boolean
                String sViewName sObjectName
                Move (Name(phoRefactorView(ghoApplication))) to sViewName
                Move (Name(Focus(Desktop))) to sObjectName
                Function_Return (sObjectName contains sViewName)
            End_Function
            
        End_Object
        
        Object oSave_ToolItem is a cCJSaveMenuItem
            Set peControlStyle to xtpButtonIconAndCaption
            Set pbControlBeginGroup to True

            Procedure OnExecute Variant vCommandBarControl
                Handle ho hoEditor   
                Get phoRefactorView of ghoApplication to ho
                If (Active_State(ho)) Begin
                    Get phoEditorLegacy of ghoApplication to hoEditor
                    If (hoEditor) Begin
                        Send SaveFile of hoEditor
                    End
                End
                Send Request_Save_No_Clear of (phoRefactorView(ghoApplication))
            End_Procedure

            Function IsEnabled Returns Boolean
                Boolean bIsDEO bHasRecord bChanged bEnabled bHasIndex
                Handle hoServer
                Boolean bChangedLegacy bChangedRefactored

                Get DEOInformation (&hoServer) (&bHasRecord) (&bChanged) (&bHasIndex) to bIsDeo
                Get CM_IsModified of (phoEditorLegacy(ghoApplication))     to bChangedLegacy
                Get CM_IsModified of (phoEditorRefactored(ghoApplication)) to bChangedRefactored
                
                Function_Return (bChanged = True or bChangedLegacy = True or bChangedRefactored = True)
            End_Function
            
        End_Object
        
        Object oDeleteToolItem is a cCJDeleteMenuItem
            Set peControlStyle to xtpButtonIconAndCaption
        End_Object
        
    End_Object

    Object oEditToolBar is a cCJToolbar
        Set psTitle to "Edit Toolbar"
        Set pbEnableAnimation to True
        Set pbShowExpandButton to False

        Object oUndo_MenuItem is a cCJMenuItem
            Set psToolTip to "Undo"
            Set psDescription to "Undo last editor action (Ctrl+Z)"
            Set psImage to "ActionUndo.ico"
            Set pbActiveUpdate to True

            Procedure OnExecute Variant vCommandBarControl
                Send CME_UndoAction of (Focus(Desktop))
            End_Procedure

            Function IsEnabled Returns Boolean
                Boolean bCanUndo
                Get Can_UndoAction of (Focus(Desktop)) to bCanUndo
                Function_Return bCanUndo
            End_Function

        End_Object

        Object oRedo_MenuItem is a cCJMenuItem
            Set psDescription to "Redo last editor action (Ctrl+Z)"
            Set psToolTip to "Redo"
            Set psImage to "ActionRedo.ico"
            Set pbActiveUpdate to True

            Procedure OnExecute Variant vCommandBarControl
                Send CME_RedoAction of (Focus(Desktop))
            End_Procedure

            Function IsEnabled Returns Boolean
                Boolean bCanRedo
                Get Can_RedoAction of (Focus(Desktop))  to bCanRedo
                Function_Return bCanRedo
            End_Function

        End_Object

        Object oCutToolbarItem is a cCJCutMenuItem
        End_Object

        Object oCopyToolbarItem is a cCJCopyMenuItem
        End_Object

        Object oPasteToolbarItem is a cCJPasteMenuItem
        End_Object

        Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
            Set pbControlBeginGroup to True
        End_Object

        Object oToggleWhiteSpaceItm is a cCJMenuItem
            Set pbControlBeginGroup to True
            Set psImage to "ToggleWhiteSpace.ico"
            Set psCaption to "Toggle &White Space"
            Set psDescription to "Toggle White space (Ctrl+W)"
            Set psToolTip to "Toggle white space"
            Set pbActiveUpdate to True

            Procedure OnExecute Variant vCommandBarControl
                Integer iRetval
                Boolean bIsWhiteSpace
                Handle hoEditor
                
                Get phoEditorLegacy of ghoApplication to hoEditor
                Get CM_IsWhitespaceDisplayEnabled of hoEditor to bIsWhiteSpace
                Get CM_EnableWhitespaceDisplay of hoEditor (not(bIsWhiteSpace)) to iRetval
                Get phoEditorRefactored of ghoApplication to hoEditor
                Get CM_EnableWhitespaceDisplay of hoEditor (not(bIsWhiteSpace)) to iRetval
            End_Procedure
            
            Function IsEnabled Returns Boolean
                Handle hoLegacy hoRefactored
                Get phoEditorLegacy     of ghoApplication to hoLegacy
                Get phoEditorRefactored of ghoApplication to hoRefactored
                Function_Return (Focus(Desktop) = hoLegacy or Focus(Desktop) = hoRefactored)
            End_Function
            
        End_Object

        Object oToogleIndentationGuides is a cCJMenuItem
            Set psImage to "ToggleIndentationGuides.ico"
            Set psCaption to "&Indentation Guides"
            Set psToolTip to "&Indentation Guides"
            Set psDescription to "Toggle Indentation Guides (Ctrl+I)"
            Set pbActiveUpdate to True
            
            Procedure OnExecute Variant vCommandBarControl
                Integer iRetval
                Boolean bIsWhiteSpace bMode
                Handle hoEditor
                
                Get phoEditorLegacy of ghoApplication to hoEditor
                Send ToggleIndentationGuides of hoEditor
                Get phoEditorRefactored of ghoApplication to hoEditor
                Send ToggleIndentationGuides of hoEditor
            End_Procedure

            Function IsEnabled Returns Boolean
                Handle hoLegacy hoRefactored
                Get phoEditorLegacy     of ghoApplication to hoLegacy
                Get phoEditorRefactored of ghoApplication to hoRefactored
                Function_Return (Focus(Desktop) = hoLegacy or Focus(Desktop) = hoRefactored)
            End_Function
            
        End_Object

        Object oToogleScopeBlocks is a cCJMenuItem
            Set psImage to "ToogleScopeBlocks.ico"
            Set psCaption to "Expand/Collapse"
            Set psDescription to "Expand/Collapse Blocks"
            Set psToolTip to "Expand/Collapse"
            Set pbActiveUpdate to True
            
            Property Boolean pbToggleScopeBlocks True
            
            Procedure OnExecute Variant vCommandBarControl
                Boolean bMode
                Handle hoEditor
                
                Get phoEditorLegacy of ghoApplication to hoEditor
                Get pbToggleScopeBlocks to bMode
                Send ToggleScopeBlocks of hoEditor (not(bMode))
                Get phoEditorRefactored of ghoApplication to hoEditor
                Send ToggleScopeBlocks of hoEditor (not(bMode))
                Set pbToggleScopeBlocks to (not(bMode))
            End_Procedure

            Function IsEnabled Returns Boolean
                Handle hoLegacy hoRefactored
                Get phoEditorLegacy     of ghoApplication to hoLegacy
                Get phoEditorRefactored of ghoApplication to hoRefactored
                Function_Return (Focus(Desktop) = hoLegacy or Focus(Desktop) = hoRefactored)
            End_Function
            
        End_Object

    End_Object

    Object oActionsToolbar is a cCJToolbar
        Set psTitle to "Actions Toolbar"
        Set pbEnableAnimation to True
        Set pbShowExpandButton to False
        Set pbDockNextTo to False

        Object oRefactor_ToolItem is a cCJMenuItem
            Set pbControlBeginGroup to True
            Set peControlStyle to xtpButtonIconAndCaption
            Set psCaption to "Start &Refactoring"
            Set psDescription to "Refactor Legacy Code (Ctrl+F5)"
            Set psToolTip to "Refactor Code"
            Set psImage to "Start.ico"
            Set psShortcut to "Ctrl+F5"
            Set pbActiveUpdate to True
            
            Procedure OnExecute Variant vCommandBarControl
                Send RefactoreCode of (phoRefactorView(ghoApplication)) //bUseConstraints
            End_Procedure

            Function IsEnabled Returns Boolean  
                // Don't think we need this, better use the same logic as the oRefactor_btn button.
//                String sViewName sObjectName
//                Move (Name(phoRefactorView(ghoApplication))) to sViewName
//                Move (Name(Focus(Desktop))) to sObjectName
//                Function_Return ((SysFile.SelectedFunctionTotal > 0 and sObjectName contains sViewName) or SysFile.bCountSourceLines = True)
                Function_Return (SysFile.SelectedFunctionTotal > 0 or SysFile.bCountSourceLines = True)
            End_Function

            Procedure OnCreateControl Handle hoObj
                Set ComDefaultItem of hoObj to True
            End_Procedure
            
        End_Object

        Object oCompare_MenuItem is a cCJMenuItem
            Set peControlStyle to xtpButtonIconAndCaption
            Set psCaption to "Co&mpare Code"
            Set psToolTip to "Co&mpare Diff's Legacy && Refactored"
            Set psDescription to "Compare file changes after running refactoring function(s) (Alt+M)"
            Set psImage to "Compare.ico"
            Set pbActiveUpdate to True
            Set pbControlBeginGroup to True

            Procedure OnExecute Variant vCommandBarControl
                String sCompareApp
                Send Execute of (oSave_ToolItem(ghoCommandBars))
                Get psFileCompareApp of ghoApplication to sCompareApp
                Send CompareFiles of ghoApplication sCompareApp
            End_Procedure

            Function IsEnabled Returns Boolean
                Integer iLegacyLines iRefactorLines
                If (pbIsRefactoring(ghoApplication) = True) Begin
                    Function_Return False
                End
                Get SC_LineCount of (phoEditorLegacy(ghoApplication)) to iLegacyLines
                Get SC_LineCount of (phoEditorRefactored(ghoApplication)) to iRefactorLines
                Function_Return (iLegacyLines > 1 and iRefactorLines > 1)
            End_Function

        End_Object

        Object oCompile_ToolItem is a cCJMenuItem
            Set peControlStyle to xtpButtonIconAndCaption
            Set pbControlBeginGroup to True
            Set pbActiveUpdate to True
            Set psCaption to "Test Compile"
            Set psToolTip to "Test compile code"
            Set psDescription to "Test compile refactored code (F5)"
            Set psImage to "CompileProject.ico"
            Set psShortcut to "F5"
            
            Procedure OnExecute Variant vCommandBarControl
                Send CompileRefactoredCode of ghoApplication
            End_Procedure

            Function IsEnabled Returns Boolean
                Integer iLines
                If (pbIsRefactoring(ghoApplication) = True) Begin
                    Function_Return False
                End
                Get SC_LineCount of (phoEditorRefactored(ghoApplication)) to iLines
                Function_Return (iLines > 1)
            End_Function
            
        End_Object

        Object oErrorLog_ToolItem is a cCJMenuItem
            Set peControlStyle to xtpButtonIconAndCaption
            Set pbControlBeginGroup to True
            Set pbActiveUpdate to True
            Set psCaption to "Compile &Errors"
            Set psDescription to "Show errors from compilation (Ctrl+E)"
            Set psToolTip to "Show Errors"
            Set psImage to "CompileErrors.ico"
            Set psShortcut to "Alt+E"

            Procedure OnExecute Variant vCommandBarControl
                String sAppSrcPath
                Boolean bExists bActive

                Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sAppSrcPath
                Get vFolderFormat sAppSrcPath to sAppSrcPath
                Get vFilePathExists (sAppSrcPath + CS_TestErrFile) to bExists
                If (bExists = True) Begin
                    Get IsCompileErrorDialogActive of (Client_Id(phoMainPanel(ghoApplication))) to bActive
                    If (bActive = False) Begin
                        Send ActivateCompileErrorDialog of (Client_Id(phoMainPanel(ghoApplication))) (sAppSrcPath + CS_TestErrFile)
                    End
                    Else Begin
                        Send CloseCompileErrorDialog of (Client_Id(phoMainPanel(ghoApplication)))
                    End
                End
            End_Procedure

            Function IsEnabled Returns Boolean
                Boolean bExists
                String sAppSrcPath
                Integer iLines

                Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sAppSrcPath
                Get vFolderFormat sAppSrcPath to sAppSrcPath
                Get vFilePathExists (sAppSrcPath + CS_TestErrFile) to bExists
                Get SC_LineCount of (phoEditorRefactored(ghoApplication)) to iLines
                Function_Return (bExists = True and iLines > 1)
            End_Function

        End_Object

        Object oOpenLogFile_MenuItem is a cCJMenuItem
            Set psToolTip to "View log file"
            Set psDescription to "View the log file that is added to for each run"
            Set psImage to "OpenLogFile.ico"
            Set peControlStyle to xtpButtonIcon
            Set pbActiveUpdate to True
            Set pbControlBeginGroup to True

            Procedure OnExecute Variant vCommandBarControl
                Send ShowLogFile of ghoApplication
            End_Procedure

            Function IsEnabled Returns Boolean
                String sPath sLogFile
                Boolean bLogFileExists

                Get psHomePath of ghoApplication to sPath
                Get vFolderFormat sPath to sPath
                Move (sPath + CS_BackupFolder + CS_DirSeparator + CS_SummaryLogfileName) to sLogFile
                Get vFilePathExists sLogFile to bLogFileExists

                Function_Return (bLogFileExists = True)
            End_Function

        End_Object

        Object oOpenOtherLogFile_MenuItem is a cCJMenuItem
            Set psToolTip to "Other log files"
            Set psDescription to "View a list of log files created by functions of type: 'eOtherFunction"
            Set psImage to "OtherLogFiles.ico"
            Set peControlStyle to xtpButtonIcon
            Set pbActiveUpdate to True

            Procedure OnExecute Variant vCommandBarControl
                Send ShowOtherLogFiles of ghoApplication
            End_Procedure

            Function IsEnabled Returns Boolean
                String[] asOtherLogFiles
                Get pasOtherLogFiles of ghoRefactorFuncLib to asOtherLogFiles
                Function_Return (SizeOfArray(asOtherLogFiles) > 0)
            End_Function

        End_Object

        Object oShowErrorLog_MenuItem is a cCJMenuItem
            Set psToolTip to "View Refactor Engine Error Log"
            Set psDescription to "View the refactor Engine error log"
            Set psImage to "ErrorLog.ico"
            Set peControlStyle to xtpButtonIcon
            Set pbActiveUpdate to True

            Procedure OnExecute Variant vCommandBarControl
                Send Popup of (oEngineErrorLog_dg(Client_Id(ghoCommandBars)))
            End_Procedure
            
            Function IsEnabled Returns Boolean
                Integer iErrors
                Get_Attribute DF_FILE_RECORDS_USED of StatLog.File_Number to iErrors
                Function_Return (iErrors > 0)
            End_Function

        End_Object

    End_Object

    Object oProgramsToolbar is a cCJToolbar
        Set psTitle to "Programs Toolbar"
        Set pbEnableAnimation to True
        Set pbShowExpandButton to False

        // This object needs to be here for the Scintilla objects's right-click menu.
        Object oOpenFolderMenuItem is a cCJMenuItem
            Set psCaption to CS_BrowseSourceFileTxt
            Set psToolTip to "Select source file"
            Set psDescription to "Displays an Open File dialog to select a source file from (Ctrl+O)"
            Set psImage to "ActionOpen.ico"
            Set peControlStyle to xtpButtonIcon
            
            Procedure OnExecute Variant vCommandBarControl
                Send SelectSourceFile of ghoApplication
            End_Procedure

        End_Object
        
        Object oOpenContainingFolder_MenuItem is a cCJMenuItem
            Set psImage to "ActionOpenContainingFolder.ico"
            Set psCaption to "Open Folder"
            Set psToolTip to "Containing Folder"
            Set psDescription to "Open Containing Folder"
            Set pbActiveUpdate to True
            Set pbControlBeginGroup to True

            Procedure OnExecute Variant vCommandBarControl
                String sPath sFile
                Handle hoEditor

                Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath
                Get phoEditorLegacy of ghoApplication to hoEditor
                Get psCodeFile of hoEditor to sFile

                // We want to have the file selected in Windows Explorer
                If (sFile <> "") Begin
                    Move ("/select, " + sFile) to sPath
                End
                Send vShellExecute "open" "explorer.exe" sPath ""
            End_Procedure

            Function IsEnabled Returns Boolean
                String sFile
                Handle hoEditor
                Boolean bExists
                Get phoEditorLegacy of ghoApplication to hoEditor
                Get psCodeFile of hoEditor to sFile
                Get vFilePathExists sFile to bExists
                Function_Return (bExists = True)
            End_Function

        End_Object

    End_Object

    Object oExternalProgramsToolbar is a cCJToolbar
        Set psTitle to "External Programs Toolbar"
        Set pbShowExpandButton to False

        Object oUnitTest_MenuItem is a cCJMenuItem
            Set peControlStyle to xtpButtonIconAndCaption
            Set psCaption to "Run &Unit Tests"
            Set psToolTip to "Run Unit Testing program"
            Set psDescription to "If needed the program is alawys compiled first (Alt+U)"
            Set psImage to "UnitTesting.ico"
            Set psShortcut to "Ctrl+U"
            
            Procedure OnExecute Variant vCommandBarControl
                Send CompileRunProgram CS_DFUnitTest
            End_Procedure
        
        End_Object

        // Common method for oExternalProgramsToolbar and oDFRefactor_MenuItem OnExectute.
        Procedure CompileRunProgram String sProgram
            Boolean bExists bEnabled
            String sProgramPath sProgramFile sSourceFile sBinPath sHome
            
            Get DFBinPath of ghoApplication to sBinPath
            Get vFolderFormat sBinPath to sBinPath
            Get psHome of (phoWorkspace(ghoApplication)) to sHome
            Get vFolderFormat sHome to sHome
            Get psProgramPath of (phoWorkspace(ghoApplication)) to sProgramPath
            Get vFolderFormat sProgramPath to sProgramPath
            Move (sProgram + ".src") to sSourceFile

            Runprogram Wait ('"' + sBinPath + CS_Compiler + '"' * "-x" + '"' + sHome + CS_SWSFile + '"' * CS_CompOptions * sSourceFile)

            Move (Replace(".src", sSourceFile, "64.exe")) to sProgramFile
            Get vFilePathExists (sProgramPath + sProgramFile) to bExists
            If (bExists = False) Begin
                Move (Replace(".src", sSourceFile, ".exe")) to sProgramFile
                Get vFilePathExists (sProgramPath + sProgramFile) to bExists
                // If program compilation failed:
                If (bExists = False) Begin
                    Send Info_Box ("The compilation of the" * (sProgram + ".src program") * "failed and can't be started. Please check it with the Studio.")
                End
            End
            Else Begin
                Runprogram Background sProgramFile
            End
        End_Procedure
        
        Object oDFRefactor_MenuItem is a cCJMenuItem
            Set peControlStyle to xtpButtonIconAndCaption
            Set psCaption to "Run &DFRefactor"
            Set psToolTip to "Run the main DFRefactor program"
            Set psDescription to "If needed the program is alawys compiled first (Alt+D)"
            Set psImage to "DFRefactor.ico"
            Set psShortcut to "Ctrl+D"

            Procedure OnExecute Variant vCommandBarControl
                Send CompileRunProgram CS_DFRefactor
            End_Procedure
        
        End_Object

        // ToDo: Not sure if this is useful for this program. It can be
        //       started from the DFRefactor program though.
//            Object oCodeExplorer_ToolbarButton is a cCJMenuItem
//                Set peControlStyle to xtpButtonIconAndCaption
//                Set psCaption to "DataFlex Source &Explorer"
//                Set psToolTip to "DataFlex Source Explorer"
//                Set psDescription to "Run Starzen's DataFlex Source Explorer (Alt+E)"
//                Set psImage to "DataFlexSourceExplorer.ico"
//                Set psShortcut to "Alt+E"
//                Set pbActiveUpdate to True
//
//                Procedure OnExecute Variant vCommandBarControl
//                    String sProgram sSWSPath
//
//                    Get private.psStarZenSourceExplorer of ghoApplication to sProgram
//                    If (sProgram = "") Begin
//                        Send Info_Box "You first need to setup the path to StarZen's Source Code Explorer program with 'Program Settings'"
//                        Procedure_Return
//                    End
//                    Get psSWSFile of ghoApplication to sSWSPath
//                    If (sSWSPath <> "") Begin
//                        Move ("-ws" * '"' + sSWSPath + '"') to sSWSPath
//                    End
//                    // This doesn't quite work because the program is expecting a .sws file,
//                    // not a .ws file. And we don't know the .sws file in this program.
//                    Runprogram Background sProgram //sSWSPath
//                End_Procedure
//
//                Function IsEnabled Returns Boolean
//                    String sProgram sSWSPath
//                    Get psStarZenSourceExplorer of ghoApplication to sProgram
//                    Get psSWSFile of ghoApplication to sSWSPath
//                    Function_Return (sProgram <> "" and sSWSPath <> "")
//                End_Function
//
//            End_Object

        Object oSettings_Toolbarbutton is a cCJMenuItem
            Set psToolTip to "Program Settings"
            Set psCaption to "Se&ttings"
            Set psDescription to "Program Settings (Alt+T)"
            Set psImage to "Settings.ico"
            Set peControlStyle to xtpButtonIcon
            Set pbControlBeginGroup to True
            Set psShortcut to "Alt+T"

            Procedure OnExecute Variant vCommandBarControl
                Forward Send OnExecute vCommandBarControl
                Send Popup of (oProgramSetup_dg(Client_Id(ghoCommandBars)))
                Broadcast Recursive Send DoChangeFontSize of (Client_Id(ghoCommandBars))
            End_Procedure

        End_Object

        Object oScintillaEditorSettings_Mentuitem is a cCJMenuItem
            Set psCaption to "E&ditor Settings"
            Set psToolTip to "Scintilla editor settings"
            Set psDescription to "Configure the editor"
            Set psImage to "EditorSettings.ico"
            Set peControlStyle to xtpButtonIcon

            Procedure OnExecute Variant vCommandBarControl
                Forward Send OnExecute vCommandBarControl
                Send Popup of (oScintillaParameters_dg(Client_Id(ghoCommandBars)))
            End_Procedure

        End_Object

    End_Object
    
#IFDEF Is$BlingStuff
        #Include CosmeticToolbarItems.pkg
#ENDIF

        Object oExitToolbar is a cCJToolbar
            Set psTitle to "Exit Toolbar"
            Set pbEnableAnimation to True
            Set pbShowExpandButton to False

            Object oAbout_MenuItem is a cCJAboutMenuItem
                Set psCaption to C_$CaptionAbout
                Set psDescription to C_$DescAbout
                Set psToolTip to C_$ToolTipAbout
            End_Object

            Object oKoFi_MenuItem is a cCJMenuItem
                Set psCaption to "Ko-fi"
                Set psToolTip to "Bye me a coffee, to support me"
                Set psDescription to "Bye me a coffee"
                Set psImage to "Ko-fi.ico"
                Set pbControlBeginGroup to True
                Procedure OnExecute Variant vCommandBarControl
                    Runprogram Shell Background "https://ko-fi.com/nilss"
                End_Procedure
            End_Object

            Object oSuggestion_MenuItem is a cCJMenuItem
                Set psTooltip to "Suggest"
                Set psDescription to "Suggest a feature, or report a bug..."
                Set psImage to "Suggestion.ico"
                Set pbControlBeginGroup to True

                Procedure OnExecute Variant vCommandBarControl
                    Runprogram Shell Background "https://github.com/NilsSve/DfRefactor/issues/78"
                End_Procedure

            End_Object

            Object oHelpMenu is a cCJMenuItem
                Set psCaption to "Help"
                Set psToolTip to "Help"
                Set psDescription to "Help about the program (F1)"
                Set psImage to "ActionHelp.ico"
                Set peControlType to xtpControlSplitButtonPopup

                // Default action when clicking the drop-down button.
                Procedure OnExecute Variant vCommandBarControl
                    Runprogram Shell Background "https://www.rdctools.com/DFRefactor/index.html"
                End_Procedure

                Object oHelpMenuItemLocal is a cCJHelpMenuItem
                    Set psCaption to "Local HTML Help"
                End_Object

                Object oHelpMenuItemInternetBrowser is a cCJMenuItem
                    Set psCaption to "Online HTML Help"
                    Set psImage to "ActionHelpInternet.ico"
                    Procedure OnExecute Variant vCommandBarControl
                        Runprogram Shell Background "https://www.rdctools.com/DFRefactor/index.html"
                    End_Procedure

                End_Object

                Object oHelpGitHub is a cCJMenuItem
                    Set psCaption to "GitHub source code repository"
                    Set psToolTip to "Link to GitHub source code repository"
                    Set psDescription to "Github source code"
                    Set psImage to "GitHub.ico"
                    Set pbControlBeginGroup to True
                    Procedure OnExecute Variant vCommandBarControl
                        Forward Send OnExecute vCommandBarControl
                        Runprogram Shell Background "https://github.com/NilsSve/DFRefactor.git"
                    End_Procedure
                End_Object
                
            End_Object

            Object oExitMenuItem is a cCJExitMenuItem
                Set psImage to "ActionExit.ico"
                Set psToolTip to "Exit"
                Set psDescription to "Exit the program (Alt+F4)"
                Set pbControlBeginGroup to True
            End_Object

        End_Object

        Object oStatusBar is a cCJStatusBar
            Set StatusBar_Id to Self
            Set psIdleText to "No Action"

            Object oStatusPane1 is a cCJStatusBarPane
                Set piID to sbpIDIdlePane
                Set pbStyleStretch to True
            End_Object

            Object oStatusPane2 is a cCJStatusBarPane
                Set phoViewPane to Self
                Set pbStyleStretch to True
            End_Object

            // Made these objects mimic NotePad++
            Object oNumberOfCharacters_StatusbarPane is a cCJStatusBarPane
                Set psText to "length:"
            End_Object

            Object oNumberOfLines_StatusbarPane is a cCJStatusBarPane
                Set psText to "lines:"
            End_Object

            Object oUTF8_OEM_Text is a cCJStatusBarPane
                Set psText to "OEM"
            End_Object

            Object oStatusCaps is a cCJStatusBarPane
                Set piId to sbpIDCapslock
            End_Object
        
            Object oStatusNumLock is a cCJStatusBarPane
                Set piId to sbpIDNumLock
            End_Object

            Procedure Set NumberOfEditorLines String sText
                Move (FormatValue(sText, ",###")) to sText
                Set psText of oNumberOfLines_StatusbarPane to ("lines:" * String(sText))
            End_Procedure

            Procedure Set NumberOfEditorCharacters String sText
                Move (FormatValue(sText, ",###")) to sText
                Set psText of oNumberOfCharacters_StatusbarPane to ("length:" * String(sText))
            End_Procedure

            Procedure Set StatusText String sText
                Set psText of oStatusPane1 to sText
            End_Procedure                          
            
            Procedure Set ActionText String sText
                Handle hoViewPane
                Get phoViewPane to hoViewPane
                Set psText of hoViewPane to sText
            End_Procedure

            Procedure Set UTF8Text String sText
                Set psText of (oUTF8_OEM_Text(Self)) to sText
            End_Procedure
            
        End_Object
        
    End_Object

    Object oClientArea is a ClientArea
//        Use Dd_debug.dg
        Use ScintillaParameters.dg
        Use CompilerOutput.dg
        Use EngineErrorLog.dg
        Use EngineLogFile.dg
        Use ProgramSetup.dg
        Use ShowOtherLogFiles.dg
          
          // Function maintenance is not needed anymore.
          // Instead it is the meta-tag data from the 
          // function library that is used.
//        Use FunctionMaintenance.vw 
          // Test:
//        Use SortSourceCode.vw
        Use JSONExportImport.vw
        Use SelectFunctions.vw
        Use RefactorTestBench.vw

        // Sorting function for package file Classes, Procedures & Functions.
        //Use SortSourceCode.vw
        
        Use StdAbout.pkg
        Procedure Activate_About
            String sTestGroup
            // Below logic in DFAbout has been replaced, so if the first four parameters are blank, an About.rtf file
            // in the Help folder, will be read into the cRichEdit object of hte DFAbout dialog.
            Send DoAbout "" "" "" "" "DFRefactorTest72x72.bmp"
        End_Procedure
    
        // We doesn't allow closing of a view - it just doesn't make
        // sense with a tabbed interface.
        Function Exit_Loss_Confirmation for cUIObject Returns Integer
            Function_Return 1
        End_Function

        On_Key Key_Ctrl+Key_W  Send Execute of (oToggleWhiteSpaceItm(ghoCommandBars))
        On_Key Key_Ctrl+Key_I  Send Execute of (oToogleIndentationGuides(ghoCommandBars))
        On_Key Key_Ctrl+Key_S  Send Execute of (oSave_ToolItem(ghoCommandBars))
        On_Key Key_Ctrl+Key_R  Send Execute of (oRefresh_ToolItem(ghoCommandBars))
        On_Key Key_Ctrl+Key_F5 Send Execute of (oRefactor_ToolItem(ghoCommandBars))
        On_Key Key_Ctrl+Key_M  Send Execute of (oCompare_MenuItem(ghoCommandBars))
        On_Key Key_F5          Send Execute of (oCompile_ToolItem(ghoCommandBars))
        On_Key Key_Ctrl+Key_E  Send Execute of (oErrorLog_ToolItem(ghoCommandBars))
        On_Key Key_Ctrl+Key_U  Send Execute of (oUnitTest_MenuItem(ghoCommandBars))
        On_Key Key_Ctrl+Key_O  Send SelectSourceFile of ghoApplication
        On_Key Key_Ctrl+Key_Tab           Send Switch_Next_View
        On_Key Key_Ctrl+Key_Shift+Key_Tab Send Switch_Prior_View
    End_Object

    // This will exit the application regardless if there is a change or not.
    // The reason for this is that there seems to be a focus issue with the app.
    // If we activate the "Changes Exists. Do you want to exit?" dialog and answer "No",
    // the app will seem to be hung, aka it doesn't respond to input any more because the
    // focus tree is confused.
    Function Verify_Exit_Application Returns Integer
        Function_Return 0
    End_Function
    
    Procedure End_Construct_Object
        Forward Send End_Construct_Object
        Set Icon to "DFRefactorTest.ico"
    End_Procedure

    On_Key C_CtrlShiftTab   Send Switch_Prior_View
    On_Key Key_Ctrl+Key_Tab Send Switch_Next_View
End_Object

//Send Switch_Prior_View of (Client_Id(phoMainPanel(ghoApplication)))

//  - If you get a compile error: "Can't include resource ..\HELP\ABOUT.RTF",
//    you need to create a "About.rtf" file in the Help folder.
//    Note that it can be empty, but it needs to exist for the About dialog.
//    Or you can remark line 1302 in DfAbout.pkg = "Define ShouldEmbeddAboutHelpFile for 0"
// -  If you get a compile Error 4295: "xxx Can't include resource FILELISTBACKUPFILE.CFG",
//    you will need to manually make a copy of the Filelist.cfg in the Data folder -> "FilelistBackupFile.cfg"
Start_UI
