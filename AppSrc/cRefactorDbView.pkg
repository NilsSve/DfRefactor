// Copyright (c) 2018 Nils Svedmyr, RDC Tools International
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to Use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to Do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in All
// copies or substantial portions of the Software.
//
// THE SOFTWARE is PROVIDED "AS IS", WITHOUT WARRANTY of ANY KIND, EXPRESS or
// IMPLIED, INCLUDING BUT not LIMITED to THE WARRANTIES of MERCHANTABILITY,
// FITNESS for a PARTICULAR PURPOSE and NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS or COPYRIGHT HOLDERS BE LIABLE for ANY CLAIM, DAMAGES or OTHER
// LIABILITY, WHETHER IN an ACTION of CONTRACT, TORT or OTHERWISE, ARISING from,
// OUT of or IN CONNECTION WITH THE SOFTWARE or THE Use OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// Nils 2018-08-21
// Various source code refactoring functions/procedures
// for the DFRefactor project.
//
Use Dfclient.pkg
Use RefactorConstants.inc

Declare_Datafile SysFile
Declare_Datafile Functions
Declare_Datafile FolderSelHeaA
Register_Function SelectedItems Returns Integer
Register_Function SelectedFunctions Returns Integer
Register_Procedure DisplayUnusedSourceFilesDialog

Class cRefactorDbView is a dbView

    Procedure Construct_Object
        Forward Send Construct_Object

        Set Border_Style to Border_Thick
        Set pbAutoActivate to True

//        Property String  psLineBreak ""
//        Property Boolean pbLastLineBreak False
        
        // Object handles:
        Property Handle private.phoEditor
        Property Handle phoRefactorEngine 
        
        Set Verify_Save_msg to (RefFunc(No_Confirmation))

        On_Key Key_Ctrl+Key_S  Send Request_Save
        On_Key Key_Escape      Send None
        On_Key Key_Ctrl+Key_F4 Send None   
    End_Procedure

    Procedure Set phoEditor Handle ho
        Set private.phoEditor to ho
        Set phoEditor of ghoRefactorFuncLib to ho
    End_Procedure
    
    Function phoEditor Returns Handle
        Function_Return (private.phoEditor(Self))
    End_Function
        
    Procedure RefactorCheckboxChanged Boolean bState Handle hObject Boolean bReportFunction
    End_Procedure

    Procedure WaitForFileToGetWritten String sFile
        Integer iCh iMaxSec
        Boolean bOK bExist
        DateTime dtStart dtStartCheck
        TimeSpan tsTime

        Move False to bOK
        Move 3 to iMaxSec
        Get vFilePathExists sFile to bExist
        If (bExist = False) Begin
            Procedure_Return
        End
        Move (CurrentDateTime()) to dtStart
        Get Seq_New_Channel to iCh   
        // No channel available 
        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Error "No Channel Available for Process: Procedure 'WaitForFileToGetWritten'"
            Procedure_Return
        End
        
        Repeat
            Direct_Input channel iCh
            Move (SeqEof = False) to bOK
            If (bOK = False) Begin
                Close_Input channel iCh
            End
            Move (CurrentDateTime()) to dtStartCheck
            Move (dtStartCheck - dtStart) to tsTime
            If (SpanSeconds(tsTime) > iMaxSec) Begin
                Move True to bOK
            End
        Until (bOK = True)

        Close_Input channel iCh
        Send Seq_Release_Channel iCh
    End_Procedure

    Function pbShouldSave Returns Boolean
        Boolean bChanged bIsReadOnly
        Handle hoEditor

        Get phoEditor to hoEditor
        If (hoEditor <> 0) Begin
            Get CM_IsModified of hoEditor to bChanged
            Get CM_IsReadOnly of hoEditor to bIsReadOnly
        End
        Function_Return (bChanged = True and bIsReadOnly = False)
    End_Function

    Procedure Request_Save
        Handle hoEditor
        Boolean bChanged

        Get phoEditor to hoEditor
        Get pbShouldSave to bChanged
        If (hoEditor <> 0 and bChanged = True) Begin
            Send SaveFile of hoEditor
        End  
        Forward Send Request_Save
    End_Procedure

    Procedure Request_Clear
        Handle hoEditor
        Get phoEditor to hoEditor
        If (hoEditor <> 0) Begin
            Send Delete_Data of hoEditor
        End
        Send UpdateStatusBar "" False   
        Forward Send Request_Clear
    End_Procedure

    Procedure Request_Clear_All
        Handle hoEditor
        Get phoEditor to hoEditor
        If (hoEditor <> 0) Begin
            Send Delete_Data of hoEditor
        End
        Send UpdateStatusBar "" False  
        // ToDo: I don't quite understand this, but if we forward send
        // it activates the EditorView.vw!?
        // Forward Send Request_Clear_All
    End_Procedure

    Procedure UpdateStatusBar String sText Boolean bIdleTextOnly Integer iLi Integer iChrs
        Handle hoStatusBar
        Integer iLines iCharacters

        Move (StatusBar_Id(Self)) to hoStatusBar
        If (num_arguments > 2) Begin
            Move iChrs to iCharacters
            If (iCharacters = 0) Begin
                Move 0 to iLines
            End                 
            Else Begin
                Move iLi to iLines
            End
            Set NumberOfEditorLines      of hoStatusBar to iLines
            Set NumberOfEditorCharacters of hoStatusBar to iCharacters
        End
        Else Begin
            If (bIdleTextOnly = True) Begin
                Set psIdleText of hoStatusBar to sText
                Set ActionText of hoStatusBar to ""
            End
            Else Begin
                Set ActionText of hoStatusBar to sText
            End
        End
    End_Procedure

    // To enable Ctrl+MouseWheel in the grid to change font size.
    Procedure OnWmMouseWheel Integer wParam Integer lParam
       Integer iKeys iClicks iX iY iCONTROL
       Short iDelta     // Short signed integer
       Boolean bok 
       
       Move 0 to iDelta
       Move (Low(wParam)) to iKeys           // any keys down when pressed
       Move (MemCopy(AddressOf(iDelta),AddressOf(wParam)+2,2)) to bok
       // C_WHEELDATA is 120 as defined by MS as the delta to react to. Once click is usually 120
       Move (iDelta/C_WHEELDELTA) to iClicks // Number of clicks to react to
       Move (Low(lParam)) to iX  // cursor position
       Move (Hi(lParam)) to iY   

       Move (iKeys iand MK_CONTROL ) to iCONTROL  //$008
       If (iCONTROL) Begin
            Broadcast Recursive Send ScaleFont iClicks
       End

       // Tell windows that we've handled the event.    
       Set Windows_Override_State to True    
    End_Procedure
        
End_Class
