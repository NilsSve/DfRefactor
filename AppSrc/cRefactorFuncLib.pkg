// Copyright (c) 2018 Nils Svedmyr, RDC Tools International
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to Use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to Do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in All
// copies or substantial portions of the Software.
//
// THE SOFTWARE is PROVIDED "AS IS", WITHOUT WARRANTY of ANY KIND, EXPRESS or
// IMPLIED, INCLUDING BUT not LIMITED to THE WARRANTIES of MERCHANTABILITY,
// FITNESS for a PARTICULAR PURPOSE and NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS or COPYRIGHT HOLDERS BE LIABLE for ANY CLAIM, DAMAGES or OTHER
// LIABILITY, WHETHER IN an ACTION of CONTRACT, TORT or OTHERWISE, ARISING from,
// OUT of or IN CONNECTION WITH THE SOFTWARE or THE Use OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//
//     *** NOTE: All functions have been mode to an object: oRefactorFunclib.pkg ***
//        To add a function for that package, two things are needed:
//
//     1) Add the code as a function to the oRefactorFuncLib.pkg object package,
//        with the same parameters as the existing functions are using.
//     2) Register the function using meta-tags. See the functions in the
//        oRefactorFuncLib.pkg file for samples.
//        There you can also learn more about different types of functions and
//        their requested parameters.
//     3) (Optional). If you need to include your own personal refactoring functions,
//                    add them to the 'UserDefinedRefactorFunctions.pkg'. That file
//                    is included by the oRefactorFuncLib object file.
//
Use cBaseFuncLib.pkg
Use cFunctionsDataDictionary.dd

Class cRefactorFuncLib is a cBaseFuncLib

    Procedure Construct_Object
        Forward Send Construct_Object
        // Set by RegisterInterface
        Property tFuncLib[] pFuncLibArray
    End_Procedure

    Procedure End_Construct_Object
        Handle hoDD
        tFuncLib[] FuncLibArray

        Forward Send End_Construct_Object
        // Init class interface
        Send _AddAllKeyWords
        Send _InitializeFuncLib

        // Update Functions table with meta-tag data
        Get Create (RefClass(cFunctionsDataDictionary)) to hoDD
        Get pFuncLibArray to FuncLibArray
        Send UpdateDataFromMetaTags of hoDD FuncLibArray
        Send Destroy of hoDD
    End_Procedure

    // Collect function meta-tags data in class pFuncLibArray struct array property.
    Procedure RegisterInterface Handle hMsg String sMsgName String sParams String sComment
        Handle hNewTest       
        String sReturnType
        tFuncLib   FuncLib
        tFuncLib[] FuncLibArray
        tFuncParam[] FuncParamArray
        tFuncEnumList FuncEnumList
        
        If (Left(sMsgName, 4) = "msg_") Begin
            Move (Replace("msg_", sMsgName, "")) to sMsgName
        End
        If (Left(sMsgName, 4) = "get_") Begin
            Move (Replace("get_", sMsgName, "")) to sMsgName
        End
        
        If (sComment = "") Begin 
            // This is considered to be a fatal error:
            Error DFERR_PROGRAM "Library Function's meta tag '{ Description}' missing! Program will now Exit!"
            Send Exit_Application
        End

        Get ParseComment sComment to FuncLib

        If (sParams <> "") Begin
            Get ParseParams sParams (&sReturnType) to FuncParamArray
            Move FuncParamArray to FuncLib.FuncParamArray 
            Move sReturnType    to FuncLib.sReturnType
        End
        
        Get pFuncLibArray to FuncLibArray
        Move sMsgName     to FuncLib.sName
        Move FuncLib      to FuncLibArray[-1] 
        Move (SortArray(FuncLibArray)) to FuncLibArray
        Set pFuncLibArray to FuncLibArray
    End_Procedure
    
    // Helper function for Procedure RegisterInterface.
    Function ParseParams String sParams String ByRef sReturnType Returns tFuncParam[]
        tFuncParam[] FuncParamArray
        String[] asParams
        Integer iCount iSize iParam

        Move 0 to iParam
        Move (StrSplitToArray(sParams, " ")) to asParams
        Move (SizeOfArray(asParams)) to iSize
        Decrement iSize
        For iCount from 0 to iSize
            If (Lowercase(asParams[iCount]) = "returns") Begin
                Increment iCount
                Move asParams[iCount] to sReturnType
                Move iSize to iCount // Get out of here.
            End
            Else Begin
                Move asParams[iCount] to FuncParamArray[iParam].sType
                Increment iCount
                If (Lowercase(asParams[iCount]) = "byref") Begin
                    Move True to FuncParamArray[iParam].bByRef
                    Increment iCount
                End
                Move asParams[iCount] to FuncParamArray[iParam].sVarName 
                Increment iParam
            End
        Loop    
        Function_Return FuncParamArray
    End_Function 
    
    // Helper function for Procedure RegisterInterface.
    Function ParseComment String sComment Returns tFuncLib
        tFuncLib FuncLib
        tFuncEnumList FuncEnumList
        String[] asComments asEnumList
        String sFunctionType sInitialValue sSummaryText
        Integer iSize iCount iItem i iPos
        Boolean bIsMultiLine
        
        Get IsMultiLineComment sComment to bIsMultiLine
        If (bIsMultiLine = False) Begin
            Move sComment to FuncLib.sHelp
            Function_Return FuncLib
        End 
        
        Get ParseHelpText sComment to FuncLib.sHelp
        If (FuncLib.sHelp <> "") Begin
            Move (Replace(FuncLib.sHelp, sComment, "")) to sComment
        End
        
        Move (StrSplitToArray(sComment, CS_CRLF)) to asComments
        Move (SizeOfArray(asComments)) to iSize 
        
        Decrement iSize
        For iCount from 0 to iSize
            If (Lowercase(asComments[iCount]) contains "{" and Lowercase(asComments[iCount]) contains "}") Begin
                If (Lowercase(asComments[iCount]) contains "methodtype") Begin
                    Move asComments[iCount] to sFunctionType
                    Move (Pos("=", sFunctionType)) to iPos
                    Move (Mid(sFunctionType, Length(sFunctionType), (iPos +1))) to sFunctionType
                    Move (Trim(Replace("}", sFunctionType, ""))) to sFunctionType
                    Move sFunctionType to FuncLib.eFunctionType
                End
                Else If (Lowercase(asComments[iCount]) contains "summarytext") Begin
                    Move asComments[iCount] to sSummaryText
                    Move (Pos("=", sSummaryText)) to iPos
                    Move (Mid(sSummaryText, Length(sSummaryText), (iPos +1))) to sSummaryText
                    Move (Trim(Replace("}", sSummaryText, ""))) to sSummaryText
                    Move sSummaryText to FuncLib.sSummary
                End 
                Else If (Lowercase(asComments[iCount]) contains "enumlist") Begin
                    Get ParseEnumList asComments[iCount]             to FuncEnumList.asEnumList
                    Move (SizeOfArray(FuncEnumList.asEnumList) <> 0) to FuncLib.bFuncEnumList
                End 
                Else If (Lowercase(asComments[iCount]) contains "initialvalue") Begin
                    Move asComments[iCount] to sInitialValue
                    Move (Pos("=", sInitialValue)) to iPos
                    Move (Mid(sInitialValue, Length(sInitialValue), (iPos +1))) to sInitialValue
                    Move (Trim(Replace("}", sInitialValue, ""))) to sInitialValue
                    Move sInitialValue to FuncEnumList.sInitialValue
                End
            End
            Else If (Lowercase(asComments[iCount]) contains "{" and Lowercase(asComments[iCount]) contains "helptopic") Begin
                Get ParseHelpTopic iCount asComments to FuncEnumList.sParamHelp 
                Move iSize to iCount
            End
        Loop
                
        Move FuncEnumList to FuncLib.FuncEnumList
        Function_Return FuncLib
    End_Function 
    
    // Helper function for Procedure RegisterInterface.
    Function IsMultiLineComment String sComment Returns Boolean
        Boolean bOK
        String sMetaTagMulti
        
        Move (sComment contains '{' and sComment contains '}') to bOK
        Function_Return bOK
    End_Function
    
    // Helper function for Procedure RegisterInterface.
    //
    // This will make sure that no formatting is lost for the Help text.
    // Else the StrSplitToArray would remove how the help text is written
    // for the { Description = meta-tag for a function.
    Function ParseHelpText String sComment Returns String
        String sHelpText
        Integer iPos
        
        Move "" to sHelpText
        Move (Pos('{', sComment)) to iPos
        If (iPos <> 0) Begin
            Move (Left(sComment, (iPos -1))) to sHelpText    
        End
        
        Function_Return sHelpText
    End_Function
    
    // Helper function for Procedure RegisterInterface.
    Function ParseEnumList String sEnumList Returns String[]
        String[] asEnumList
        Integer iSize iCount iPos
        
        Move (Pos("=", sEnumList)) to iPos
        Move (Mid(sEnumList, Length(sEnumList), (iPos +1))) to sEnumList
        Move (Trim(Replace("}", sEnumList, ""))) to sEnumList
        Move (StrSplitToArray(sEnumList, ",")) to asEnumList
        Function_Return asEnumList
    End_Function
    
    // Helper function for Procedure RegisterInterface.
    Function ParseHelpTopic Integer iStart String[] asComments Returns String
        String sParamHelp sText
        Integer iSize iCount iPos
        
        Move "" to sParamHelp
        Move (SizeOfArray(asComments)) to iSize
        Decrement iSize
        For iCount from iStart to iSize
            Move asComments[iCount] to sText
            Move (Pos("=", sText)) to iPos
            If (iPos <> 0) Begin
                Move (Mid(sText, Length(sText), (iPos +1))) to sText
                Move (Trim(Replace("}", sText, ""))) to sText
            End
            Append sParamHelp sText
        Loop 
        Move (Replaces("\n", sParamHelp, CS_CRLF)) to sParamHelp 
        Function_Return sParamHelp
    End_Function
    
    // This *must* be called *once* per source line, *before* any of the refactor functions are called.
    // It calls the Tokenizer function and sets the class property pTokenizer that is used
    // by refactoring functions in this class!
    // The call is made automatically by the refactoring engine, but there are special cases were
    // this also needs to be done manually.
    Procedure InitializeTokenizer String sLine
        tTokenizer TokenizerData
        // Note: This function call also sets the pTokenizer class property.
        Get Tokenizer sLine to TokenizerData
    End_Procedure

End_Class
