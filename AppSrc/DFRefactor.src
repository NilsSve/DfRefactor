//****************************************************************************
// $Module type: Program
// $Module name: DFRefactor
// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
// Web-site    : http://www.rdctools.com
// Created     : 2018-08-05 @ 09:50 (Military date format: YY-MM-DD)
//
// Description : Code Refactor functions for DataFlex.
//
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
//****************************************************************************
Use DFAllEnt.pkg
Use cCJStandardCommandBarSystem.pkg
Use cCJCommandBarSystem.pkg
Use File_dlg.pkg
Use gFormatNumbers.pkg
Use cWorkspaceMenuItem.pkg
Use vWin32fh.pkg
Use cCJSkinFramework.pkg

// Uncomment this define statement to show a "Theme selector" combo-button and
// a "Snap Shot" camera iton in the toolbar.
Define CI_ShowBlingStuff

// Not sure why we need this, but it somehow is linked to the "OnIdle events"
Procedure Exit_Application for cDesktop
    Send SuspendGUI of Desktop True
    If (Exit_System_Confirmation(Self)) ;
        Abort
End_Procedure

Object oHtmlHelp is a cHtmlHelp
    Set pbAlwaysOnTop to False
End_Object

// Dummy messages that are called from the toolbars; in case they
// doesn't exist in a view. This avoids runtime errors.
Function pbShouldSave Desktop Returns Boolean
    Function_Return False
End_Function

Function BackupFile Desktop Returns String
    Function_Return ""
End_Function

Procedure OpenSourceFile Desktop
End_Procedure

Procedure Compare Desktop String sCompareApp
End_Procedure

Procedure OnWorkspaceLoaded Desktop
End_Procedure

Procedure LoadFile Desktop String sFileName
End_Procedure

External_Function GetACP "GetACP" kernel32.dll Returns Integer
Register_Procedure DoChangeFontSize

Enum_List
    Define CI_CleanupSource
    Define CI_CodeIndenter
End_Enum_List

// Needs to be _before_ the cApplication object as we refer to it there.
// However, the package itself must be Used _after_ the ghoApplication object,
// as it contains references to the phoWorkspace property. (Kind of catch 22).
#IFNDEF ghoEditorProperties
    Global_Variable Integer ghoEditorProperties
    Move 0 to ghoEditorProperties
#ENDIF

Declare_Datafile FolderSelHea

Use cRefactorApplication.pkg

Object oApplication is a cRefactorApplication
    Set psProduct to "DFRefactor"
    Set psCompany to "RDC Tools International"
    Set peHelpType to htHtmlHelp
    Set psHelpFile to "DFRefactor.chm"

    Procedure Set psSWSFile String sSWSFile
        Handle hoCombo
        Integer iItem iCount
        String sListItem
        
        Forward Set psSWSFile to sSWSFile
        If (ghoCommandBars > 0) Begin
            Send DisplayWorkspaceItem of (oWorkspaceSelector_Menuitem(ghoCommandBars)) sSWSFile
            If (hoCombo > 0) Begin
                Get ComListCount of hoCombo to iCount
                For iItem from 0 to iCount
                    Get ComList of hoCombo iItem to sListItem
                    If (sListItem = "Select Workspace:") Begin
                        Set ComListIndex of hoCombo to iItem
                    End
                Loop
                Send Destroy of hoCombo
            End
        End
    End_Procedure
    
    Procedure OnFileNameUpdate String sFileName
        String sText sFileBrowseText sFileNameOnly

        If (sFileName <> "") Begin
            Move sFileName to sText
            Get ParseFileName sFileName to sFileNameOnly
            Move CS_CurrentSourceFileTxt to sFileBrowseText
        End
        Else Begin
            Move CS_BrowseSourceFileTxt to sFileBrowseText
            Move CS_NoActiveSourceFileText to sText
        End

        Set psCurrentSourceFileName to sFileName
        If (phoMainPanel(Self) <> 0) Begin
            Set psCaption of (oOpenFolderMenuItem(ghoCommandBars))      to sFileBrowseText
            Set psCaption of (oSourceFileText_MenuItem(ghoCommandBars)) to sFileNameOnly
            Set psToolTip of (oSourceFileText_MenuItem(ghoCommandBars)) to sText
            Set pbChecked of (oSourceFileText_MenuItem(ghoCommandBars)) to (sText <> "")
        End
    End_Procedure

    Procedure ToggleWorkspaceMode
        Boolean bState
        Get pbWorkspaceMode to bState
        If (oWorkspaceRadio_MenuItem(ghoCommandBars) <> 0) Begin
            Set pbChecked of (oWorkspaceRadio_MenuItem(ghoCommandBars)) to bState
        End
        If (oFileRadioMenuItem(ghoCommandBars) <> 0) Begin
            Set pbChecked of (oFileRadioMenuItem(ghoCommandBars)) to (not(bState))
        End
    End_Procedure

    Procedure SelectSourceFile
        Boolean bOpen bReadOnly bExists
        String  sFileName sHomePath sAppSrcPath sInitialFolder
        Handle ho

        Move (phoOpenSourceFileDialog(Self)) to ho
        Get Initial_Folder of ho to sInitialFolder
        If (sInitialFolder = "") Begin
            Get psHomePath to sHomePath
            // If an "AppSrc" folder exists we want to display those source files.
            Get vFolderFormat sHomePath to sAppSrcPath
            Move (sAppSrcPath + "AppSrc") to sAppSrcPath
            Get vFolderExists sAppSrcPath to bExists
            If (bExists = True) Begin
                Move sAppSrcPath to sHomePath
            End

            Set Initial_Folder of ho to sHomePath
        End
        Get Show_Dialog of ho to bOpen
        If (bOpen = True) Begin
            Get File_Name of ho to sFileName
            // Check if user is opening file as read_only
            Get TickReadOnly_State of ho to bReadOnly
            If (bReadOnly = True) Begin
                Send Info_Box ("Files should not be opened as ReadOnly.") "Warning!"
            End
            Else Begin
                Set pbWorkspaceMode to False
                Send OnFileNameUpdate sFileName
                Send LoadFile of (phoEditor(Self)) sFileName
                Send Activate_oEditorView_vw of (Client_Id(phoMainPanel(Self)))
            End
        End
    End_Procedure

    // Command Line Interface:
    //
    // Enables to pass a path to an folder or filename on the command line,
    // and add something like this to the Studio's Tools menu:
    // Label:                Command:                                                 Parameters:
    // "DFRefactor" "C:\Projects\DFRefactor\Programs\DFRefactor.exe" "<project>"
    // Note: This Studio setup can be done from the ProgramSetup.dg dialog.
    Procedure OnCreate
        Handle hoCommandLine
        String sSourceFile sSWSFile
        Integer iWin10BetaSetting

        // Test for serious Windows 10 "bug": "https://support.dataaccess.com/Forums/showthread.php?64797-Recent-Microsoft-Changes-to-Windows-10-May-Impact-Functionality-and-or-Data-Integrity"
        Move (GetACP()) to iWin10BetaSetting
        If (iWin10BetaSetting = 65001) Begin
            Send Info_Box ("Windows 10 ouch! This workstation has its BETA option set to TRUE. This means that the normal codepage that DataFlex relies on does not work. This also means that some refactoring functions will fail. Program will now exit!")
            Send vShellExecute "Open" "https://support.dataaccess.com/Forums/showthread.php?64797-Recent-Microsoft-Changes-to-Windows-10-May-Impact-Functionality-and-or-Data-Integrity" "" ""
            Send Exit_Application
        End
        
        Set psStartupProgramPath to (psProgramPath(phoWorkspace(Self)))
        Set psStartupBitmapPath  to (psBitmapPath(phoWorkspace(Self)))

        Get phoCommandLine to hoCommandLine
        If (hoCommandLine > 0) Begin
            Get Argument of hoCommandLine 1 to sSWSFile
            Get Argument of hoCommandLine 2 to sSourceFile
            Move (Trim(sSourceFile)) to sSourceFile
            If (Right(sSourceFile, 1) = CS_DirSeparator) Begin
                Move (Left(sSourceFile, (Length(sSourceFile) -1))) to sSourceFile
            End
            // We need to send these messages in this order:
            Send UpdateWorkspaceSelectorDisplay sSWSFile
            Send OnFileNameUpdate sSourceFile
        End
    End_Procedure

End_Object

Use cDbUpdateHandler.pkg
Object oDbUpdateHandler is a cDbUpdateHandler
    Set piDbVersionFileNumber  to 363
    Set piDbVersionFieldNumber to 1
    Set pbAutoCreateDbVersionTable to True   

    Use DUF_MultipleTables1_0.pkg
    Use DUF_MultipleTables1_1.pkg
End_Object
                                
Use SelectWorkspace.dg
Send Popup of oSelectWorkspace_dg

Use cToolTipController.pkg
Object oToolTipController is a cToolTipController
    Move Self to ghoToolTipController
    Set piIcon to TTI_INFO
    Set psTitle to "Info"
    Set piMaxWidth to 250
    Set piDurationPopup to 14000    // 14 seconds, needed for long tooltips.
    Set pbUsePrefix to True
End_Object

Open SysFile
Open StatLog
Register_Object oSysfile_DD

Use cRefactorFuncLib.pkg
Use cRDCCJSelectionGrid.pkg
Use cSciLexer.h
Use CaptureWindow.pkg
Use oEditorProperties.pkg
Use oEditContextMenu.pkg
Use oDEOEditContextMenu.pkg

Object oMain is a Panel
    Set Label to (psProduct(ghoApplication) * "- Refactor DataFlex Legacy Source Code")
    Set Size to 310 550
    Set piMinSize to 294 550

    Object oCJCommandBarSystem is a cCJCommandBarSystem
        Set pbTimerUpdate to True
        Set piLayoutBuild to 8
        Set pbToolBarAccelTips to True
        Set pbTabbedWorkspaces to True
        Set pbAutoResizeIcons to True
//        Set peVisualTheme to xtpThemeOffice2016Publisher

        Procedure OnCreateCommandBars
            Send DoChangeToolTipFormat
        End_Procedure

        Procedure OnCreateTabbedWorkspace Handle hoTabWorkspace Handle hoTabPaintManager
            Send DisplayTabWorkspace
        End_Procedure

        Procedure DisplayTabWorkspace
            Handle hoTab hoPaintManager hoOptions
            Variant vTab vPaintManager
            Integer iSize iType

            If (not(IsComObjectCreated(Self))) Begin
                Procedure_Return
            End

            Get OptionsObject to hoOptions

            // Create the tab workspace object. It will get created for the Client_Area so
            // each view will be displayd on a separate tab-page (instead of the standard DF MDI-interface)
            Get Create (RefClass(cCJTabWorkspace)) to hoTab
            // Enable or disable tab pages. (bShow = True/False)
            Get ComShowTabWorkspace True to vTab
            // Connect the CodeJock side to the VDF proxy object.
            Set pvComObject               of hoTab to vTab
            Set ComAutoTheme              of hoTab to False    

            Get Create (RefClass(cCJTabPaintManager)) to hoPaintManager
            Get ComPaintManager of hoTab        to vPaintManager
            Set pvComObject   of hoPaintManager to vPaintManager

            // Don't show the tab-pages "close" and next/prev buttons.
            Set ComFlags of hoTab to xtpWorkspaceHideAll

            Move 16 to iSize
            Send ComSetIconSize of hoPaintManager iSize iSize   // Set icon size for Tab-workspace.
            Send ComSetPopupIconSize of hoOptions 24 24
            // To show or not to show tab-page icons...
            Set ComShowIcons    of hoPaintManager to True

            // Sets the tab-pages to display on the left side, instead of at the top:
            Get ReadInteger of ghoApplication CS_Settings CS_TabPosition xtpTabPositionLeft to iType
            Set ComPosition     of hoPaintManager to iType

            // This will truncate the middle part of long items
            //Set ComDrawTextPathEllipsis of hoPaintManager to True

            Get piToolbarIconSize of ghoApplication to iSize
            Set piToolbarIconSize to iSize
            Set ComToolTipBehaviour of hoPaintManager to xtpTabToolTipAlways // We _must_ have this for tooltips to show on tab-pages (views)

            Send SetTheTheme (peVisualTheme(Self))
//            Broadcast Recursive Set Color of (Client_Id(ghoCommandBars))     to clDarkTheme
//            Broadcast Recursive Set TextColor of (Client_Id(ghoCommandBars)) to clDarkThemeText 

            Send ComRecalcLayout
            Send Destroy of hoTab
            Send Destroy of hoPaintManager
        End_Procedure

        Procedure DoChangeToolTipFormat
            Variant vToolTip
            Handle  hoObject
            Integer iToolTipStyle
            Boolean bIsBalloonStyleSupported

            Get ComToolTipContext to vTooltip
            Get Create (RefClass(cCJToolTipContext)) to hoObject
            Set pvComObject of hoObject to vTooltip
            Move xtpToolTipStandard to iToolTipStyle
            
            // Baloon tooltip style requires IE 5.0 or later, so check if installed.
            // The ComShowTitleAndDescription also requires IE 5.0.
            Get ComIsBalloonStyleSupported of hoObject to bIsBalloonStyleSupported
            If (bIsBalloonStyleSupported = False) Begin
                // If not supported we cannot show baloon tooltip; use standard style instead.
                If (iToolTipStyle = xtpToolTipBalloon) Begin
                    Move xtpToolTipStandard to iToolTipStyle
                End
            End
            If (bIsBalloonStyleSupported = True) Begin
                Send ComShowTitleAndDescription of hoObject True xtpToolTipIconInfo
            End
            
            Set ComStyle            of hoObject to iToolTipStyle
            Set ComShowOfficeBorder of hoObject to True
            Set ComShowShadow       of hoObject to True
            // Set the max width for a tooltip. 250 just seems to be a good
            // compromise. After 250 pixels the text will wrap to the next line automatically.
            Set  ComMaxTipWidth     of hoObject to 250 // In pixels
            Send Destroy            of hoObject
            
            If (phoStatusBar(ghoCommandBars)) Begin
                Send DoChangeToolTipFormat of (phoStatusBar(Self))
            End
        End_Procedure

        Procedure Set piToolbarIconSize Integer iSize
            Handle hoOptions

            If (not(IsComObjectCreated(Self))) Begin
                Procedure_Return
            End
            If (iSize < 16) Begin
                Move 32 to iSize
            End
            Set pbLargeIcons to (iSize = 32)
            Get OptionsObject to hoOptions
            Send ComSetIconSize of hoOptions False iSize iSize  // Set icon size for Toolbar buttons.
            Send ComRecalcLayout
        End_Procedure
                
        Procedure SetTheTheme Integer eTheme
            Get ReadInteger of ghoApplication CS_Settings CS_ThemeKeyWord (peVisualTheme(Self)) to eTheme
            Set peVisualTheme to eTheme
            Send ComRecalcLayout
        End_Procedure

        Object oWorkspace_Toolbar is a cCJToolbar
            Set pbDockNextTo to False
            Set peStretched to stStretchShared
            Set pbCloseable to False
            Set pbCustomizable to False

            Object oWorkspaceSelectorText_Menuitem is a cCJMenuItem
                Set psCaption to CS_SelectWorkspaceText
                Set psToolTip to "Select Workspace"
                Set psDescription to  (CS_SelectWorkspaceFile * String("Alt+W"))
                Set psImage to "ActionOpenWorkspace.ico"
                Set peControlType to xtpControlCustom
                Set peControlStyle to xtpButtonIconAndCaption

                Procedure OnExecute Variant vCommandBarControl
                    Send Execute of (oWorkspaceOpen_Menuitem(ghoCommandBars))
                End_Procedure

                Procedure OnCreateControl Handle hoObj
                    Set ComDefaultItem of hoObj to True
                End_Procedure
                    
            End_Object

            Object oWorkspaceSelector_Menuitem is a cCJWorkspaceComboMenuItem
                Set psToolTip to "Recent Workspaces"
                Set psImage to "ActionOpenWorkspace.ico"
                Set peControlType to xtpControlComboBox
                Set phoWorkspaceSelector_Menuitem of ghoApplication to Self
                Set phoWorkspaceSelectorText_MenuItem to (oWorkspaceSelectorText_Menuitem(ghoCommandBars))
                Set phoResetWorkspace_MenuItem        to (oResetWorkspace_MenuItem(ghoCommandBars))
            End_Object

            Object oWorkspaceOpen_Menuitem is a cCJMenuItem
                Set psToolTip to "Open Workspace File"
                Set psDescription to  (CS_SelectWorkspaceFile * String("(Alt+W)"))
                Set psShortcut to "Alt+W"
                Set pbControlCloseSubMenu to False
                Set pbControlFlagNoMovable to True
                Set psImage to "ActionOpen.ico"
                Set peControlStyle to xtpButtonIcon

                Procedure OnExecute Variant vCommandBarControl
                    String sFileName
                    Get SelectWorkspaceFile of ghoApplication to sFileName
                    If (sFileName <> "") Begin
                        Send UpdateWorkspaceSelectorDisplay of ghoApplication sFileName
                        Send DisplayWorkspaceItem of (oWorkspaceSelector_Menuitem(ghoCommandBars)) sFileName
                    End
                End_Procedure
                
            End_Object

//            Object oRemoveWorkspaceHistory_Menuitem is a cCJMenuItem
//                Set psCaption to "Remove History "
//                Set psToolTip to "Remove History"
//                Set psDescription to "Dialog for removing Workspace history items from the registry (Alt+H)"
//                Set peControlStyle to xtpButtonIcon
//                Set psImage to "RemoveWorkspaceHistory.ico"
//                Set pbControlBeginGroup to True
//
//                Procedure OnExecute Variant vCommandBarControl
//                    Forward Send OnExecute vCommandBarControl
//                    Send DeleteWorkSpaceHistoryFromRegistry of ghoApplication
//                End_Procedure
//            End_Object
                           
            Object oRadioSelectorText_Menuitem is a cCJMenuItem
                Set psCaption to "Mode:"
                Set psToolTip to "Refactoring Mode"
                Set psDescription to "Select if the refactoring should run on all source files that matches the 'File extensions' combo for selected workspace, or only on one selected file. (Toggle with Alt+F)"
                Set pbControlBeginGroup to True
                Set pbActiveUpdate to True
                Set peControlStyle to xtpButtonIconAndCaption

                Procedure OnExecute Variant vCommandBarControl

                    Forward Send OnExecute vCommandBarControl
                    Send Execute of oWorkspaceRadio_MenuItem
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sSWSFile
                    Get psSWSFile of ghoApplication to sSWSFile
                    Function_Return (sSWSFile <> "")
                End_Function

            End_Object

            Object oWorkspaceRadio_MenuItem is a cCJMenuItem
                Set peControlType to xtpControlRadioButton
                Set psCaption to "All Files"
                Set psToolTip to "All files mode"
                Set psDescription to "Select if the refactoring should run on all source files that matches the 'File Filter' combo for selected workspace. Toggles with (Alt+F)"
                Set pbChecked to True
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Boolean bState
                    Get pbChecked to bState
                    Set pbChecked to (not(bState))
                    Set pbWorkspaceMode of ghoApplication to (not(bState))
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sSWSFile
                    Get psSWSFile of ghoApplication to sSWSFile
                    Function_Return (sSWSFile <> "")
                End_Function

                Procedure OnCreateControl Handle hoObj
                    String sSWSFile
                    Get psSWSFile of ghoApplication to sSWSFile
                    Set pbChecked to (sSWSFile <> "")
                    Set ComDefaultItem of hoObj to True
                End_Procedure

            End_Object

            Object oFileRadioMenuItem is a cCJMenuItem
                Set peControlType to xtpControlRadioButton
                Set psCaption to "Single &File"
                Set psToolTip to "Mode"
                Set psDescription to "Select if the refactoring should be run on one selected source file only (use the 'Open Source File:' to select) Toggles with (Alt+F)"
                Set psShortcut to "Alt+F"
                Set pbActiveUpdate to True
                
                Procedure OnExecute Variant vCommandBarControl
                    Boolean bState
                    Get pbChecked to bState
                    Set pbChecked to (not(bState))
                    Set pbWorkspaceMode of ghoApplication to bState
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sSWSFile
                    Get psSWSFile of ghoApplication to sSWSFile
                    Function_Return (sSWSFile <> "")
                End_Function

                Procedure OnCreateControl Handle hoObj
                    String sSWSFile sSourceFile
                    Forward Send OnCreateControl hoObj
                    Get psSWSFile of ghoApplication to sSWSFile
                    Get psCurrentSourceFileName of ghoApplication to sSourceFile
                    Set pbChecked to (sSWSFile <> "")
                    Set pbWorkspaceMode of ghoApplication to (sSourceFile = "")
                    Set ComDefaultItem of hoObj to True
                End_Procedure

            End_Object

        End_Object

        Object oSourceFile_Toolbar is a cCJToolbar
            Set pbEnableDocking to False
            Set pbCloseable to False
            Set pbCustomizable to False
            Set pbShowExpandButton to False
            Set peStretched to stStretchShared

            Object oOpenFolderMenuItem is a cCJMenuItem
                Set psCaption to CS_BrowseSourceFileTxt
                Set psToolTip to "Select source file"
                Set psDescription to "Displays an Open File dialog to select a SINGLE source file from (Ctrl+O). This will automatically set the 'Refactoring Mode' to 'Single File'"
                Set psImage to "ActionOpen.ico"
                Set peControlStyle to xtpButtonIconAndCaption
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Forward Send OnExecute vCommandBarControl
                    Send SelectSourceFile of ghoApplication
                End_Procedure

                Function IsEnabled Returns Boolean
                    Boolean bState
                    Move False to bState
                    Get pbWorkspaceMode of ghoApplication to bState
                    Function_Return (bState = False)
                End_Function

            End_Object

            Object oSourceFileText_MenuItem is a cCJMenuItem
                Set peControlType to xtpControlCustom

                Procedure OnExecute Variant vCommandBarControl
                    Forward Send OnExecute vCommandBarControl
                    Send Execute of oOpenFolderMenuItem
                End_Procedure
            End_Object

        End_Object

        Object oFileToolBar is a cCJToolbar
            Set psTitle to "Process Toolbar"
            Set peStretched to stStretchShared
            Set pbCloseable to False
            Set pbCustomizable to False

            Object oSave_ToolItem is a cCJSaveMenuItem
                Set peControlStyle to xtpButtonIcon
                Set pbControlBeginGroup to True
                Set psCaption to "&Save"
                Set psToolTip to "Save"
                Set psDescription to "Save editor changes (Alt+S)"
                Set psShortcut to "Alt+S"

                Function IsEnabled Returns Boolean
                    Boolean bChanged

                    Move False to bChanged
                    If (oSysfile_DD(phoRefactorView(ghoApplication))) Begin
                        Get Should_Save of (oSysfile_DD(phoRefactorView(ghoApplication))) to bChanged
                    End
                    If (bChanged = False) Begin
                        Get pbShouldSave of (phoEditorView(ghoApplication)) to bChanged
                    End
                    Function_Return bChanged
                End_Function

                Procedure OnExecute Variant vCommandBarControl
                    Send Request_Save of (Focus(Self))
                End_Procedure

            End_Object

            Object oResetWorkspace_MenuItem is a cCJMenuItem
                Set pbControlBeginGroup to True
                Set pbActiveUpdate to True
                Set psCaption to "Clear"
                Set psToolTip to "Clear Workspace/File"
                Set psDescription to "Clears the currently selected workspace/or File depending on the selected mode"
                Set psImage to "ActionClear.ico"
                Set peControlStyle to xtpButtonIconAndCaption

                Procedure OnExecute Variant vCommandBarControl
                    Boolean bChanged bMode
                    Integer iRetval
                    Handle hoEditor

                    Broadcast Recursive Get pbShouldSave of (Client_Id(phoMainPanel(ghoApplication))) to bChanged
                    If (bChanged = True) Begin
                        Get YesNo_Box ("Changes exists! If you answer 'Yes' your changes will be lost. Are you sure?") "" MB_DEFBUTTON2 to iRetval
                        If (iRetval <> MBR_Yes) Begin
                            Procedure_Return
                        End
                    End
                    
                    Send UpdateWorkspaceSelectorDisplay of ghoApplication ""
                    Get phoEditor of ghoApplication to hoEditor
                    Send Request_Clear of hoEditor
                    Set pbWorkspaceMode of ghoApplication to True
                    Send Activate_oRefactorView of (Client_Id(ghoCommandBars))
                    Broadcast Recursive Send Request_Clear of (oRefactorView(Client_Id(ghoCommandBars)))
                    Send Request_Switch_To_Tab of (oMain_TabDialog(phoRefactorView(ghoApplication))) 0 1
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sSWSFile
                    Get psSWSFile of ghoApplication to sSWSFile
                    Function_Return (sSWSFile <> "")
                End_Function

            End_Object

            Object oEditorUndo_MenuItem is a cCJMenuItem
                Set psToolTip to "Undo"
                Set psDescription to "Undo last editor action (Ctrl+Z)"
                Set psImage to "ActionUndo.ico"
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Send CME_UndoAction of (Focus(Desktop))
                End_Procedure

                Function IsEnabled Returns Boolean
                    Boolean bCanUndo
                    Get Can_UndoAction of (Focus(Desktop)) to bCanUndo
                    Function_Return bCanUndo
                End_Function

            End_Object

            Object oEditorRedo_MenuItem is a cCJMenuItem
                Set psToolTip to "Redo"
                Set psDescription to "Redo last editor action (Ctrl+Z)"
                Set psImage to "ActionRedo.ico"
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Send CME_RedoAction of (Focus(Desktop))
                End_Procedure

                Function IsEnabled Returns Boolean
                    Boolean bCanRedo
                    Get Can_RedoAction of (Focus(Desktop))  to bCanRedo
                    Function_Return bCanRedo
                End_Function

            End_Object

        End_Object

        Object oActions_Toolbar is a cCJToolbar
            Set psTitle to "Action Toolbar"
            Set peStretched to stStretchShared
            Set pbCloseable to False
            Set pbCustomizable to False
            Set pbDockNextTo to False

            Object oRefactor_ToolItem is a cCJMenuItem
                Set pbControlBeginGroup to True
                Set pbActiveUpdate to True
                Set peControlStyle to xtpButtonIconAndCaption
                Set psCaption to "Start &Refactoring"
                Set psToolTip to "Refactor code with the selected functions and Mode: All Files/One File (Ctrl+F5)"
                Set psDescription to "Refactor Code (Ctrl+F5)"
                Set psImage to "Start.ico"
                Set psShortcut to "Ctrl+F5"
                Set pbActiveUpdate to True
                
                Procedure OnExecute Variant vCommandBarControl
                    Send RefactoreCode of (phoRefactorView(ghoApplication))
                End_Procedure

                Function IsEnabled Returns Boolean
                    Boolean bEnabled bWorkspaceMode
                    String sFileName sSWSFile sHomePath
                    Integer iSelectedFunctions iFolders
                    Handle hoFolderSelHeaDD
                    Boolean bExists bUseDDO
                    tFolderData[] asSavedFolders
    
                    Get pbWorkspaceMode         of ghoApplication to bWorkspaceMode
                    Get psSWSFile               of ghoApplication to sSWSFile
                    Get psCurrentSourceFileName of ghoApplication to sFileName
    
                    If (bWorkspaceMode = True) Begin
                        Move (sSWSFile <> "") to bEnabled
                    End
                    Else Begin
                        Move (sFileName <> "") to bEnabled
                    End
    
                    If (bEnabled = True) Begin
                        Move (SysFile.SelectedFunctionTotal > 0) to bEnabled
                    End
                    If (bEnabled = True) Begin
                        Get TotalFolders of (phoFolderSelHeaDD(ghoApplication)) to iFolders
                        Move (iFolders <> 0) to bEnabled
                    End
                    If (bEnabled = False) Begin
                        Move SysFile.bCountSourceLines to bEnabled
                    End
    
                    Function_Return bEnabled
                End_Function

                Procedure OnCreateControl Handle hoObj
                    Set ComDefaultItem of hoObj to True
                End_Procedure
                
            End_Object
        
            Object oCompare_MenuItem is a cCJMenuItem
                Set psCaption to "Co&mpare"
                Set psToolTip to "Compare"
                Set psDescription to "Compare file changes after running refactoring function(s) (Alt+M)"
                Set psImage to "Compare.ico"
                Set peControlStyle to xtpButtonIconAndCaption
                Set pbActiveUpdate to True
                Set pbControlBeginGroup to True

                Procedure OnExecute Variant vCommandBarControl
                    String sCompareApp
                    Boolean bWorkspaceMode

                    Forward Send OnExecute vCommandBarControl

                    Get psFileCompareApp of ghoApplication to sCompareApp
                    Get pbWorkspaceMode of ghoApplication to bWorkspaceMode
                    If (bWorkspaceMode = True) Begin
                        Send ComparePaths of ghoApplication sCompareApp
                    End
                    Else Begin
                        Send CompareFiles of ghoApplication sCompareApp
                    End
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sSourcePath sBackupPath
                    String sBackupName sSourceFilename sCompareApp
                    Boolean bWorkspaceMode bOK

                    Move False to bOK
                    Get psFileCompareApp of ghoApplication to sCompareApp
                    If (sCompareApp <> "") Begin
                        Get pbWorkspaceMode of ghoApplication to bWorkspaceMode
                        Get psCurrentSourceFileName of ghoApplication to sSourceFilename
                        Get IsBackupFile of ghoApplication sSourceFilename to sBackupName
                        If (bWorkspaceMode = True) Begin
                            Get SourceFilePath of ghoApplication to sSourcePath
                            Get HomeBackupFilePath of ghoApplication to sBackupPath
                            Move (sSourcePath <> "" and sBackupPath <> "") to bOK
                        End
                        Else Begin
                            Move (sSourceFilename <> "" and sBackupName <> "") to bOK
                        End
                    End

                    Function_Return bOK
                End_Function

            End_Object

            Object oOpenLogFile_MenuItem is a cCJMenuItem
                Set psToolTip to "View logfile"
                Set psDescription to "View the logfile that is added to for each run (Alt+L)"
                Set psImage to "OpenLogFile.ico"
                Set peControlStyle to xtpButtonIcon
                Set pbControlBeginGroup to True
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Send ShowLogFile of ghoApplication
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sPath sLogFile
                    Boolean bLogFileExists

                    Get psHomePath of ghoApplication to sPath
                    Get vFolderFormat sPath to sPath
                    Move (sPath + CS_BackupFolder + CS_DirSeparator + CS_SummaryLogfileName) to sLogFile
                    Get vFilePathExists sLogFile to bLogFileExists

                    Function_Return (bLogFileExists = True)
                End_Function

            End_Object

            Object oOpenOtherLogFile_MenuItem is a cCJMenuItem
                Set psToolTip to "Other logfiles"
                Set psDescription to "View a list of logfiles created by functions of type: 'eOther_Function"
                Set psImage to "OtherLogFiles.ico"
                Set peControlStyle to xtpButtonIcon
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Send ShowOtherLogFiles of ghoApplication
                End_Procedure

                Function IsEnabled Returns Boolean
                    String[] asOtherLogFiles
                    Get pasOtherLogFiles of ghoRefactorFuncLib to asOtherLogFiles
                    Function_Return (SizeOfArray(asOtherLogFiles) > 0)
                End_Function

            End_Object

            Object oShowErrorLog_MenuItem is a cCJMenuItem
                Set psToolTip to "View Refactor Engine Error Log"
                Set psDescription to "View the refactor engine error log"
                Set psImage to "ErrorLog.ico"
                Set peControlStyle to xtpButtonIcon
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Send Popup of (oEngineErrorLog_dg(Client_Id(ghoCommandBars)))
                End_Procedure
                
                Function IsEnabled Returns Boolean
                    Integer iErrors
                    Get_Attribute DF_FILE_RECORDS_USED of StatLog.File_Number to iErrors
                    Function_Return (iErrors > 0)
                End_Function

            End_Object

            Object oUndoRefactoring_MenuItem is a cCJMenuItem
                Set psToolTip to "Undo Refactoring"
                Set psDescription to "Undo process of refactoring actions. Dialog that moves files from the 'DFRefactor Backup' subfolder structure to their original folders. (Alt+U)"
                Set psImage to "UndoRefactoring.ico"
                Set pbActiveUpdate to True
                Set pbControlBeginGroup to True

                Procedure OnExecute Variant vCommandBarControl
                    tsSearchResult[] BackpupFileArray
                    Forward Send OnExecute vCommandBarControl
                    Send Cursor_Wait of Cursor_Control
                    Get AllBackupFolderFiles of ghoApplication to BackpupFileArray
                    Send Cursor_Ready of Cursor_Control
                    Send FillBackupFilesDialog of (Client_Id(ghoCommandBars)) BackpupFileArray
                End_Procedure

                Function IsEnabled Returns Boolean
                    Boolean bOK
                    tsSearchResult[] BackpupFileArray
                    Move False to bOK
                    Get AllBackupFolderFiles of ghoApplication to BackpupFileArray
                    Move (SizeOfArray(BackpupFileArray) <> 0) to bOK
                    Function_Return bOK
                End_Function

            End_Object

        End_Object
        
        Object oTools_toolbar is a cCJToolbar
            Set peStretched to stStretchShared
            Set pbCloseable to False
            Set pbCustomizable to False
            Set pbDockNextTo to True

            Object oOpenContainingFolder_MenuItem is a cCJMenuItem
                Set psImage to "ActionOpenContainingFolder.ico"
                Set psCaption to "Containing Folder"
                Set psToolTip to "Open Folder"
                Set psDescription to "Open Containing Folder"
                Set pbActiveUpdate to True
                Set pbControlBeginGroup to True

                Procedure OnExecute Variant vCommandBarControl
                    String sPath sFile
                    Get psWorkspaceHomePath of ghoApplication to sPath
                    Get psCurrentSourceFileName of ghoApplication to sFile
                    
                    // We want to have that file to be selected in Windows Explorer
                    If (sFile <> "") Begin
                        Move ("/select," * String(sFile)) to sPath
                    End
                    Send vShellExecute "open" "explorer.exe" sPath ""
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sPath
                    Get psWorkspaceHomePath of ghoApplication to sPath
                    Function_Return (sPath <> "")
                End_Function

            End_Object

            Object oCodeExplorer_ToolbarButton is a cCJMenuItem
                Set psCaption to "StarZens Source &Explorer"
                Set psToolTip to "DataFlex Source Explorer"
                Set psDescription to "Run Starzen's DataFlex Source Code Explorer (Alt+E)"
                Set psImage to "DataFlexSourceExplorer.ico"
                Set psShortcut to "Alt+E"
                Set peControlStyle to xtpButtonIcon
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    String sProgram sSWSPath
                    
                    Get private.psStarZenSourceExplorer of ghoApplication to sProgram
                    If (sProgram = "") Begin
                        Send Info_Box "You first need to setup the path to StarZen's Source Code Explorer program with 'Program Settings'"
                        Procedure_Return
                    End
                    Get psSWSFile of ghoApplication to sSWSPath
                    If (sSWSPath <> "") Begin
                        Move ("-ws" * '"' + sSWSPath + '"') to sSWSPath
                    End
                    Runprogram Background sProgram sSWSPath
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sProgram sSWSPath
                    Get psStarZenSourceExplorer of ghoApplication to sProgram
                    Get psSWSFile of ghoApplication to sSWSPath
                    Function_Return (sProgram <> "" and sSWSPath <> "")
                End_Function

            End_Object

        End_Object

        Object oSettings_toolbar is a cCJToolbar
            Set peStretched to stStretchShared
            Set pbCloseable to False
            Set pbCustomizable to False

            Object oSettings_Toolbarbutton is a cCJMenuItem
                Set psToolTip to "Program Settings"
                Set psCaption to "Se&ttings"
                Set psDescription to "Program Settings (Alt+T)"
                Set psImage to "Settings.ico"
                Set peControlStyle to xtpButtonIcon
                Set pbControlBeginGroup to True
                Set psShortcut to "Alt+T"
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Send Popup of (oProgramSetup_dg(Client_Id(ghoCommandBars)))
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sSWSFile
                    Get psSWSFile of ghoApplication to sSWSFile
                    Function_Return (sSWSFile <> "")
                End_Function

            End_Object

            Object oScintillaEditorSettings_Mentuitem is a cCJMenuItem
                Set psToolTip to "Editor Settings" 
                Set psCaption to "E&ditor Settings"
                Set psDescription to "Configure the editor (Alt+D)"
                Set psImage to "EditorSettings.ico"
                Set peControlStyle to xtpButtonIcon
                Set psShortcut to "Alt+D"
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Send Popup of (oScintillaParameters_dg(Client_Id(ghoCommandBars)))
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sSWSFile
                    Get psSWSFile of ghoApplication to sSWSFile
                    Function_Return (sSWSFile <> "")
                End_Function

            End_Object

#IFDEF CI_ShowBlingStuff
            #Include CosmeticToolbarItems.pkg
#ENDIF
        End_Object

        Object oExit_toolbar is a cCJToolbar
            Set pbCloseable to False
            Set pbCustomizable to False
            Set pbShowExpandButton to False
            Set peStretched to stStretchShared

            Object oAbout_MenuItem is a cCJAboutMenuItem
                Set pbActiveUpdate to True
                Set psCaption to C_$CaptionAbout
                Set psDescription to C_$DescAbout
                Set psToolTip to C_$ToolTipAbout
                Function IsEnabled Returns Boolean
                    String sSWSFile
                    Get psSWSFile of ghoApplication to sSWSFile
                    Function_Return (sSWSFile <> "")
                End_Function
            End_Object

            Object oHelpMenu is a cCJMenuItem
                Set psCaption to "Help"
                Set psToolTip to "Help"
                Set psDescription to "Help about the program (F1)"
                Set psImage to "ActionHelp.ico"
                Set peControlType to xtpControlSplitButtonPopup
                Set pbActiveUpdate to True

                Procedure OnExecute Variant vCommandBarControl
                    Runprogram Shell Background "https://www.rdctools.com/HTMLHelpDFRefactor/DFRefactor.html"
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sSWSFile
                    Get psSWSFile of ghoApplication to sSWSFile
                    Function_Return (sSWSFile <> "")
                End_Function

                Object oHelpMenuItemLocal is a cCJHelpMenuItem
                    Set psCaption to "Local HTML Help"
                End_Object

                Object oHelpMenuItemInternetBrowser is a cCJMenuItem
                    Set psCaption to "Online HTML Help"
                    Set psImage to "ActionHelpInternet.ico"
                    Procedure OnExecute Variant vCommandBarControl
                        Runprogram Shell Background "https://www.rdctools.com/en/HTMLHelpDFRefactor/DFRefactor.html"
                    End_Procedure

                End_Object

                Object oHelpGitHub is a cCJMenuItem
                    Set psCaption to "GitHub source code repository"
                    Set psToolTip to "Link to GitHub source code repository"
                    Set psDescription to "Github source code"
                    Set psImage to "GitHub.ico"
                    Set pbControlBeginGroup to True
                    Procedure OnExecute Variant vCommandBarControl
                        Forward Send OnExecute vCommandBarControl
                        Runprogram Shell Background "https://github.com/NilsSve/DFRefactor.git"
                    End_Procedure
                End_Object
                
            End_Object

            Object oExitMenuItem is a cCJExitMenuItem
                Set psImage to "ActionExit.ico"
                Set psToolTip to "Exit"
                Set psDescription to "Exit the program (Alt+F4)"
                Set pbControlBeginGroup to True
            End_Object

        End_Object

        Object oStatusBar is a cCJStatusBar
            Set StatusBar_Id to Self

            Object oStatusPane1 is a cCJStatusBarPane
                Set piID to sbpIDIdlePane
                Set pbStyleStretch to True
            End_Object

            Object oStatusPane2 is a cCJStatusBarPane
                Set phoViewPane to Self
                Set pbStyleStretch to True
            End_Object

            Object oUTF8_OEM_Text is a cCJStatusBarPane
                Set psText to "OEM"
            End_Object

            Object oNumberOfLines_StatusbarPane is a cCJStatusBarPane
                Set psText to "No of Lines:"
            End_Object

            Object oNumberOfCharacters_StatusbarPane is a cCJStatusBarPane
                Set psText to "Characters:"
            End_Object

            Procedure Set NumberOfEditorLines String sText
                Move (FormatValue(sText, ",###")) to sText
                Set psText of oNumberOfLines_StatusbarPane to ("No of Lines:" * String(sText))
            End_Procedure

            Procedure Set NumberOfEditorCharacters String sText
                Move (FormatValue(sText, ",###")) to sText
                Set psText of oNumberOfCharacters_StatusbarPane to ("Characters:" * String(sText))
            End_Procedure

            Procedure Set StatusText String sText
                Set psText of oStatusPane1 to sText
            End_Procedure                          
            
            Procedure Set ActionText String sText
                Handle hoViewPane
                Get phoViewPane to hoViewPane
                Set psText of hoViewPane to sText
            End_Procedure

            Procedure Set UTF8Text String sText
                Set psText of (oUTF8_OEM_Text(Self)) to sText
            End_Procedure
            
        End_Object

    End_Object

    Object oClientArea is a ClientArea
//        Use Dd_debug.dg
        Use ProgramSetup.dg
        Use ScintillaParameters.dg
        Use EngineErrorLog.dg
        Use BackupFiles.dg
        Use EngineLogFile.dg
        Use ShowOtherLogFiles.dg
        
        Use RefactorView.vw
        Use EditorView.vw

        Use oEditorProperties.pkg
        Use StdAbout.pkg

        Procedure Activate_About  
            String sTestGroup     
            // Below logic in DFAbout has been replaced, so if the first four parameters are blank, a .rtf file
            // will be read into the cRichEdit object of hte DFAbout dialog.
            Send DoAbout "" "" "" "" "DFRefactor72x72.bmp"
        End_Procedure

        // We don't allow closing of a view - it just doesn't make
        // sense with a tabbed interface.
        Function Exit_Loss_Confirmation For cUIObject Returns Integer
            Function_Return 1
        End_Function

        Function Verify_Exit_Application Returns Integer
            Integer iFail iRetval
            Boolean bChanged

            Move 0 to iFail
            Broadcast Recursive Get pbShouldSave to bChanged
            If (bChanged = True) Begin
                Get YesNoCancel_Box "Changes exists! Do you want to save changes?" "" MB_DEFBUTTON3 to iRetval
                If (iRetval = MBR_Yes) Begin
                    Send Execute of (oSave_ToolItem(ghoCommandBars))
                    Move 0 to iFail
                End
                If (iRetval = MBR_No) Begin
                    Move 0 to iFail
                End
                If (iRetval = MBR_Cancel) Begin
                    Move 1 to iFail
                End
            End
            Function_Return iFail
        End_Function

    End_Object

    Procedure ActivateWorkspaceDialog
        Send Execute of (oWorkspaceOpen_Menuitem(ghoCommandBars))
    End_Procedure

    Procedure ActivateFileRadioButton
        Send Execute of (oFileRadioMenuItem(ghoCommandBars))
    End_Procedure

    Procedure ActivateCompare
        Send Execute of (oCompare_MenuItem(ghoCommandBars))
    End_Procedure

    Procedure ActivateBrowseDialog
        Send Execute of (oOpenFolderMenuItem(ghoCommandBars))
    End_Procedure

    Procedure ActivateProcess
        Send KeyAction of (oExecute_btn(oRefactorView(client_id(phoMainPanel(ghoApplication)))))
    End_Procedure

    Procedure ActivateSave
        Send Execute of (oSave_ToolItem(ghoCommandBars))
    End_Procedure

//    Procedure ActivateClear
//        Send Execute of (oResetSourceFile_MenuItem(ghoCommandBars))
//    End_Procedure

    Procedure ActivateClearAll
        Send Execute of (oResetWorkspace_MenuItem(ghoCommandBars))
    End_Procedure

    Procedure ActivateSourceExplorer
        Send Execute of (oCodeExplorer_ToolbarButton(ghoCommandBars))
    End_Procedure

    Procedure ActivateSettings
        Send Execute of (oSettings_Toolbarbutton(ghoCommandBars))
    End_Procedure

    Procedure ActivateEditorSettings
        Send Execute of (oScintillaEditorSettings_Mentuitem(ghoCommandBars))
    End_Procedure

//    Procedure ActivateHistoryDialog
//        Send Execute of (oRemoveWorkspaceHistory_Menuitem(ghoCommandBars))
//    End_Procedure

    Procedure ActivateUndoRefactoringDialog
        Send Execute of (oUndoRefactoring_MenuItem(ghoCommandBars))
    End_Procedure

    Procedure ActivateShapshot
        Send TakeSnapshot False True
    End_Procedure

    Procedure Switch_Prior_View
        Send Switch_Prior_View of (ClientAreaObject (ghoCommandBars))
    End_Procedure

    Procedure Switch_Next_View
        Send Switch_Next_View of (ClientAreaObject (ghoCommandBars))
    End_Procedure

    Procedure ToggleActionButton
        Integer iActiveView
        Handle  hoView
        Get piActiveView of ghoApplication to iActiveView
        If (iActiveView = CI_CleanupSource) Begin
            Get phoActiveView of ghoApplication to hoView
            Send ToggleActionButton of hoView
        End
    End_Procedure
    
//    Cant't have this as it collides with the DD_Debug dialog...
//    On_Key Key_Ctrl+Key_D  Send ActivateEditorSettings
    On_Key Key_Alt+Key_D   Send ActivateEditorSettings
    On_Key Key_Ctrl+Key_E  Send ActivateSourceExplorer
    On_Key Key_Alt+Key_E   Send ActivateSourceExplorer
    On_Key Key_Ctrl+Key_F  Send ActivateFileRadioButton
    On_Key Key_Alt+Key_F   Send ActivateFileRadioButton
    On_Key Key_Alt+Key_G   Send ToggleActionButton
    On_Key Key_Ctrl+Key_G  Send ToggleActionButton
//    On_Key Key_Alt+Key_H   Send ActivateHistoryDialog
    On_Key Key_Alt+Key_L   Send ShowLogFile of ghoApplication
    On_Key Key_Ctrl+Key_M  Send ActivateCompare
    On_Key Key_Alt+Key_M   Send ActivateCompare
    On_Key Key_Ctrl+Key_O  Send ActivateBrowseDialog
    On_Key Key_Alt+Key_O   Send ActivateBrowseDialog
//    On_Key Key_Ctrl+Key_P  Send ActivateProcess
//    On_Key Key_Alt+Key_P   Send ActivateProcess
//    On_Key Key_Ctrl+Key_R  Send ActivateProcess
//    On_Key Key_Alt+Key_R   Send ActivateProcess
    On_Key Key_Ctrl+Key_F5 Send ActivateProcess
    On_Key Key_Ctrl+Key_S  Send ActivateSave
    On_Key Key_Alt+Key_S   Send ActivateSave
    On_Key Key_Ctrl+Key_T  Send ActivateSettings
    On_Key Key_Alt+Key_T   Send ActivateSettings
    On_Key Key_Alt+Key_U   Send ActivateUndoRefactoringDialog
    On_Key Key_Ctrl+Key_W  Send ActivateWorkspaceDialog
    On_Key Key_Alt+Key_W   Send ActivateWorkspaceDialog
    On_Key Key_Alt+Key_X   Send Exit_Application
    On_Key Key_F2          Send ActivateSave
    On_Key Key_Ctrl+Key_F4 Send ActivateBrowseDialog
    On_Key Key_F10         Send ActivateShapshot

    // On_Key constant for Ctrl+Shift+Tab
    #IFNDEF C_CtrlShiftTab
        Define C_CtrlShiftTab for 7170
    #ENDIF

    On_Key C_CtrlShiftTab   Send Switch_Prior_View
    On_Key Key_Ctrl+Key_Tab Send Switch_Next_View
End_Object

Procedure OnStartup
    String sSWSFile
    Get psSWSFile of ghoApplication to sSWSFile
    If (sSWSFile <> "") Begin
        Send DisplayWorkspaceItem of (oWorkspaceSelector_Menuitem(ghoCommandBars)) sSWSFile
    End
    Send Activate_oRefactorView of (ClientAreaObject(ghoCommandBars))
End_Procedure
Send OnStartup

Start_UI
