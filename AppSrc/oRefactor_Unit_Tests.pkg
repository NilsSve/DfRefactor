//Use cTestFixture.pkg
Use cRefactorFunctionLibrary.pkg

Object cRefactorFunctionLibrary_Tests is a cTestFixture
    Set psFunctionName to "Main Test Fixture Object"

        // I don't think there is any point in creating/destroying
        // the function library for each cTestFixture object, so moved it
        // out of the Setup/TearDown messages.
        Object oRefactorFunctionLibrary is a cRefactorFunctionLibrary
        End_Object
        
        Procedure Setup
        End_Procedure
    
        Procedure TearDown                                
            // Reinitialize base class properties for each cTestFixture object.
            Set pbIsInSemiColonMultiLineString of ghoRefactorFunctionLibrary to False
            Set pbIsInDF23MultiLineString      of ghoRefactorFunctionLibrary to False
            Set pbIsOpenString                 of ghoRefactorFunctionLibrary to False
            Set pbInRepeatLoop                 of ghoRefactorFunctionLibrary to False     
            Set pbInProcedure                  of ghoRefactorFunctionLibrary to False
            Set pbInFunction                   of ghoRefactorFunctionLibrary to False
        End_Procedure
    
    // *** cTestFixture obejcts below: ***
    //
    Object oTokenizer is a cTestFixture
        Set psFunctionName to "Tokenizer"

        {Published=True}
        Procedure Tokenizer_OverStrikeStrings_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a quoted string" to sVal' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bHasOverstrikeChars = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_OverStrikeStrings_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "Move 'Single quoted string' to sVal" to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bHasOverstrikeChars = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_OverStrikeStrings_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "Move 'Single quoted string' to sVal" to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Move "Move '++++++++++++++++++++' to sVal" to sExpected
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_OverStrikeStrings_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a test string on multiple lines;'   to sLine
            Move 'Move "_______________________________________;'   to sExpected 
//            Get Tokenizer of ghoRefactorFunctionLibrary sLine       to TokenizerData 
//            Move "      with the 'old school' multi line string;"   to sLine
//            Move       "_________'++++++++++'_________________;"    to sExpected 
//            Get Tokenizer of ghoRefactorFunctionLibrary sLine       to TokenizerData 
//            Move "      The new style doesn't need a semicolon at;" to sLine
//            Move       "______________________________________;"    to sExpected 
//            Get Tokenizer of ghoRefactorFunctionLibrary sLine       to TokenizerData 
//            Move '      the End of line."'                          to sLine
//            Move       "________________"                           to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine       to TokenizerData
//            Move TokenizerData.bIsDF23String            to bChanged
//            Move TokenizerData.bIsInDF23MultiLineString to bChanged
//            Move TokenizerData.bIsOpenString            to bChanged
//            Move TokenizerData.bLineIsReady             to bChanged 
//            Move (pbIsInDF23MultiLineString(ghoRefactorFunctionLibrary)) to bChanged
//            Move (pbIsOpenString(ghoRefactorFunctionLibrary)) to bChanged
            
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to False
            Set pbIsOpenString            of ghoRefactorFunctionLibrary to False
        End_Procedure

        {Published=True}
        Procedure Tokenizer_OverStrikeStrings_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "Double quoted string" to sVal' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Move 'Move "____________________" to sVal' to sExpected
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Commment_Line
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '           //Move WindowIndex to FieldIndex' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsComment = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Empty_Line_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move CS_CRLF to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsBlank = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Empty_Line_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "" to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsBlank = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsImageStart_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/MyPageName' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInImage = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsImageEnd_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/*' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bLineIsReady = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsImageEnd_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//  /*' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInImage = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsLineEndSemiColon_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Send Info_Box "This is a text string with an embedded semi-colon ;"' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bHasEndSemiColon = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsLineEndSemiColon_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a source line with an ending semi-colon" ;' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bHasEndSemiColon = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsMultiLineStringStart_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '@"Hello World' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to False
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsMultiLineStringStart_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get SQLExecDirect of ghoSQLExecutor @SQL"""' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to False
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsMultiLineStringStart_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move @SQL""" SELECT * FROM Customer WHERE Customer.Name = "John Doe" """ to sSQL // End comment' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to False
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsMultiLineStringStart_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "@SQL" to sString // And an end comment' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to False
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsMultiLineStringEnd_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True
            Move 'Move "This is a string" to sText' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsMultiLineStringEnd_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True
            Move '// This is a comment' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsFunctionDeclaration_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '// Function MyFunction String sA Returns Boolean ' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInFunction = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsFunctionDeclaration_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Function MyFunction String sA Returns Boolean ' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInFunction = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsFunctionDeclaration_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "Function MyFunction String sA Returns Boolean" to sMyString' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInFunction = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsProcedureDeclaration_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '// Procedure MyProc String sLine' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInProcedure = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsProcedureDeclaration_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Procedure MyProc String sLine' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInProcedure = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_IsCommand_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '#COMMAND WebPublishProcedure R .' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInCommand = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_EndComment
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move aA to sB //This is an end comment' to sLine
            Move '//This is an end comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sEndComment sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Indentation_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '         Move aA to sB //This is an end comment' to sLine
            Move '         ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sIndentation sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Indentation_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move ('      //Move Windowindex to FieldIndex') to sLine
            Move '       ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bLineIsReady = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Has_Indicate_Command_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate [Found] as (True = bTrue)' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.bHasIndicateCommand = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Has_Indicate_Command_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If [Found] Indicate Err as (True = bTrue)' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.bHasIndicateCommand = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Has_First_Indicator_Command_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate [Found] as (True = bTrue)' to sLine        
            Move 'Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.FirstIndicator.sCode = sExpected)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Left_Indicator_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '[Found] Move [Not Seqeof] to [Select]' to sLine
            Move 'Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.FirstIndicator.sCode = sExpected)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Right_Indicator_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move [Not Select] to [Found]' to sLine
            Move 'Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.ToIndicator.sCode = sExpected)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Of_Statement_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get phoHandle of (oMyObject(Current_Object)) to Found' to sLine
            Move '(oMyObject(Current_Object))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.OfStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Of_Statement_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get psString of ghoApplication to sString' to sLine
            Move 'ghoApplication' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.OfStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_To_Statement_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (iA * iB) to iC' to sLine
            Move 'iC' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_To_Statement_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "New Label" to (Label(phoMainPanel(ghoApplication)))' to sLine
            Move '(Label(phoMainPanel(ghoApplication)))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_To_Statement_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "New Label" to (Label(phoMainPanel(ghoApplication))) // Some comment' to sLine
            Move '(Label(phoMainPanel(ghoApplication)))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_First_Left_Command_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move 'Move' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.SecondLeftCommand.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Second_Left_Command_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move 'Move' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.SecondLeftCommand.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Left_Expression_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move '((iA * iB > 10) + (iD + iE) > 100)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sLeftExpression1 sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Left_Expression_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move '(iA / iB)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sLeftExpression2 sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_Of_Expression_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath // Some comment' to sLine
            Move '(phoWorkspace(ghoApplication))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOfExpression sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_To_Expression_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'For iChar from 1 to (iPos - 1) // Some comment' to sLine
            Move '(iPos - 1)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sToExpression sExpected
        End_Procedure

    End_Object

    Object oChangeCurrent_ObjectToSelf is a cTestFixture
        Set psFunctionName to "ChangeCurrent_ObjectToSelf"

        {Published=True}
        Procedure ChangeCurrent_ObjectToSelf_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (piCurrentRow(Current_Object)) to iRow' to sLine
            Move 'Move (piCurrentRow(Self)) to iRow' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeCurrent_ObjectToSelf of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeCurrent_ObjectToSelf_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (piCurrentRow(Current_Object)) to (phoTestHandle(Current_Object))' to sLine
            Move 'Move (piCurrentRow(Self)) to (phoTestHandle(Self))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeCurrent_ObjectToSelf of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeDfTrueDfFalse is a cTestFixture
        Set psFunctionName to "ChangeDfTrueDfFalse"

        {Published=True}
        Procedure ChangeDfTrueDfFalse_DFTrue
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move DFTrue to Found' to sLine
            Move 'Move True to Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeDfTrueDfFalse of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeDfTrueDfFalse_DFFalse
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move DFFalse to Found' to sLine
            Move 'Move False to Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeDfTrueDfFalse of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeGetAddress_Fixture is a cTestFixture
        Set psFunctionName to "ChangeGetAddress"

        {Published=True}
        Procedure GetAddress_Default_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    GetAddress of sString to pMyPointer" to sLine
            Move "    Move (AddressOf(sString)) to pMyPointer" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure Do_not_Change_function_test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Function GetAddress Returns String" to sLine
            Move " Function GetAddress Returns String" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure Do_not_Change_function_invocation_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Entry_Item (GetAddress(oCustomer_DD))" to sLine
            Move " Entry_Item (GetAddress(oCustomer_DD))" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure Do_not_Change_Address_In_A_Comment_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "String structBytesRead      //Actual bytes read - Should be integer but getAddress cannot find " to sLine
            Move "String structBytesRead      //Actual bytes read - Should be integer but getAddress cannot find " to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeIndicatorToIfBegin is a cTestFixture
        Set psFunctionName to "ChangeIndicatorToIfBegin"

        {Published=True}
        Procedure Change_Indicator_to_If_Begin
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "  [not Seqeof] Begin // Comment" to sLine
            Move "  If (Seqeof = False) Begin // Comment" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicatorToIfBegin of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeIndicatorToMoveStateToVariable is a cTestFixture
        Set psFunctionName to "ChangeIndicatorToMoveStateToVariable"

        {Published=True}
        Procedure Change_Indicate_As_With_Expression
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    [Select] Indicate Select as Windowindex Eq Fieldindex // Comment" to sLine
            Move "    If (Select) Move Windowindex Eq Fieldindex to Select // Comment" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicatorToMoveStateToVariable of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure Change_Indicate_As_No_Expression
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Indicate Select as Windowindex Eq Fieldindex // Comment" to sLine
            Move "    Move (Windowindex = Fieldindex) to Select // Comment" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicatorToMoveStateToVariable of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeInToContains_Fixture is a cTestFixture
        Set psFunctionName to "ChangeInToContains"

        {Published=True}
        Procedure IndicateIn_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    indicate Select as sSubString in sHostString // Comment' to sLine
            Move '    indicate Select as (sHostString contains sSubString) // Comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure IfIn_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    if sSubString in sHostString RunProgram' to sLine
            Move '    if (sHostString contains sSubString) RunProgram' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure UntilIn_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Until sSubString in sHostString' to sLine
            Move 'Until (sHostString contains sSubString)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure WhileIn_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'While sSubString in sHostString' to sLine
            Move 'While (sHostString contains sSubString)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        // This test will fail because the logic assumes the source line to be of proper syntax,
        // e.g. it needs to start with a command (or indicator + command).
        {Published=False}
        Procedure SpacesAroundIn_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '     sSubString    in     sHostString    ' to sLine
            Move '     (sHostString contains sSubString)    ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ConstantStringIn_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'if "." in a_number' to sLine
            Move 'if (a_number contains ".")' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ConstantStringIn2_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'if "." in "12.12"' to sLine
            Move 'if ("12.12" contains ".")' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure SingleQuoteInConstantString_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move (Replaces('`', 'if "`" in "I`m okay"', "'")) to sLine
            Move (Replaces('`', 'if ("I`m okay" contains "`")', "'")) to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure DoubleQuoteInConstantString_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move (Replaces('`', 'if "`" in "I`m okay"', "'")) to sLine
            Move (Replaces('`', 'if ("I`m okay" contains "`")', "'")) to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure CrLfInConstantString_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "If (Character(10)) in sValue RunProgram" to sLine
            Move "If (sValue contains (Character(10))) RunProgram" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure CrLfInAndSet_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If "Support Classes" in sShow Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sLine
            Move 'If (sShow contains "Support Classes") Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLegacyOperators is a cTestFixture
        Set psFunctionName to "ChangeLegacyOperators"

        {Published=True}
        Procedure While_Found_Expression
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    While ((Found) and (iA Eq iB))" to sLine
            Move "    While ((Found) and (iA = iB))" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure While_Legacy_Expression
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    While L lt 13" to sLine
            Move "    While (L < 13)" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLegacyShadow_State is a cTestFixture
        Set psFunctionName to "ChangeLegacyShadow_State"

        {Published=True}
        Procedure ChangeLegacyShadow_State_BaseTest
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Set Shadow_State of (oApplication(Self)) to False // Comment here' to sLine
            Move '  Set Enabled_State of (oApplication(Self)) to True // Comment here' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyShadow_State_GetTest
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Get Shadow_State to bState // Other comment' to sLine
            Move '  Get Enabled_State to (Not(bState)) // Other comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyShadow_State_SetFalse
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Set Shadow_State of oButton to (not(bState))' to sLine
            Move '  Set Enabled_State of oButton to bState' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacy_Object_Shadow_State
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Set Object_Shadow_state to True' to sLine
            Move '  Set Enabled_State to False' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeReplaceCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeReplaceCommandToFunction"

        {Published=True}
        Procedure Change_Replace_Command_To_Function
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Replace  "A"  In  sNameX  With "B" // End comment' to sLine
            Move '  Move (Replace("A", sNameX, "B")) to sNameX // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeReplaceCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeTrimCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeTrimCommandToFunction"

        {Published=True}
        Procedure Default_Test
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Trim sTmp to sValue" to sLine
            Move " Move (Trim(sTmp)) to sValue" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeTrimCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure Do_not_change_Comment_trim
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Move sTmp to sValue // That's mighty trim of you" to sLine
            Move " Move sTmp to sValue // That's mighty trim of you" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeTrimCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeUClassToRefClass_Fixture is a cTestFixture
        Set psFunctionName to "ChangeUClassToRefClass"

        {Published=True}
        Procedure SimpleTest
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Get Create U_Array to hArray" to sLine
            Move "    Get Create (RefClass(Array)) to hArray" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeUClassToRefClass of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ManySpaces
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Get    Create   U_Array    to     hArray" to sLine
            Move "    Get    Create   (RefClass(Array))    to     hArray" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeUClassToRefClass of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveLocalKeyWord is a cTestFixture
        Set psFunctionName to "RemoveLocalKeyWord"

        {Published=True}
        Procedure RemoveLocalKeyWord_Basic
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Local Integer iRename' to sLine
            Move '  Integer iRename' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveLocalKeyWord_After_Comment_Characters
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  // Local Integer iRename' to sLine
            Move '  // Local Integer iRename' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveLocalKeyWord_In_Quotes
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  "Local Integer iRename"' to sLine
            Move '  "Local Integer iRename"' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveOldStudioMarkers is a cTestFixture
        Set psFunctionName to "RemoveOldStudioMarkers"

        {Published=True}
        Procedure RemoveOldStudioMarkers_AB_IgnoreStart
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//AB-IgnoreStart' to sLine
            Move '//AB-IgnoreStart' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            // Returns True if a legacy IDE (Studio) source code marker is found, and
            // in case the source line should be removed.
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveOldStudioMarkers_AB_DDOEnd
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//AB-DDOEnd' to sLine
            Move '//AB-DDOEnd' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveOldStudioMarkers_PanelStoreTopStart
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  //AB-PanelStoreTopStart' to sLine
            Move '  //AB-PanelStoreTopStart' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveOldStudioMarkers_AB_Comment
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  //AB/ ' to sLine
            Move '  //AB/ ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveOldStudioMarkers_IDE_FileType
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//IDE-FileType=ftApplication' to sLine
            Move '//IDE-FileType=ftApplication' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeFoundAndFindErrIndicators is a cTestFixture
        Set psFunctionName to "ChangeFoundAndFindErrIndicators"

        {Published=False}
        Procedure ChangeFoundAndFindErrIndicators_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeFoundAndFindErrIndicators ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeFoundLoopIndicator is a cTestFixture
        Set psFunctionName to "ChangeFoundLoopIndicator"

        {Published=False}
        Procedure ChangeFoundLoopIndicator_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeFoundLoopIndicator ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeIndicateFoundToMoveTrueToFound is a cTestFixture
        Set psFunctionName to "ChangeIndicateFoundToMoveTrueToFound"

        {Published=False}
        Procedure ChangeIndicateFoundToMoveTrueToFound_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicateFoundToMoveTrueToFound ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeIndicatorRepeatToWhile is a cTestFixture
        Set psFunctionName to "ChangeIndicatorRepeatToWhile"

        {Published=False}
        Procedure ChangeIndicatorRepeatToWhile_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicatorRepeatToWhile ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeInsertCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeInsertCommandToFunction"

        {Published=False}
        Procedure ChangeInsertCommandToFunction_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInsertCommandToFunction ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLengthCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeLengthCommandToFunction"

        {Published=False}
        Procedure ChangeLengthCommandToFunction_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLengthCommandToFunction ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangePosCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangePosCommandToFunction"

        {Published=False}
        Procedure ChangePosCommandToFunction_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangePosCommandToFunction ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeSysdate4 is a cTestFixture
        Set psFunctionName to "ChangeSysdate4"

        {Published=False}
        Procedure ChangeSysdate4_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeSysdate4 ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeUntilAndWhileIndicators is a cTestFixture
        Set psFunctionName to "ChangeUntilAndWhileIndicators"

        {Published=False}
        Procedure ChangeUntilAndWhileIndicators_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeUntilAndWhileIndicators ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeZeroStringCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeZeroStringCommandToFunction"

        {Published=False}
        Procedure ChangeZeroStringCommandToFunction_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeZeroStringCommandToFunction ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oEditorDropSelf is a cTestFixture
        Set psFunctionName to "EditorDropSelf"

        {Published=False}
        Procedure EditorDropSelf_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get EditorDropSelf ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oEditorNormalizeCase is a cTestFixture
        Set psFunctionName to "EditorNormalizeCase"

        {Published=False}
        Procedure EditorNormalizeCase_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get EditorNormalizeCase ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oEditorReIndent is a cTestFixture
        Set psFunctionName to "EditorReIndent"

        {Published=False}
        Procedure EditorReIndent_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get EditorReIndent ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveEndComments is a cTestFixture
        Set psFunctionName to "RemoveEndComments"

        {Published=False}
        Procedure RemoveEndComments_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveEndComments ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveMultipleBlankLines is a cTestFixture
        Set psFunctionName to "RemoveMultipleBlankLines"

        {Published=False}
        Procedure RemoveMultipleBlankLines_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveMultipleBlankLines ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveProjectObjectStructure is a cTestFixture
        Set psFunctionName to "RemoveProjectObjectStructure"

        {Published=False}
        Procedure RemoveProjectObjectStructure_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveProjectObjectStructure ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemovePropertyPrivate is a cTestFixture
        Set psFunctionName to "RemovePropertyPrivate"

        {Published=False}
        Procedure RemovePropertyPrivate_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemovePropertyPrivate ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemovePropertyPublic is a cTestFixture
        Set psFunctionName to "RemovePropertyPublic"

        {Published=False}
        Procedure RemovePropertyPublic_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemovePropertyPublic ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveSansSerif is a cTestFixture
        Set psFunctionName to "RemoveSansSerif"

        {Published=False}
        Procedure RemoveSansSerif_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveSansSerif ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveStudioGeneratedComments is a cTestFixture
        Set psFunctionName to "RemoveStudioGeneratedComments"

        {Published=False}
        Procedure RemoveStudioGeneratedComments_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveStudioGeneratedComments ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveTrailingSpaces is a cTestFixture
        Set psFunctionName to "RemoveTrailingSpaces"

        {Published=False}
        Procedure RemoveTrailingSpaces_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveTrailingSpaces ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveUnusedLocals is a cTestFixture
        Set psFunctionName to "RemoveUnusedLocals"

        {Published=False}
        Procedure RemoveUnusedLocals_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveUnusedLocals ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oReplaceCalcWithMoveStatement is a cTestFixture
        Set psFunctionName to "ReplaceCalcWithMoveStatement"

        {Published=False}
        Procedure ReplaceCalcWithMoveStatement_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ReplaceCalcWithMoveStatement ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oReportUnusedSourceFiles is a cTestFixture
        Set psFunctionName to "ReportUnusedSourceFiles"

        {Published=False}
        Procedure ReportUnusedSourceFiles_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ReportUnusedSourceFiles ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRestylelDDOs is a cTestFixture
        Set psFunctionName to "RestylelDDOs"

        {Published=False}
        Procedure RestylelDDOs_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RestylelDDOs ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oSplitInlineIfElseLine is a cTestFixture
        Set psFunctionName to "SplitInlineIfElseLine"

        {Published=False}
        Procedure SplitInlineIfElseLine_xx
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get SplitInlineIfElseLine ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

End_Object
