//Use cTestFixture.pkg
Use cRefactorFuncLib.pkg

Object cRefactorFuncLib_Tests is a cTestFixture
    Set psFunctionName to "Main Test Fixture Object"

        // I don't think there is any point in creating/destroying
        // the function library for each cTestFixture object, so moved it
        // out of the Setup/TearDown messages.
        Object oRefactorFunctionLibrary is a cRefactorFuncLib
        End_Object

        Procedure Setup
        End_Procedure

        // Reinitialize base class properties for each cTestFixture object procedure call.
        Procedure TearDown
            Set pbInRepeatLoop                 of ghoRefactorFunctionLibrary to False
            Set pbInProcedure                  of ghoRefactorFunctionLibrary to False
            Set pbInFunction                   of ghoRefactorFunctionLibrary to False
            Set pbIsInPage                     of ghoRefactorFunctionLibrary to False
            Set pbIsInDF23MultiLineComment     of ghoRefactorFunctionLibrary to False
            Set pbIsInSemiColonMultiLineString of ghoRefactorFunctionLibrary to False
            Set pbIsInDF23MultiLineString      of ghoRefactorFunctionLibrary to False
            Set pbIsOpenString                 of ghoRefactorFunctionLibrary to False
            Set pbIsInSingleQuote              of ghoRefactorFunctionLibrary to False
        End_Procedure

    // *** cTestFixture obejcts below: ***

    Object oChangeCurrent_ObjectToSelf is a cTestFixture
        Set psFunctionName to "ChangeCurrent_ObjectToSelf"

        {Published=True}
        Procedure ChangeCurrent_ObjectToSelf_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (piCurrentRow(Current_Object)) to iRow' to sLine
            Move 'Move (piCurrentRow(Self)) to iRow' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeCurrent_ObjectToSelf of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeCurrent_ObjectToSelf_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (piCurrentRow(Current_Object)) to (phoTestHandle(Current_Object))' to sLine
            Move 'Move (piCurrentRow(Self)) to (phoTestHandle(Self))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeCurrent_ObjectToSelf of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeDfTrueDfFalse is a cTestFixture
        Set psFunctionName to "ChangeDfTrueDfFalse"

        {Published=True}
        Procedure ChangeDfTrueDfFalse_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move DFTrue to Found' to sLine
            Move 'Move True to Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeDfTrueDfFalse of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeDfTrueDfFalse_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move DFFalse to Found' to sLine
            Move 'Move False to Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeDfTrueDfFalse of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLegacyIndicators is a cTestFixture
        Set psFunctionName to "ChangeLegacyIndicators"
        // Changes [Found] Command -> If (Found) Command
        //         [Found] While -> While (Found)
        //         [Found] Repeat -> While (Found)
        {Published=True}
        Procedure ChangeLegacyIndicators_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Found] Reread // End comment' to sLine
            Move '   If (Found) Reread // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [found]   reread' to sLine
            Move '   If (found)   reread' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Not Found] Move iA to iB // End comment' to sLine
            Move '   If (Not(Found)) Move iA to iB // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Found] Repeat // End comment' to sLine
            Move '   While (Found) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not Seqeof] Repeat // End comment' to sLine
            Move '   While (Not(Seqeof)) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_6
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not Found] Repeat // End comment' to sLine
            Move '   While (Not(Found)) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_7
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Found] Loop // End comment' to sLine
            Move '   Loop // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_8
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not Seqeof] Loop // End comment' to sLine
            Move '   Loop // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_9
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Select] Until [Found] // End comment' to sLine
            Move '   Until (Found) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_10
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not Found] While // End comment' to sLine
            Move '   While (Not(Found)) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyIndicators_11
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   While [not Found] // End comment' to sLine
            Move '   While (Not(Found)) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeGetAddress is a cTestFixture
        Set psFunctionName to "ChangeGetAddress"

        {Published=True}
        Procedure GetAddress_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    GetAddress of sString to pMyPointer" to sLine
            Move "    Move (AddressOf(sString)) to pMyPointer" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure GetAddress_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Function GetAddress Returns String" to sLine
            Move " Function GetAddress Returns String" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure GetAddress_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Entry_Item (GetAddress(oCustomer_DD))" to sLine
            Move " Entry_Item (GetAddress(oCustomer_DD))" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure GetAddress_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "String structBytesRead      //Actual bytes read - Should be integer but getAddress cannot find " to sLine
            Move "String structBytesRead      //Actual bytes read - Should be integer but getAddress cannot find " to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

//    Object oChangeIndicatorToIfBegin is a cTestFixture
//        Set psFunctionName to "ChangeIndicatorToIfBegin"
//
//        {Published=True}
//        Procedure Change_Indicator_to_If_Begin
//            String sLine sExpected
//            Boolean bChanged
//            tTokenizer TokenizerData
//            Move "  [not Seqeof] Begin // Comment" to sLine
//            Move "  If (Seqeof = False) Begin // Comment" to sExpected
//            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
//            Get ChangeIndicatorToIfBegin of ghoRefactorFunctionLibrary (&sLine) to bChanged
//            Send AssertSAreEqual sExpected sLine
//        End_Procedure
//
//    End_Object

    Object oChangeIndicatorToMoveStateToVariable is a cTestFixture
        Set psFunctionName to "ChangeIndicatorToMoveStateToVariable"

        {Published=True}
        Procedure ChangeIndicatorToMoveStateToVariable__1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    [Select] Indicate Select as Windowindex Eq Fieldindex // Comment" to sLine
            Move "    If (Select) Move Windowindex Eq Fieldindex to Select // Comment" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicatorToMoveStateToVariable of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeIndicatorToMoveStateToVariable_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Indicate Select as Windowindex Eq Fieldindex // Comment" to sLine
            Move "    Move (Windowindex = Fieldindex) to Select // Comment" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicatorToMoveStateToVariable of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeInToContains_Fixture is a cTestFixture
        Set psFunctionName to "ChangeInToContains"

        {Published=True}
        Procedure ChangeInToContains_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    indicate Select as sSubString in sHostString // Comment' to sLine
            Move '    indicate Select as (sHostString contains sSubString) // Comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeInToContains_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    if sSubString in sHostString RunProgram' to sLine
            Move '    if (sHostString contains sSubString) RunProgram' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeInToContains_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Until sSubString in sHostString' to sLine
            Move 'Until (sHostString contains sSubString)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeInToContains_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'While sSubString in sHostString' to sLine
            Move 'While (sHostString contains sSubString)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        // This test will fail because the logic assumes the source line to be of proper syntax,
        // e.g. it needs to start with a command (or indicator + command).
        {Published=True}
        Procedure ChangeInToContains_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    If sSubString    in     sHostString Move True to bFound' to sLine
            Move '    If (sHostString contains sSubString) Move True to bFound' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeInToContains_6
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'if "." in a_number' to sLine
            Move 'if (a_number contains ".")' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeInToContains_7
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'if "." in "12.12"' to sLine
            Move 'if ("12.12" contains ".")' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeInToContains_8
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move (Replaces('`', 'if "`" in "I`m okay"', "'")) to sLine
            Move (Replaces('`', 'if ("I`m okay" contains "`")', "'")) to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeInToContains_9
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move (Replaces('`', 'if "`" in "I`m okay"', "'")) to sLine
            Move (Replaces('`', 'if ("I`m okay" contains "`")', "'")) to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeInToContains_10
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "If (Character(10)) in sValue RunProgram" to sLine
            Move "If (sValue contains (Character(10))) RunProgram" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeInToContains_11
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If "Support Classes" in sShow Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sLine
            Move 'If (sShow contains "Support Classes") Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLegacyOperators is a cTestFixture
        Set psFunctionName to "ChangeLegacyOperators"

        {Published=True}
        Procedure ChangeLegacyOperators_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    While ((Found) and (iA Eq iB))" to sLine
            Move "    While ((Found) and (iA = iB))" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyOperators_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    While L lt 13" to sLine
            Move "    While (L < 13)" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLegacyShadow_State is a cTestFixture
        Set psFunctionName to "ChangeLegacyShadow_State"

        {Published=True}
        Procedure ChangeLegacyShadow_State_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Set Shadow_State of (oApplication(Self)) to False  // Comment here' to sLine
            Move '   Set Enabled_State of (oApplication(Self)) to True  // Comment here' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyShadow_State_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Get Shadow_State to bState   // Other comment' to sLine
            Move '   Get Enabled_State to (Not(bState))   // Other comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyShadow_State_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Set Shadow_State of oButton to (not(bState))' to sLine
            Move '   Set Enabled_State of oButton to bState' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyShadow_State_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Set Object_Shadow_state to True' to sLine
            Move '   Set Enabled_State to False' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyShadow_State_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Set Shadow_State of oButton to (not(bState)) // End comment' to sLine
            Move '   Set Enabled_State of oButton to bState // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeLegacyShadow_State_6
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '        Set Shadow_State of oButton to (not(bState))' to sLine
            Move '        Set Enabled_State of oButton to bState' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeReplaceCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeReplaceCommandToFunction"

        {Published=True}
        Procedure ChangeReplaceCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Replace  "A"  In  sNameX  With "B" // End comment' to sLine
            Move '  Move (Replace("A", sNameX, "B")) to sNameX // End comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeReplaceCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeTrimCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeTrimCommandToFunction"

        {Published=True}
        Procedure ChangeTrimCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Trim sTmp to sValue" to sLine
            Move " Move (Trim(sTmp)) to sValue" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeTrimCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeTrimCommandToFunction_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Move sTmp to sValue // That's mighty trim of you" to sLine
            Move " Move sTmp to sValue // That's mighty trim of you" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeTrimCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeTrimCommandToFunction_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " If iA gt iB Trim sTmp to sValue" to sLine
            Move " If iA gt iB Move (Trim(sTmp)) to sValue" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeTrimCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeUClassToRefClass_Fixture is a cTestFixture
        Set psFunctionName to "ChangeUClassToRefClass"

        {Published=True}
        Procedure ChangeUClassToRefClass_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Get Create U_Array to hArray" to sLine
            Move "    Get Create (RefClass(Array)) to hArray" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeUClassToRefClass of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeUClassToRefClass_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Get    Create   U_Array    to     hArray" to sLine
            Move "    Get    Create   (RefClass(Array))    to     hArray" to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeUClassToRefClass of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveLocalKeyWord is a cTestFixture
        Set psFunctionName to "RemoveLocalKeyWord"

        {Published=True}
        Procedure RemoveLocalKeyWord_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Local Integer iRename' to sLine
            Move '  Integer iRename' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveLocalKeyWord_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  // Local Integer iRename' to sLine
            Move '  // Local Integer iRename' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveLocalKeyWord_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  "Local Integer iRename"' to sLine
            Move '  "Local Integer iRename"' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveLocalKeyWord_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Local String[] asData' to sLine
            Move '  String[] asData' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveOldStudioMarkers is a cTestFixture
        Set psFunctionName to "RemoveOldStudioMarkers"

        {Published=True}
        Procedure RemoveOldStudioMarkers_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//AB-IgnoreStart' to sLine
            Move '//AB-IgnoreStart' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            // Returns True if a legacy IDE (Studio) source code marker is found, and
            // in case the source line should be removed.
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveOldStudioMarkers_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//AB-DDOEnd' to sLine
            Move '//AB-DDOEnd' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveOldStudioMarkers_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  //AB-PanelStoreTopStart' to sLine
            Move '  //AB-PanelStoreTopStart' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveOldStudioMarkers_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  //AB/ ' to sLine
            Move '  //AB/ ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveOldStudioMarkers_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//IDE-FileType=ftApplication' to sLine
            Move '//IDE-FileType=ftApplication' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFunctionLibrary (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeIndicateCommand is a cTestFixture
        Set psFunctionName to "ChangeIndicateCommand"

        {Published=True}
        Procedure ChangeIndicateCommand_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate Found as True' to sLine
            Move 'Move (True) to Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicateCommand of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeIndicateCommand_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate [Found] as True' to sLine
            Move 'Move (True) to Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicateCommand of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ChangeIndicateCommand_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '[Select] Indicate Select as Windowindex Eq Fieldindex' to sLine
            Move 'Move (WindowInex = FieldIndex) to Select' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeIndicateCommand of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeInsertCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeInsertCommandToFunction"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure ChangeInsertCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeInsertCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLengthCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeLengthCommandToFunction"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure ChangeLengthCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeLengthCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangePosCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangePosCommandToFunction"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure ChangePosCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangePosCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeSysdate4 is a cTestFixture
        Set psFunctionName to "ChangeSysdate4"

        {Published=True}
        Procedure ChangeSysdate4_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Sysdate4 dToday' to sLine
            Move 'Sysdate dToday' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeSysdate4 of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeZeroStringCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeZeroStringCommandToFunction"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure ChangeZeroStringCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ChangeZeroStringCommandToFunction of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oEditorDropSelf is a cTestFixture
        Set psFunctionName to "EditorDropSelf"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure EditorDropSelf_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get EditorDropSelf of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oEditorNormalizeCase is a cTestFixture
        Set psFunctionName to "EditorNormalizeCase"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure EditorNormalizeCase_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get EditorNormalizeCase of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oEditorReIndent is a cTestFixture
        Set psFunctionName to "EditorReIndent"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure EditorReIndent_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get EditorReIndent of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveEndComments is a cTestFixture
        Set psFunctionName to "RemoveEndComments"

        {Published=True}
        Procedure RemoveEndComments_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'End_Procedure   // This is a bla bla procedure' to sLine
            Move 'End_Procedure' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveEndComments of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveEndComments_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'End_Function   // This is an end function' to sLine
            Move 'End_Function' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveEndComments of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveEndComments_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'End_Class   // This class does bla bla bla' to sLine
            Move 'End_Class' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveEndComments of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure RemoveEndComments_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'End_Object   // This object does bla bla bla' to sLine
            Move 'End_Object' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveEndComments of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveMultipleBlankLines is a cTestFixture
        Set psFunctionName to "RemoveMultipleBlankLines"

        {Published=False}
        // Don't know if and how this should/could be tested?
        Procedure RemoveMultipleBlankLines_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveMultipleBlankLines of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveProjectObjectStructure is a cTestFixture
        Set psFunctionName to "RemoveProjectObjectStructure"

        {Published=False}
        // Don't know if and how this should/could be tested?
        Procedure RemoveProjectObjectStructure_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveProjectObjectStructure of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemovePropertyPrivate is a cTestFixture
        Set psFunctionName to "RemovePropertyPrivate"

        {Published=True}
        Procedure RemovePropertyPrivate_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Property Boolean pbState Private' to sLine
            Move 'Property Boolean pbState' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemovePropertyPrivate of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemovePropertyPublic is a cTestFixture
        Set psFunctionName to "RemovePropertyPublic"

        {Published=True}
        Procedure RemovePropertyPublic_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Property Boolean pbState Public' to sLine
            Move 'Property Boolean pbState' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemovePropertyPublic of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveSansSerif is a cTestFixture
        Set psFunctionName to "RemoveSansSerif"

        {Published=True}
        Procedure RemoveSansSerif_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Set TypeFace to "MS Sans serif"' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveSansSerif of ghoRefactorFunctionLibrary (&sLine) to bChanged
            If (bChanged = True) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveStudioGeneratedComments is a cTestFixture
        Set psFunctionName to "RemoveStudioGeneratedComments"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure RemoveStudioGeneratedComments_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveStudioGeneratedComments of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveTrailingSpaces is a cTestFixture
        Set psFunctionName to "RemoveTrailingSpaces"

        {Published=True}
        Procedure RemoveTrailingSpaces_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move True to Seqeof     ' to sLine
            Move 'Move True to Seqeof' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveTrailingSpaces of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveUnusedLocals is a cTestFixture
        Set psFunctionName to "RemoveUnusedLocals"

        {Published=False}
        // Not sure how we should test this?
        Procedure RemoveUnusedLocals_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RemoveUnusedLocals of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oReplaceCalcWithMoveStatement is a cTestFixture
        Set psFunctionName to "ReplaceCalcWithMoveStatement"

        {Published=True}
        Procedure ReplaceCalcWithMoveStatement_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Calc (iA * iB) to iC' to sLine
            Move 'Move (iA * iB) to iC' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ReplaceCalcWithMoveStatement_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'MoveInt (iA * iB) to iC' to sLine
            Move 'Move (iA * iB) to iC' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ReplaceCalcWithMoveStatement_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'MoveNum (nA * nB) to nC' to sLine
            Move 'Move (nA * nB) to nC' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ReplaceCalcWithMoveStatement_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'MoveReal (rA * rB) to rC' to sLine
            Move 'Move (rA * rB) to rC' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published=True}
        Procedure ReplaceCalcWithMoveStatement_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'MoveStr ("Yes" * "and") to sC' to sLine
            Move 'Move ("Yes" * "and") to sC' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ReplaceCalcWithMoveStatement of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oReportUnusedSourceFiles is a cTestFixture
        Set psFunctionName to "ReportUnusedSourceFiles"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure ReportUnusedSourceFiles_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get ReportUnusedSourceFiles of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRestylelDDOs is a cTestFixture
        Set psFunctionName to "RestylelDDOs"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure RestylelDDOs_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get RestylelDDOs of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oSplitInlineIfElseLine is a cTestFixture
        Set psFunctionName to "SplitInlineIfElseLine"

        {Published=False}
        // Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure SplitInlineIfElseLine_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Get SplitInlineIfElseLine of ghoRefactorFunctionLibrary (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oTokenizer is a cTestFixture
        Set psFunctionName to "Tokenizer"

        {Published=True}
        Procedure Tokenizer_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a quoted string" to sVal' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bHasOverstrikeChars = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "Move 'Single quoted string' to sVal" to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bHasOverstrikeChars = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "Move 'Single quoted string' to sVal" to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Move "Move '++++++++++++++++++++' to sVal" to sExpected
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a test string on multiple lines;'   to sLine
            Move 'Move "_______________________________________;'   to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine       to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "Double quoted string" to sVal' to sLine
            Move 'Move "____________________" to sVal' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_6
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '           //Move WindowIndex to FieldIndex' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsComment = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_7
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move aA to sB //This is an end comment' to sLine
            Move '//This is an end comment' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sEndComment sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_8
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/* Move (iA / iB) to nC' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineComment = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_9
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/* Move (iA / iB) to nC' to sLine
            Move '#######################' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_10
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Continuation of a DF23 multi-line comment' to sLine
            Move '###########################################' to sExpected
            Set pbIsInDF23MultiLineComment of ghoRefactorFunctionLibrary to True
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_11
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (iA / iB) to nC */' to sLine
            Set pbIsInDF23MultiLineComment of ghoRefactorFunctionLibrary to True
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineComment = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_12
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/* Move (iA / iB) to nC' to sLine
            Move '#######################' to sExpected
            Set pbIsInDF23MultiLineComment of ghoRefactorFunctionLibrary to True
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_13
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (iA / iB) to nC */' to sLine
            Move '#######################' to sExpected
            Set pbIsInDF23MultiLineComment of ghoRefactorFunctionLibrary to True
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_14
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (iA / iB) to nD' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineComment = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_15
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move CS_CRLF to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsBlank = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_16
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "" to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsBlank = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_17
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/MyPageName' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInImage = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_18
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/*' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bLineIsReady = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_19
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//  /*' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInImage = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_20
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Send Info_Box "This is a text string with an embedded semi-colon ;"' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bHasEndSemiColon = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_21
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a source line with an ending semi-colon" ;' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bHasEndSemiColon = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_22
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If bOK ;  // Expand vDataType in the debugger' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bHasEndSemiColon = True)
        End_Procedure


        {Published=True}
        Procedure Tokenizer_23
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '@"Hello World' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_24
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '@"Hello World' to sLine
            Move '@"___________' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        // The pbIsInDF23MultiLineString property should now be = True (after the Tokenizer_IsMultiLineStringStart_1_1 test)
        {Published=True}
        Procedure Tokenizer_25
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    we will MOVE our warehouse to Lincoln next month.' to sLine
            Move     '_________________________________________________' to sExpected
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True
            Set pbIsOpenString            of ghoRefactorFunctionLibrary to True
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_26
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    we will MOVE our warehouse to Lincoln next month.' to sLine
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True
            Set pbIsOpenString            of ghoRefactorFunctionLibrary to True
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_27
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    we will MOVE our warehouse to Lincoln next month.' to sLine
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True
            Set pbIsOpenString            of ghoRefactorFunctionLibrary to True
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bLineIsReady = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_28
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get SQLExecDirect of ghoSQLExecutor @SQL"""' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_29
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move @SQL""" SELECT * FROM Customer WHERE Customer.Name = "John Doe" """ to sSQL // End comment' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_30
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "@SQL" to sString // And an end comment' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_31
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a string" to sText' to sLine
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_32
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '// This is a comment' to sLine
            Set pbIsInDF23MultiLineString of ghoRefactorFunctionLibrary to True
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_33
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '// Function MyFunction String sA Returns Boolean ' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInFunction = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_34
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Function MyFunction String sA Returns Boolean ' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInFunction = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_35
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "Function MyFunction String sA Returns Boolean" to sMyString' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInFunction = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_36
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '// Procedure MyProc String sLine' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInProcedure = False)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_37
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Procedure MyProc String sLine' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInProcedure = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_38
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '#COMMAND WebPublishProcedure R .' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bIsInCommand = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_39
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '         Move aA to sB //This is an end comment' to sLine
            Move '         ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sIndentation sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_40
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move ('      //Move Windowindex to FieldIndex') to sLine
            Move '       ' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.bLineIsReady = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_41
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate [Found] as (True = bTrue)' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.bHasIndicateCommand = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_42
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If [Found] Indicate Err as (True = bTrue)' to sLine
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.bHasIndicateCommand = True)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_43
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate [Found] as (True = bTrue)' to sLine
            Move 'Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.FirstIndicator.sCode = sExpected)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_44
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '[Found] Move [Not Seqeof] to [Select]' to sLine
            Move 'Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.FirstIndicator.sCode = sExpected)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_45
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move [Not Select] to [Found]' to sLine
            Move 'Found' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send Assert (TokenizerData.IndicatorInfo.ToIndicator.sCode = sExpected)
        End_Procedure

        {Published=True}
        Procedure Tokenizer_46
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get phoHandle of (oMyObject(Current_Object)) to Found' to sLine
            Move '(oMyObject(Current_Object))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.OfStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_47
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get psString of ghoApplication to sString' to sLine
            Move 'ghoApplication' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.OfStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_48
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (iA * iB) to iC' to sLine
            Move 'iC' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_49
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "New Label" to (Label(phoMainPanel(ghoApplication)))' to sLine
            Move '(Label(phoMainPanel(ghoApplication)))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_50
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "New Label" to (Label(phoMainPanel(ghoApplication))) // Some comment' to sLine
            Move '(Label(phoMainPanel(ghoApplication)))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_51
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move 'Move' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.SecondLeftCommand.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_52
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move 'Move' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.SecondLeftCommand.sCode sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_53
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move '((iA * iB > 10) + (iD + iE) > 100)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sLeftExpression1 sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_54
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move '(iA / iB)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sLeftExpression2 sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_55
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath // Some comment' to sLine
            Move '(phoWorkspace(ghoApplication))' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOfExpression sExpected
        End_Procedure

        {Published=True}
        Procedure Tokenizer_56
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'For iChar from 1 to (iPos - 1) // Some comment' to sLine
            Move '(iPos - 1)' to sExpected
            Get Tokenizer of ghoRefactorFunctionLibrary sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sToExpression sExpected
        End_Procedure

    End_Object

End_Object
