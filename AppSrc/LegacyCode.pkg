//'╗┐//************************************************************************
Function Process_Interrupt Returns Integer
    Local Integer rVal
    Local String Mess
    Indicator Debits
    
    [~Debits] Begin
        Move "An error was encountered. Do you wish to cancel this process?" to Mess
    End
    If (Found) Begin
        Send Stop_Box ("Bekräftat lösenord stämmer ej med nytt lösenord!")
    End
    Get YesNo_Box Mess "Process Interrupt" to rVal
End_Function // Process_Interrupt

/TestImage
SELECT * FROM [TABLE]
/*

Function CommentTest Returns Boolean
End_Function //*

Enumeration_List
    Define NO_LOCATE1
    Define SMART_LOCATE1
    Define POPUP_LOCATE1
    Define CENTER_ON_SCREEN1
    Define CENTER_ON_PANEL1
    Define CENTER_ON_PARENT1
End_Enumeration_List

Enum_List
    Define NO_LOCATE2
    Define SMART_LOCATE2
    Define POPUP_LOCATE2
    Define CENTER_ON_SCREEN2
    Define CENTER_ON_PANEL2
    Define CENTER_ON_PARENT2
End_Enum_List

Struct tTest
    String sTest
End_Struct

Define C_$MaxPositionShifts For ""
Define C_$PositionValueOutOfBounds For ""
Define C_$PositionValueNegativeOrZero For ""
Define C_$ValueOutOfBounds For ""
Define C_$OutcomeOutOfBounds For ""
Define C_$MaxInt64 for 1

Function BitShiftLeft Integer iPositions BigInt iOptShiftVal Returns BigInt
    BigInt iInt localIntRemovalTest
    Boolean bLocalRemoveTest
    String sLocalRemoveTest
    Integer iLocalRemoveTest
    UInteger uiLocalRemoveTest
    // The following will *not* be removed by the RemoveUnusedLocals function.
    tTest tTestLocalRemoveTest
    
    If (iPositions > C_$MaxPositionShifts) Begin
        Error DFERR_PROGRAM C_$PositionValueOutOfBounds
        Function_Return 0
    End
    Else If (iPositions <= 0) Begin
        Error DFERR_PROGRAM C_$PositionValueNegativeOrZero
        Function_Return 0
    End
    
    Move (2^iPositions) to iInt
    
    If (num_arguments > 1) Begin
        If (iOptShiftVal > C_$MaxInt64) Begin
            Error DFERR_PROGRAM C_$ValueOutOfBounds
            Function_Return 0
        End
        If (iInt * iOptShiftVal > C_$MaxInt64) Begin
            Error DFERR_PROGRAM C_$OutcomeOutOfBounds
            Function_Return 0
        End
        Function_Return (iInt * iOptShiftVal)
    End
    
    Function_Return iInt
End_Function

Object oTest is a Button
    Property Private String psStringProp "teststring"
    Property Public String psStringProp "teststring"
    
    Procedure Anything
        String sString sRow sKalle sAnders
        Boolean bRename
        Move "teststring                " to sString
        Trim sString to sString
        Move dfTrue to bRename
        If ((Left(sRow,1)) ne "#") Move dfFalse to bRename
    End_Procedure

    Function _ Global String sVal Returns String
        Integer rval# tmp# iArg code#
        If iArg eq 1 Send Anything
        If code# eq 0 If tmp# ge 0 Move (rval#+tmp#) to rval#
    End_Function

    Procedure OnClick
        String sOldPassword sNewPassword

        If sNewPassword eq "" Begin
            If (sNewPassword <> sOldPassword) Begin
                Send Stop_Box (_("Bekräftat lösenord stämmer ej med nytt lösenord!"))
                Procedure_Return
            End
            If (sNewPassword = "") Begin
                [Found] Move ( _("Lösenordet måste uppfylla följande villkor") + ":\n\n" + ;
                _("Minst en stor bokstav") + "\n" + ;
                _("Minst en liten bokstav") + "\n" + ;
                _("Minst en siffra eller ett specialtecken") + "\n" + ;
                _("Minst åtta tecken")) to sNewPassword
                Procedure_Return
            End
        End
    End_Procedure
    
End_Object


Register_Procedure WrkSpcDoForAllFiles
Register_Procedure Set pbDontShowMNS
Register_Procedure CAOpenFile
Register_Function psWrkSpcOpenFileName Returns String
Register_Object VDFCLS_DD
Declare_Datafile Flexerrs

Procedure pFilesize Handle hTable Integer iSize Integer iMax Integer iFields
    Integer iA iB
    [Found] Delete hTable
    [FindErr] If (iA <> iB) Move False to Found
    [Found ~Found] Begin
    End
End_Procedure

Procedure TestSemiColons
/*
    String sTest1
*/
    String sTest
    Move "This is a test string on multiple lines;
        using the 'old school' DataFlex multi-line string version.;
        in contrast the new DF23 string style doesn't;
        need a semicolon at the end of line." to sTest
End_Procedure

Procedure TestDF23MultiStrings
    String sTest
    // This will not indent properly with the "Editor Reindent" function
    Move """
        My Summer Reading List:
        - We Are Legion
        - Ringworld
        - Project Hail Mary
    """ to sTest
End_Procedure

Procedure TestDF23SQLStrings
    String sTest
    // This will not indent properly with the "Editor Reindent" function
    Get SQLExecDirect of ghoSQLExecutor @SQL"""
        SELECT
            Phone_Number
        FROM
            Customer
        WHERE
            Customer_Number = 33
    """ to sTest
End_Procedure

Procedure First
    Integer iRowX iPosX iPos iPartXt_Next iCommasX iParXt_Next
    String sVal sTag sChr sLabel sRowX sShow
    Handle hoDest hoID
    
    If (True = False) Begin
    End
    // N.B! The following construction is valid!
    Else If hoDest If hoID Begin
    End
    
    If ((Mid(sRowX,1,iPosX)) eq ",") Add 1 to iCommasX
    
    If (phoWorkspace(ghoApplication) Ne 0) Send DoOpenWorkspace  to ghoApplication // End comment.
    If "Support Classes" in sShow Set pbDontShowMNS of (VDFCLS_DD(Self)) to True
    Replace sChr In sTag with (uppercase(sChr))
    Send Find to Self EQ 1
    If iParXt_Next Eq 0 Move "to"   to sLabel
End_Procedure

Procedure Start
    Variant[][] vData
    Integer iA iB iRow
    
    Move False to Found
    While ((Found) and (iA Eq iB))
    Loop

    If iA eq iB Begin
        Move (Trim (FlexErrs.Error_Descr) * Trim (Flexerrs.Note)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String
    End
    
    If iA eq iB Move (Trim (FlexErrs.Error_Descr) * Trim (Flexerrs.Note)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String
End_Procedure

// From OldFMACCommands.pkg
#IFDEF SELECT
#ELSE
    #Replace SELECT |!C
#ENDIF

Function TranslateTesting Returns String
    Function_Return ""
End_Function

Procedure Logg String sVal
    
    Move True to SeqEof
    [not SeqEof] Repeat
    [not SeqEof] Loop
    
    Move False to SeqEof
    While [SeqEof]
    Loop
    
    Indicate Select as Windowindex Eq Fieldindex // Comment
    [Select] Indicate Select as Windowindex Eq Fieldindex // Comment

    Integer iPosX iCommasX
    String sRowX
    If ((Mid(sRowX,1,iPosX)) eq ",") Add 1 to iCommasX
        
    If 1 eq 2 Begin
        If 1 gt 2 Begin
            If 1 ne 2 Begin
                [Found] Begin
                    If 1 lt 2 Begin
                    End // If Begin
                End // [Found] Begin

            End // If bTrasig Begin
        End // If  Begin
    End // [Found] Begin

Person_etikett_false:

End_Procedure


// If you set Current_radio you must set this after the
// radio objects have been created AND after Notify_select_State has been
// created. i.e. Set in bottom-code at end!!
//Set Current_Radio to 0

Register_Object oButton

Procedure One
    Date From_date
    String sVal
    Address aAddress
    Boolean bState
    String[] asArray
    Integer[] aiArray
         
    [not SeqEof] Begin
    End
        
    Move "Yes" to asArray[0]
    Move "No"  to asArray[1]
    Move 1     to aiArray[0]
    Move aiArray[0] to sVal
    GetAddress of sVal to aAddress

    Set Shadow_State of (oApplication(Self)) to False // Comment here
    Get Shadow_State to bState // Other comment
    Set Shadow_State of oButton to (not(bState))
        
        
    Move True to bState
    Set Shadow_State of ghoapplication to bState // Third comment
    Set Object_Shadow_state to True

    If sVal NE ""  Begin
        Move True to bState
    End
    
    //*****
    If (Uppercase("a") EQ Uppercase("b")) Begin
    End
    If (From_date EQ "" or not(IsDateValid(From_date)) or From_date LT 1/1/1900) Begin
    End

    Move True to SeqEof
    [not SeqEof] Repeat
    [not SeqEof] Loop
    
    Move False to SeqEof
    While [SeqEof]
    Loop
    
    Reread // End comment
    Repeat
    Until [SeqEof]
    Unlock
    
    Repeat
    Until [not Found]
End_Procedure
    
Declare_Datafile Flexerrs

Procedure OnConstrain
    Constrain FlexErrs.Recnum gt 10
    Find Eq Flexerrs by Recnum
End_Procedure
    
Procedure Test2
    Date dToday
    Sysdate4 dToday

    Indicate Found as True
    Indicate Found as (windowindex < fieldindex)

    Set piRowToInsert of AvgiftGrid to -1
End_Procedure

Object AvgiftGrid is a Grid
    Property Integer piRowToInsert -1
    Property Integer piCallbackObject 0
    Property String psCustomerIDToInsert ""
    Property Boolean pbOpenInEditModeRepeat False
    Property Boolean pbOpenPos False
End_Object

Function StringFromRightOfChar String sIn String sOut Returns String
End_Function

Object Renames is an Array
End_Object

Register_Object oMain

//OnChange is called on every changed character
Procedure OnChange
End_Procedure
    
// fires when the button is clicked
Procedure OnClick
End_Procedure

Procedure Test3
    String sOutConnStr
    Integer iStart iRetVal

    If (iStart = 1) Begin
        Procedure_Return
    End

    Set Value of (oMain(Current_Object))  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
    Set Status_Help to "Enter fields to be renamed in format FILE.OLDFIELD,NEWFIELD, e.g. CUSTOMER.CUST,CUSTNO"
End_Procedure
    
Function ParseFolderName Global String sFileName Returns String
    String sFile sResult sFolderName sDirSep
    Integer iLength

    ZeroString iLength to sResult

    Move "" to sFolderName
    Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep
    If sDirSep In sFileName Begin
        Move (StringFromRightOfChar(sFileName,sDirSep)) to sFile
        Move (Replace(sFile,sFileName,"")) to sFolderName
    End
    Else If ":" In sFileName Begin
        Move (StringFromRightOfChar(sFileName,":")) to sFile
        Move (Replace(sFile,sFileName,"")) to sFolderName
    End
    Function_Return sFolderName
End_Function // ParseFolderName

Procedure Add_Row String sRow
    Local Integer bRename
    Local Integer iPos
    Local Integer iCommas
    Move dfTrue to bRename
    If ((Left(sRow,1)) ne "#") Move dfFalse to bRename
    If (bRename) Begin
        For iPos from 1 to (Length(sRow))
            If ((Mid(sRow,1,iPos)) eq ",") Add 1 to iCommas
        Loop//iPos
        If (iCommas ne 2) Move dfFalse to bRename
    End
    If (bRename) Set Value of (Renames(Self)) Item (Item_Count(Renames(Self))) to (Replace("#",sRow,""))
    Else Set Value Item (Item_Count(Self)) to sRow
End_Procedure//Add_Row

Object oWorkspace is a cObject
End_Object
Object oKey is a cObject
End_Object
Object oDFPath is a cObject
End_Object

Function PathRow Returns String
    Local String  retval
    If ((Current_Radio(Self)) eq 0) Move (Append("W",(Value(oWorkspace(Self),0)))) to retval
    If ((Current_Radio(Self)) eq 1) Move (Append("K",(Value(oKey(Self),0)))) to retval
    If ((Current_Radio(Self)) eq 2) Move (Append("P",(Value(oDFPath(Self),0)))) to retval
    Function_Return retval
End_Function//PathRow

Procedure RepeatTest
    Move False to Found
    [Found] Repeat
    Move Windowindex to Fieldindex
    [Found] Loop
End_Procedure

Function ScalaUtpris String Utpris Returns String
    Number L D P
    String sName

    Trim Utpris to Utpris
    Length Utpris to L
    Pos "," In Utpris to P
    If p ne 0 Begin
        Move (L-P) to D
        If d eq  1 Begin
            Append Utpris "0"
        End
        If d gt  2 Begin
            Move (Left(Utpris, (P+2))) to Utpris
        End
    End
    If p eq  0 Begin
        Append Utpris ".00"
    End

    Length UTPRIS to L
    While L lt 13
        Insert " " In UTPRIS At 1
        Length UTPRIS to L
    Loop
    
    Move (Replace("A", sName, "B")) to sName
    Replace  "A"  In  sName  With "B"
    
    Function_Return Utpris
End_Function

// *** END-OF-TEST-SOURCE ***
