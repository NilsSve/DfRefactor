Use Windows.pkg  
Use cRefactorFunctionLibrary.pkg

Define CS_wsDoTranslate for "wsdotranslate"
Define CS_FuncOverWrite for "|||||||||||||"
Define CS_NewTranslate  for "_("

// ToDo: Needs reworking, to complicated.
// Change e.g. "Set Value to (wsDoTranslate(Self,2686,"Baskundnr saknas!"))" --> "Set Value to (_("Baskundnr saknas!"))
// Returns True if (ByRef) parameter sLine was changed.
Function ChangewsDoTranslateTo_ String ByRef sLine Returns Boolean
    String sText sStart
    Integer iPos
    Boolean bIsCommentOrBlank bChanged
    
    Move False to bChanged
    Move sLine to sText
    Get IsCommentLineOrBlank sText to bIsCommentOrBlank
    If (bIsCommentOrBlank = True) Begin
        Function_Return False
    End
    
    Move (Lowercase(sText)) to sText
    Move (Pos(CS_wsDoTranslate, sText)) to iPos
    If (iPos = 0) Begin
        Function_Return False
    End  
    Send StripConcatenatingSpaces sText sText
    Move (Pos((lowercase(CS_Function) + " "  + CS_wsDoTranslate), sText)) to iPos
    If (iPos <> 0) Begin
        Function_Return False
    End
    
    Move (Lowercase(sLine)) to sText
    Move (Pos(CS_wsDoTranslate, sText)) to iPos  
    If (iPos = 0) Begin
        Function_Return False
    End
        
    Move (Left(sLine, (iPos - 1 + Length(CS_wsDoTranslate)))) to sStart
    Move (Replace(sStart, sLine, "")) to sText
    Move (Replace(",", sText, "")) to sText
    Move (Replace(",", sText, "|")) to sText
    Move (Pos(Lowercase(CS_wsDoTranslate), Lowercase(sStart))) to iPos
    Move (Overstrike(CS_FuncOverWrite, sStart, iPos)) to sStart
    Move (Replace(CS_FuncOverWrite, sStart, "_(")) to sStart
    Move (Pos("|", sText)) to iPos   
    Move (Mid(sText, Length(sText), (iPos + 1))) to sText
    
    Move (String(sStart) + String(sText)) to sLine
    Move True to bChanged
    Move sLine to sText
    Move (Pos(Lowercase(CS_wsDoTranslate), Lowercase(sText))) to iPos
    // Recursive call(!)
    If (iPos <> 0) Begin
        Get ChangewsDoTranslateTo_ (&sLine) to bChanged
    End  

    Function_Return bChanged    
End_Function

// Changes "Set Shadow_State [of oObject] to True" to "Set Enabled_State [of oObject] to False"
// and     "Set Object_Shadow_State [of oObject] to True" to "Set Enabled_State [of oObject] to False"
Function ChangeLegacyShadow_State String ByRef sLine Returns Boolean
    tCodeComponents LineComponents                       
    tTokenizer TokenizerData
    String sCode sState sFirstChar sText
    Boolean bIsComment bIsOfOperator
    Integer iPos
    
    Get IsCommentLineOrBlank sLine to bIsComment
    If (bIsComment = True) Begin
        Function_Return False
    End
    
    // ToDo: Update for pTokenizer not finished...
    Get pTokenizer to TokenizerData
    Move (Trim(sLine)) to sCode
    Move (Lowercase(sCode)) to sCode
    Move (Left(sCode, 1)) to sFirstChar 
    
    // There are two variants of shadow state; Shadow_State and Object_Shadow_State
    Move "et shadow_state " to sText
    Move (Pos(sText, sCode)) to iPos
    If (iPos = 0) Begin
        Move "et object_shadow_state " to sText
        Move (Pos(sText, sCode)) to iPos
    End   
    If (iPos = 0) Begin
        Function_Return False
    End
    
    Move (Pos((" " + Lowercase(CS_To) + " "), sCode)) to iPos
    If (iPos = 0) Begin
        Function_Return False
    End

    Move (Mid(sLine, Length(sLine), (iPos + 3 + Length(LineComponents.sIndentation)))) to sState // Could also be a variable name (if get statement)
    Move (Replace(LineComponents.sRightComment, sState, "")) to sState 
    Move (" " + Trim(sState)) to sState

    // Set syntax:
    If (sFirstChar = "s") Begin
        If (Lowercase(sState) contains (" " + Lowercase(CS_True))) Begin
            Move (" " + CS_False) to sState
        End
        Else Begin   
            If (Lowercase(sState) contains (" " + Lowercase(CS_False))) Begin
                Move CS_True to sState
            End 
            Else Begin      
                If (Lowercase(sState) contains ("(" + Lowercase(CS_Not)) or sState contains ("( " + Lowercase(CS_Not)) or Lowercase(sState) contains (Lowercase(CS_Not + ")")) or Lowercase(sState) contains (Lowercase(CS_Not + " )"))) Begin
                    Move (Replace(CS_Not, sState, "")) to sState
                    Move (Replaces(")", sState, "")) to sState
                    Move (Pos("(", sState)) to iPos
                    Move (Mid(sState, Length(sState), (iPos +1))) to sState
                    Move (Pos("(", sState)) to iPos
                    Move (Mid(sState, Length(sState), (iPos +1))) to sState
                End   
                Else Begin
                    Move ("(" + CS_Not + "(" + Trim(sState) + "))") to sState
                End
            End
                
        End
        If (Length(LineComponents.sOfStatement)) Begin
            Move (CS_Set * CS_Enabled_State * CS_Of * LineComponents.sOfStatement * CS_To * String(sState)) to sCode 
        End
        Else Begin
            Move (CS_Set * CS_Enabled_State * CS_To * Trim(sState)) to sCode 
        End
    End           

    // Get Syntax:
    Else If (sFirstChar = "g") Begin                         
        Move (Lowercase(LineComponents.sToStatement)) to sText
        Move (Pos(Lowercase(CS_To), sText)) to iPos
        // Remove "To" keyword:
        If (iPos <> 0) Begin
            Move (Mid(LineComponents.sToStatement, Length(LineComponents.sToStatement), (iPos + 3))) to LineComponents.sToStatement
        End
        If (Length(LineComponents.sOfStatement)) Begin
            Move (CS_Get * CS_Enabled_State * LineComponents.sOfStatement * CS_To * "(" + CS_Not + "(" + LineComponents.sToStatement + "))") to sCode
        End
        Else Begin
            Move (CS_Get * CS_Enabled_State * CS_To * "(" + CS_Not + "(" + LineComponents.sToStatement + "))") to sCode
        End
    End
    If (LineComponents.sRightComment <> "") Begin
         Move (LineComponents.sIndentation + String(sCode) * String(LineComponents.sRightComment)) to sLine
    End
    Else Begin
        Move (LineComponents.sIndentation + String(sCode)) to sLine
    End
                            
    Function_Return True
End_Function
