Use Batchdd.pkg
Use cRefactorFunctionLibrary.pkg
Use cSysFileDataDictionary.dd
Use cFunctionsDataDictionary.dd
 
Object oBPO is a BusinessProcess
    Set Allow_Cancel_State to True 
    Set Status_Panel_State to True
    Set Status_Log_State to True
    Set Display_Error_State to False

    Delegate Set phoBPO to Self

    Procedure OnProcess
        String  sFolderName sFileName
        Boolean bOk bExists bStop bWriteLine bWorkspaceMode bIsStudioGenerated
        String[] asFolderNames
        String sFileFilter sPath sFullFileName sFunctionName sParameter
        Integer iCount iSourceFiles iItems iNoOfLines iTotNoOfLines iTotNoOfFiles iRetval iFunctionID
        Handle hoReportUnusedSource
        tRefactorSettings RefactorSettings
        tsSearchResult[] asSelectedSourceFiles

        Move True to bOk
        Move True to bWriteLine
        Move 0 to iTotNoOfFiles
        Move 0 to iTotNoOfLines
        Move 0 to iCount
        Get pRefactorSettings of ghoRefactorFunctionLibrary to RefactorSettings
        Get pbWorkspaceMode of ghoApplication to bWorkspaceMode

        // Workspace:
        If (bWorkspaceMode = True) Begin
            Move RefactorSettings.asFolderNames  to asFolderNames
            Move RefactorSettings.sFileFilter    to sFileFilter    
            // Get all selected files to a common string array.
            Get AllSourceFiles of ghoApplication asFolderNames sFileFilter to asSelectedSourceFiles
        End
        // Single file:
        Else Begin 
            Get psCurrentSourceFileName of ghoApplication to sFullFileName
            Get ParseFolderName sFullFileName to sFolderName   
            Get ParseFileName   sFullFileName to sFileName
            Move sFolderName to asSelectedSourceFiles[0].sAlternateFileName
            Move sFileName   to asSelectedSourceFiles[0].sFilename
        End

        Move (SizeOfArray(asSelectedSourceFiles)) to iSourceFiles
        Decrement iSourceFiles   
        
        // If any 'line-by-iine' or 'full source file' functions was selected:
        If (RefactorSettings.bCountSourceLines = True or RefactorSettings.iSelectedLineByLineFunctions <> 0 or RefactorSettings.iSelectedFullFileFunctions <> 0) Begin

            // Loop through all selected files:
            For iCount from 0 to iSourceFiles
                Move asSelectedSourceFiles[iCount].sAlternateFileName to sFolderName
                Move asSelectedSourceFiles[iCount].sFilename          to sFileName

                // We do _not_ refactor files generated by the Studio for COM components (.ocx files et al)
                Get _IsDataFlexCOMProxyClassesFile of ghoRefactorFunctionLibrary (sFolderName + String(sFileName)) to bIsStudioGenerated
                If (bIsStudioGenerated = False) Begin
                    Set Caption_text of ghoStatusPanel to "Refactoring Source Code"
                    Set Title_Text of ghoStatusPanel to ("Folder:" * String(sFolderName))
                    Set Message_Text of ghoStatusPanel to ("File:" * String(sFileName))
                    Send Update_status ("File No:" * String(iCount + 1) * "of:" * String(iSourceFiles + 1))
                    Get vFolderFormat sFolderName to sFolderName

                    // *** Count source lines ***
                    If (RefactorSettings.bCountSourceLines = True) Begin
                        Get _CountNumberOfLines of ghoRefactorFunctionLibrary (sFolderName + sFileName) to iNoOfLines
                        Add iNoOfLines to iTotNoOfLines   
                        Add 1          to iTotNoOfFiles
                    End                 
                    // *** Process one file with selected functions ***
                    Else Begin
                        Get ProcessFile (String(sFolderName) + String(sFileName)) to bOK
                    End
                End

                // We only check for "Cancel" once every new file.
                Get Cancel_Check to bStop
                If (bStop = True) Begin  
                    Procedure_Return
                End
            Loop

            If (RefactorSettings.bCountSourceLines = True) Begin   
                Reread SysFile
                    Move iTotNoOfLines to SysFile.iCountNumberOfLines 
                    Move iTotNoOfFiles to SysFile.iCountNumberOfFiles
                    SaveRecord SysFile
                Unlock
            End
        End 
        
        // *** All Selected Source File Functions *** 
        //
        // For these functions All selected source files are passed as a String array (with full path).
        // Note: These will be called _after_ files has been changed by the Scintilla editor (if selected).
        Else If (RefactorSettings.iSelectedAllFilesFunctions <> 0) Begin
            
            // *** Other Functions - All source files ***
            If (RefactorSettings.iSelectedOtherAllFunctions > 0) Begin                
                Constraint_Set (Self + 20) Clear  
                Constrained_Clear eq FunctionsA by Index.4
                Constrain FunctionsA.Selected eq True
                Constrain FunctionsA.Type eq eOther_FunctionAll
                Constrained_Find First FunctionsA by Index.4
                While (Found)
                    Move (Trim(FunctionsA.Parameter)) to sParameter
                    Move (Trim(FunctionsA.Function_Name)) to sFunctionName 
                    Move (Eval("get_" - (sFunctionName))) to iFunctionID
                    // Data send as ByRef to have a consistent calling convention for all refactoring functions:
                    Get iFunctionID of ghoRefactorFunctionLibrary (&asSelectedSourceFiles) sParameter to iRetval
                    If (iRetval <> 0) Begin
                        Reread FunctionsA
                            Add iRetval to FunctionsA.Count
                            SaveRecord FunctionsA
                        Unlock
                    End
                    Constrained_Find Next
                Loop
            End
            
            // *** Report Functions - All source files ***      (Makes _no_ source code changes)
            If (RefactorSettings.iSelectedReportAllFunctions > 0) Begin                
                Constraint_Set (Self + 21) Clear  
                Constrained_Clear eq FunctionsA by Index.4
                Constrain FunctionsA.Selected eq True
                Constrain FunctionsA.Type eq eReport_FunctionAll
                Constrained_Find First FunctionsA by Index.4
                While (Found)
                    Move (Trim(FunctionsA.Parameter)) to sParameter
                    Move (Trim(FunctionsA.Function_Name)) to sFunctionName 
                    Move (Eval("get_" - (sFunctionName))) to iFunctionID
                    // Data send as ByRef to have a consistent calling convention for all refactoring functions:
                    Get iFunctionID of ghoRefactorFunctionLibrary (&asSelectedSourceFiles) sParameter to iRetval
                    If (iRetval <> 0) Begin
                        Reread FunctionsA
                            Add iRetval to FunctionsA.Count
                            SaveRecord FunctionsA
                        Unlock
                    End
                    Constrained_Find Next
                Loop
            End
        
        End

//        If (SysFile.bRemoveUnusedLocals = True) Begin
//            Get RemoveUnusedLocals of ghoRefactorFunctionLibrary (sFolderName + sFileName) to iRetval
//            Reread SysFile
//                Add iRetval to SysFile.iCountUnusedLocals
//                SaveRecord SysFile
//            Unlock
//        End
        
    End_Procedure

    // Processes the file passed (with path) and performs the actions that have been chosen on it.
    // This function will always create a backup file and then call ApplyRefactorFunctions
    // for the actual work.
    Function ProcessFile String sFileName Returns Boolean
        Boolean bSuccess bSaveBak bChanged bExists 
        String sBackupFile
        Integer iRetval
        
        File_Exist sFileName bExists
        If (bExists = False) Begin
            Send UserError ("File doesn't exist." * String(sFileName) * String("ProcessFile in oBPO"))
            Function_Return False
        End
        Move True to bSuccess
        Get SaveBackupFile of ghoApplication sFileName to bSuccess
        If (bSuccess = False) Begin
            Send Info_Box ("The file could not be copied to the backup area and no attempt was made to change it.\n" * String(sFileName))
            Function_Return False
        End
        
        Send UpdateStatusBar sFileName True
        Send ResetProjectObjectStructureProperties of ghoRefactorFunctionLibrary
        
        // *** Make changes to source ***
        Get ApplyRefactorFunctions sFileName to bSuccess
        
        Send IncrementFileCount bSuccess
        // ** If the process failed we move tha backup copy back to its  original location **
        If (bSuccess = False) Begin
            Get BackupFileName of ghoApplication sFileName to sBackupFile  
            File_Exist sBackupFile bExists
            If (bExists = True) Begin
                Get vMoveFile sBackupFile sFileName to iRetval
                If (iRetval <> 0) Begin
                    Showln "Error moving file: " sBackupFile
                End
            End
        End

        Function_Return bSuccess
    End_Function

    // Here all functions are applied to the source code,
    // _except_ for eOther_FunctionAll & eReport_FunctionAll Function types, which are called from the OnProcess event.
    Function ApplyRefactorFunctions String sSourceFile Returns Boolean
        Boolean bParseOK bChanged bWriteOK bWebAppFile bFound bWorkSpaceMode
        Boolean bEditorFunctions bSaved bIsSame bWriteLine bChangesMade
        Boolean bProjectObjectStructureStart bProjectObjectStructureEnd bRegisterAllObjectsStart bRegisterAllObjectsEnd 
        Integer iLine iRetval iSize iFunctionID
        String  sLine sBasePath sFileNameOnly sExtension sFunctionName sParameter
        Handle hoEditor
        String[] asSourceFile asOrgSourceFile asObjectNames
        tRefactorSettings RefactorSettings

        Move False to Err
        Move False to bChangesMade
        Move False to bParseOK
        Move False to bProjectObjectStructureStart
        Move False to bProjectObjectStructureEnd
        Move False to bRegisterAllObjectsStart
        Move False to bRegisterAllObjectsEnd      
        Get phoEditor of ghoApplication to hoEditor
        Get pbWorkspaceMode of ghoApplication to bWorkSpaceMode
        
        Get pRefactorSettings of ghoRefactorFunctionLibrary to RefactorSettings
        Get ParseFileName      sSourceFile to sFileNameOnly
        Get ParseFileExtension sSourceFile to sExtension
        Move (".wo;.html;.asp;.css;.js" contains lowercase(sExtension)) to bWebAppFile

        Get ReadSourceFileToArray sSourceFile to asSourceFile
        // We will make changes to asSourceFile, and keep asOrgSourceFile as a reference to check if anything has changed.
        Move asSourceFile to asOrgSourceFile
        Move (SizeOfArray(asSourceFile)) to iSize
        Set Message_Text of ghoStatusPanel to ("Parsing:" * String(sFileNameOnly) * "Lines:" * String(iSize))
        Decrement iSize
        
        // ***Count source lines: ***
        If (RefactorSettings.bCountSourceLines = True) Begin
            Get _CountNumberOfLines sSourceFile to iRetval
            Reread SysFile
                Move iRetval to SysFile.iCountNumberOfLines
                SaveRecord SysFile
            Unlock
            Function_Return (Err = False) // We are done!
        End
    
        // *** Line-by-line functions: ***
        Else If (RefactorSettings.iSelectedLineByLineFunctions) Begin

            For iLine from 0 to iSize
                Send UpdateStatusBar ("Refactoring line:" * String(iLine) * "of:" * String(iSize + 1)) True
                Set Action_Text of ghoStatusPanel  to ("Refactoring line:" * String(iLine) * "of:" * String(iSize + 1))
    
                // Read a line from the source file's string array.
                // This is the same string that potentially gets changed by several
                // refactoring functions, as the value will be passed as ByRef.
                Move asSourceFile[iLine] to sLine
                Send InitializeTokenizer of ghoRefactorFunctionLibrary sLine
                
                // If at least one of these functions sets bWriteLine to false,
                // the read source line will _not_ be written back to disk.
                Move True to bWriteLine
                
                // eRemove_Function   
                If (RefactorSettings.iSelectedRemoveFunctions > 0) Begin
                    Constraint_Set (Self) Clear
                    Constrained_Clear eq FunctionsA by Index.4  
                    Constrain FunctionsA.Selected eq True
                    Constrain FunctionsA.Type eq eRemove_Function
                    Constrained_Find First FunctionsA by Index.4
                    While (Found = True)    
                        Move (Trim(FunctionsA.Parameter)) to sParameter
                        Move (Trim(FunctionsA.Function_Name)) to sFunctionName
                        Move (Eval("get_" - (sFunctionName))) to iFunctionID
                        Get iFunctionID of ghoRefactorFunctionLibrary (&sLine) sParameter to bChanged
                        If (bChanged = True) Begin
                            Move False to bWriteLine     
                            Reread FunctionsA
                                Add 1 to FunctionsA.Count
                                SaveRecord FunctionsA
                                Move True to bChangesMade
                            Unlock
                        End
                        Constrained_Find Next            
                    Loop
                End
    
                If (bWriteLine = True) Begin
    
                    // eStandard_Function   
                    If (RefactorSettings.iSelectedStandardFunctions > 0) Begin
                        Constraint_Set (Self + 1) Clear
                        Constrained_Clear eq FunctionsA by Index.4  
                        Constrain FunctionsA.Selected eq True
                        Constrain FunctionsA.Type eq eStandard_Function        
                        Constrained_Find First FunctionsA by Index.4
                        While (Found = True)    
                            Move (Trim(FunctionsA.Parameter)) to sParameter
                            Move (Trim(FunctionsA.Function_Name)) to sFunctionName
                            Move (Eval("get_" - (sFunctionName))) to iFunctionID
                            Get iFunctionID of ghoRefactorFunctionLibrary (&sLine) sParameter to bChanged
                            If (bChanged = True) Begin
                                Reread FunctionsA
                                    Add 1 to FunctionsA.Count
                                    SaveRecord FunctionsA
                                    Move True to bChangesMade
                                Unlock
                            End
                            Constrained_Find Next            
                        Loop
                        
                        // NOTE: Here the changed line is "saved" back to the array.
                        If (bWriteLine = True) Begin
                            Move sLine to asSourceFile[iLine]
                        End
                    End
                End
            
            Loop
        End                        
        
        // *** Other Functions - One source file as a string array is passed ***  
        If (RefactorSettings.iSelectedOtherFunctions <> 0) Begin
            Constraint_Set (Self + 2) Clear  
            Constrained_Clear eq FunctionsA by Index.4
            Constrain FunctionsA.Selected eq True
            Constrain FunctionsA.Type eq eOther_Function
            Constrained_Find First FunctionsA by Index.4
            While (Found = True)    
                Move (Trim(FunctionsA.Parameter)) to sParameter
                Move (Trim(FunctionsA.Function_Name)) to sFunctionName 
                Move (Eval("get_" - (sFunctionName))) to iFunctionID
                // Data send as ByRef to have a consistent calling convention for all refactoring functions:
                Get iFunctionID of ghoRefactorFunctionLibrary (&asSourceFile) sParameter to iRetval
                If (iRetval <> 0) Begin
                    Reread FunctionsA
                        Add iRetval to FunctionsA.Count
                        SaveRecord FunctionsA
                        Move True to bChangesMade
                    Unlock
                End
                Constrained_Find Next
            Loop
        End
        // Note: eOther_FunctionAll function types are called from the OnProcess event, after "ApplyRefactorFunctions" has been called.
        
        // *** Editor Functions ***
        If (RefactorSettings.iSelectedEditorFunctions <> 0) Begin
            // This will load the file in the editor and display the file in the toolbar.
            Send UpdateSourceFileNameDisplay of ghoApplication sSourceFile
            // Change source file in editor.
            Get RefactorSourceFileInEditor of hoEditor (&asSourceFile) to bChanged
        End
        
        // *** Report Functions - One source file ***      (Makes _no_ source code changes) 
        If (RefactorSettings.iSelectedReportFunctions > 0) Begin            
            Constraint_Set (Self + 4) Clear  
            Constrained_Clear eq FunctionsA by Index.4
            Constrain FunctionsA.Selected eq True
            Constrain FunctionsA.Type eq eReport_Function
            Constrained_Find First FunctionsA by Index.4
            While (Found = True)    
                Move (Trim(FunctionsA.Parameter)) to sParameter
                Move (Trim(FunctionsA.Function_Name)) to sFunctionName 
                Move (Eval("get_" - (sFunctionName))) to iFunctionID
                // Data send as ByRef to have a consistent calling convention for all refactoring functions:
                Get iFunctionID of ghoRefactorFunctionLibrary (&asSourceFile) sParameter to iRetval
                If (iRetval <> 0) Begin
                    Reread FunctionsA
                        Add iRetval to FunctionsA.Count
                        SaveRecord FunctionsA
                        Move True to bChangesMade
                    Unlock
                End
                Constrained_Find Next
            Loop
        End
        
        // If source code changes was made, we should save them to the source file.
        Move (IsSameArray(asSourceFile, asOrgSourceFile)) to bIsSame
        If (bIsSame = False) Begin
            Get WriteArrayToSourceFile sSourceFile asSourceFile to bWriteOK
            If (bWriteOK = False) Begin
                Function_Return False
            End
            Send WaitForFileToGetWritten sSourceFile
        End

        Function_Return (Err = False)
    End_Function

    Procedure Update_Status String sProgress
        String  sPath
        Boolean bWorkspaceMode

        Get pbWorkspaceMode of ghoApplication to bWorkspaceMode
        If (bWorkspaceMode = True) Begin
            Get psHomePath of ghoApplication to sPath
            If (sPath <> "") Begin
                // Strip out the path, so we can see the filename without it being cut off.
                Move (Replace(sPath, sProgress, "..")) to sProgress
            End
        End
        Forward Send Update_Status sProgress
    End_Procedure

    Procedure IncrementFileCount Boolean bChangesMade
        Reread SysFile
            Add 1 to SysFile.iCountNumberOfFiles
            If (bChangesMade = True) Begin
                Add 1 to SysFile.iCountNumberOfChangedFiles                
            End
            SaveRecord SysFile
        Unlock
    End_Procedure

    Procedure OnError Integer ErrNum Integer iErrLine String ErrMsg
        Send Log_Status of ghoStatusLog ("iErrNum =" * String(ErrNum) * "iErrLine =" * String(iErrLine) * "ErrMsg =" * String(ErrMsg))
    End_Procedure
    
End_Object
