// This class is automatically instantiated by the cRefactorApplication class. See: End_Construct_Object
//
Use BatchDD.pkg            
Use WsGlobalFunctions.pkg
Use RefactorStatusPanel.pkg

// Needs to be before any usage of other cRefactor classes
#IFNDEF ghoRefactorEngine
    Global_Variable Handle ghoRefactorEngine
    Move 0 to ghoRefactorEngine
#ENDIF

Use cSciLexer.h
Use cRefactorStatusLog.pkg
Use cRefactorFuncLib.pkg
Use cFunctionsDataDictionary.dd

Declare_Datafile SysFile
Declare_Datafile Functions
Declare_Datafile FunctionsA

Register_Function phoEditorView Returns Handle
Register_Function phoRefactorView Returns Handle
Register_Object oEngineErrorLog_dg

{ClassLibrary = Windows}
Class cRefactorEngine is a BusinessProcess
    
    Procedure Construct_Object
        tRefactorSettings RefactorSettings

        Forward Send Construct_Object
        Move Self to ghoRefactorEngine  
        
        Set Allow_Cancel_State to True 
        Set Status_Panel_State to True
        Set Status_Log_State to True
        Set Display_Error_State to False
        
        Property Handle phoDD
        Property Handle phoEditor          
        Property Handle StatusBar_Id
        Property String psCurrentSourceFileName   
        Property String psTotalTime
        Property tRefactorSettings pRefactorSettings
        
        Property String psLineBreak CS_CRLF
        Property Boolean pbLastLineBreak

        Get Create (RefClass(cRefactorStatusLog)) to ghoStatusLog
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object
        // Override of weird setting in the BatchDD class.
        Set Status_Panel_Id to ghoStatusPanel
    End_Procedure

    // Collect all settings to one common struct to be passed amongst the main operating procedures.
    Function CollectSettings tRefactorFiles RefactorFiles Returns tRefactorSettings
        tRefactorSettings RefactorSettings     
        
        Move RefactorFiles                       to RefactorSettings.FileData
        Set psCurrentSourceFileName              to RefactorSettings.FileData.asFullFileNames[0] 
        Move SysFile.FileExtensionFilter         to RefactorSettings.sFileFilter
        Move SysFile.SelectedFunctionTotal       to RefactorSettings.iSelectedFunctionTotal
        Move SysFile.SelectedeStandardFunction   to RefactorSettings.iSelectedStandardFunctions
        Move SysFile.SelectedeEditorFunction     to RefactorSettings.iSelectedEditorFunctions
        Move SysFile.SelectedeReportFunction     to RefactorSettings.iSelectedReportFunctions
        Move SysFile.SelectedeReportAllFunction  to RefactorSettings.iSelectedReportAllFunctions
        Move SysFile.SelectedeRemoveFunction     to RefactorSettings.iSelectedRemoveFunctions
        Move SysFile.SelectedeOtherFunction      to RefactorSettings.iSelectedOtherFunctions
        Move SysFile.SelectedeOtherAllFunction   to RefactorSettings.iSelectedOtherAllFunctions
        
        // All functions that work on a line-by-line basis.
        Move (SysFile.SelectedeStandardFunction + SysFile.SelectedeRemoveFunction) ;
            to RefactorSettings.iSelectedLineByLineFunctions
        
        // All functions that are feed with a full source file as a string array:
        Move (SysFile.SelectedeEditorFunction + SysFile.SelectedeReportFunction + SysFile.SelectedeOtherFunction) ;
            to RefactorSettings.iSelectedFullFileFunctions

        // All functions that are feed with a string array with all selected files (including path):
        Move (SysFile.SelectedeReportAllFunction + SysFile.SelectedeOtherAllFunction) ;
            to RefactorSettings.iSelectedAllFilesFunctions

              
        Move SysFile.bCountSourceLines          to RefactorSettings.bCountSourceLines
        Move SysFile.bReadOnly                  to RefactorSettings.bReadOnly
        Get pbWorkspaceMode of ghoApplication   to RefactorSettings.bWorkspaceMode

        Get ReadInteger of ghoApplication CS_Settings CS_ShowQuestion True to RefactorSettings.bShowStartQuestion
        Get ReadInteger of ghoApplication CS_Settings CS_ShowSummary  True to RefactorSettings.bShowSummary

        Set pRefactorSettings                       to RefactorSettings
        Set pRefactorSettings of ghoRefactorFuncLib to RefactorSettings
        Function_Return RefactorSettings
    End_Function

    // Initializes the refactoring engine and make validations of the setup.
    Function InitializeEngine tRefactorFiles RefactorFiles Returns Boolean
        Boolean bOK bExists
        String sFolderName             
        tRefactorSettings RefactorSettings 

        // bWorkspaceMode = "All files in selected folders", else only a single file will be processed.
        Send _InitializeFuncLib of ghoRefactorFuncLib
        Send ResetFunctionsCounters of (phoDD(Self))

        // The CollectSettings message also sets the class property pRefactorSettings
        Get CollectSettings RefactorFiles to RefactorSettings
        Get IsValidActions RefactorSettings to bOk
        If (bOk = False) Begin
            Function_Return False
        End    
        
        Set psTotalTime to ""
        // This is the base back-up folder. Subfolders will be created automatically
        // when needed.
        Get IsBackupFolder of ghoApplication to bExists
        If (bExists = False) Begin
            Get CreateBackupFolder of ghoApplication "" to sFolderName
        End    
        Get IsBackupFolder of ghoApplication to bExists
        If (bExists = False) Begin
            Send Info_Box ("Backup folder could not be created! Cannot continue:" * String(sFolderName + CS_BackupFolder))
            Function_Return False
        End
        Function_Return True
    End_Function
    
    // * Dummy message for the Studio's Code Explorer *
    Procedure MAIN_INTERFACE_MESSAGE
    End_Procedure  
    //
    // Parameters: A struct array with all source code folders & files.
    //             a handle to a Scintilla editor object (for eEditorFunction type functions)
    //             a boolean that indicates the mode (All files (WorkspaceMode = True), else Single file)
    Procedure StartEngine tRefactorFiles RefactorFiles Handle hoEditor 
        Boolean bOK 
        Integer eResponse                                                         
        Handle hoView hoStatusBarID
        tRefactorSettings RefactorSettings 
        Handle hoDD
        
        Get Create (RefClass(cFunctionsDataDictionary)) to hoDD
        Set phoDD to hoDD
        // A little bit silly but it is how the error logging system works:
        Move "StartEngine" to FunctionsA.Function_Name   
        Get StatusBar_Id of (phoMainPanel(ghoApplication)) to hoStatusBarID
        Set StatusBar_Id  to hoStatusBarID
        Set phoEditor  to hoEditor
        
        // Initializes the engine and makes validations.
        Get InitializeEngine RefactorFiles to bOK
        If (bOK = False) Begin
            Send Destroy of (phoDD(Self))
            Procedure_Return
        End

        Get pRefactorSettings to RefactorSettings
        Get StartWarning RefactorSettings (psCurrentSourceFileName(Self)) to eResponse
        If (eResponse <> MBR_Yes) Begin
            Send Destroy of (phoDD(Self))
            Procedure_Return
        End
        
        // This will call the RunRefactoringEngine message:
        Send DoProcess
    End_Procedure
    
    // Do *not* call this message! Instead call StartEngine. 
    //
    // This is called by OnProcess.
    {Visibility = Private}
    Procedure RunRefactoringEngine
        tRefactorSettings RefactorSettings  
        String sText
        Handle hoEditor
        DateTime dtExecStart
        Integer eResponse 
        Boolean bHasChangedExternal
    
        // A bit silly but it is how our error logging system works:
        Move "RunRefactoringEngine" to FunctionsA.Function_Name
        Move False to Err
        Move 0 to LastErr     
        
        Get phoEditor to hoEditor
        Move (CurrentDateTime()) to dtExecStart
        Get pRefactorSettings to RefactorSettings   
        
        Get GetTheWorkDone RefactorSettings hoEditor to eResponse
        
        // A bit silly but it is how our error logging system works:
        Move "RunRefactoringEngine" to FunctionsA.Function_Name
        // And we're done. Clean up and show summary.  
        Get SummaryText eResponse RefactorSettings dtExecStart hoEditor to sText
        Send Stop_StatusPanel of ghoStatusPanel
        Send Destroy of (phoDD(Self))
        
        If (eResponse = eEngineOK) Begin
            If (RefactorSettings.bShowSummary = True or RefactorSettings.bCountSourceLines = True) Begin
                Send ShowLogFile of ghoApplication
            End
        End 
        Else Begin
            Send Info_Box sText (psProduct(ghoApplication))
            If (eResponse = eEngineError) Begin
                Send Popup of (oEngineErrorLog_dg(Client_Id(phoMainPanel(ghoApplication))))
            End
        End
    End_Procedure 
    
    // This is were the actual refactoring takes place (in a business process).
    Function GetTheWorkDone tRefactorSettings RefactorSettings Handle hoEditor Returns Integer
        String[] asFiles asFilesOrg asCode asCodeOrg 
        Boolean bOK bEditorFunctions bExists bWriteLine bChanged bIsStudioGenerated bStop bHasChangedExternal
        String sFileName sPath sText sFolderName sFileShort sLine sMessage
        Integer eResponse iRetval iErrors iFile iSize iFolders 
        Handle hoView hoStatusBarID
        
        Move 0 to iRetval  
        Set piPosition  of ghoProgressBarOverall to 0
        Set piAdvanceBy of ghoProgressBarOverall to 1
        Set piMaximum   of ghoProgressBarOverall to (SizeOfArray(RefactorSettings.FileData.asFullFileNames))
        If (RefactorSettings.bCountSourceLines = True) Begin
            Set Visible_State of ghoProgressBar to False
        End

        If (RefactorSettings.bCountSourceLines or RefactorSettings.iSelectedLineByLineFunctions or RefactorSettings.iSelectedFullFileFunctions) Begin
            Move (SizeOfArray(RefactorSettings.FileData.asFolders)) to iFolders
            Move RefactorSettings.FileData.asFullFileNames  to asFiles
            Move asFiles to asFilesOrg
            Move (SizeOfArray(asFiles)) to iSize
            Decrement iSize 
            Move False to bOK
            Move False to bStop
                
            // Loop through all selected files:
            For iFile from 0 to iSize
                Move asFiles[iFile] to sFileName
                If (sFileName = "") Begin
                    Error DFErr_Program "Filen name in array is blank, cannot continue. (GetTheWorkDone)" 
                    If (RefactorSettings.bCountSourceLines = True) Begin
                        Set Visible_State of ghoProgressBar to True
                    End
                    Function_Return eEngineSelError
                End
                Send DoAdvance of ghoProgressBarOverall
                Get ParseFolderName sFileName to sFolderName
                Get ParseFileName   sFileName to sFileShort
                Get ReadFileToStringArray sFileName to asCode 
                Move asCode to asCodeOrg
                Set piPosition  of ghoProgressBar to 0
                Set piAdvanceBy of ghoProgressBar to 1
                Set piMaximum   of ghoProgressBar to (SizeOfArray(asCodeOrg))
                Send ClearFuncLibProperties of ghoRefactorFuncLib
                
                If (RefactorSettings.bCountSourceLines = False) Begin
                    Move ("Refactoring File No:" * String(iFile + 1) * "of:" * String(iSize + 1)) to sMessage
                End
                Else Begin
                    Move "Counting source lines" to sMessage    
                End
                Set Caption_text of ghoStatusPanel to sMessage
                Set Title_Text of ghoStatusPanel to ("Folder:" * String(sFolderName))
                
                // We do _not_ refactor files generated by the Studio for COM components (.ocx files et al)
                Get _IsDataFlexCOMProxyClassesFile of ghoRefactorFuncLib sFileName to bIsStudioGenerated
                If (bIsStudioGenerated = False) Begin
                    Set TableName_Text of ghoStatusPanel to ("File:" * String(sFileShort))

                    // *** Count source lines: (Only) ***
                    If (RefactorSettings.bCountSourceLines = True) Begin
                        Get CountSourceLines sFileName to bOK
                    End
                    
                    Else Begin  
                        If (RefactorSettings.bReadOnly = False) Begin
                            Get SaveBackupFile of ghoApplication sFileName to bOK
                            If (bOK = False) Begin
                                Error DFErr_Program ("The file could not be copied to the backup area and no attempt was made to change it.\n" * String(sFileName))
                                Function_Return eEngineBackupErr
                            End
                        End

                        // *** Line-by-line functions: ***
                        If (RefactorSettings.iSelectedLineByLineFunctions) Begin
                            Get LineByLineFunctions (&asCode) RefactorSettings to bChanged
                            If (bChanged = True) Begin
                                Get WriteStringArrayToFile asCode sFileName to bOK
                            End
                        End
        
                        // *** Editor Functions ***
                        If (RefactorSettings.iSelectedEditorFunctions <> 0) Begin
                            // This will display the file in the toolbar.
                            Get eEditorFunctions sFileName (&asCode) RefactorSettings to bChanged 
                        End     
                        
                        If (RefactorSettings.iSelectedFullFileFunctions) Begin
                            // *** Type: eOtherFunction ***
                            //           One file as a string array is passed.
                            If (RefactorSettings.iSelectedOtherFunctions <> 0) Begin
                                Get eOtherFunctions sFileName (&asCode) RefactorSettings to bOK
                            End
                
                            // *** Type: eReportFunction ***
                            //           One file as a string array is passed. Makes no code changes!
                            If (RefactorSettings.iSelectedReportFunctions > 0) Begin
                                Get eReportFunctions (&asCode) RefactorSettings to bOK
                            End
                        End
                        Send IncrementFileCount bOK
                    End
                End

                // We only check for "Cancel" once per file.
                Get Cancel_Check to bStop
                If (bStop = True) Begin
                    If (RefactorSettings.bCountSourceLines = True) Begin
                        Set Visible_State of ghoProgressBar to True
                    End
                    Function_Return eEngineUserCancel
                End

                If (RefactorSettings.bReadOnly = False and (IsSameArray(asCode, asCodeOrg) = False))  Begin
                    Get WriteStringArrayToFile asCode sFileName to bOK
                    If (RefactorSettings.bWorkspaceMode = False and RefactorSettings.iSelectedEditorFunctions = 0) Begin
                        Send LoadFile of hoEditor sFileName
                    End
                End
            Loop
        End  
        
        // *** Type: eOtherFunctionsAll ***
        //      All source files with full pathing is passed as a string array. 
        //      Note: These functions are responsible for writing changes made to disk.
        If (RefactorSettings.iSelectedOtherAllFunctions > 0) Begin                
            Get eOtherFunctionsAll (&asFiles) RefactorSettings to bOK
            If (RefactorSettings.bReadOnly = True) Begin
                Move asFilesOrg to asFiles
            End
        End
        
        // *** Type: eReportFunctionAll ***
        //      All source files with full pathing is passed as a string array.
        //      Makes no code changes!
        If (RefactorSettings.iSelectedReportAllFunctions > 0) Begin                
            Get eReportFunctionsAll (&asFiles) RefactorSettings to bOK
            If (RefactorSettings.bReadOnly = True) Begin
                Move asFilesOrg to asFiles
            End
        End
        
        Get IsFileTimeNewer of hoEditor sFileName to bHasChangedExternal
        If (bHasChangedExternal = True and RefactorSettings.bWorkspaceMode = False and RefactorSettings.iSelectedEditorFunctions = 0) Begin
            Send LoadFile of hoEditor sFileName
        End

        // A bit silly but it is how our error logging system works:
        Move "RunRefactoringEngine" to FunctionsA.Function_Name

        Get Error_Count to iErrors
        If (Err = True or iErrors <> 0) Begin
            Move eEngineError to iRetval
        End
        Else Begin
            Move eEngineOK to iRetval
        End
             
        If (RefactorSettings.bCountSourceLines = True) Begin
            Set Visible_State of ghoProgressBar to True
        End
        Function_Return iRetval
    End_Function

    Function LineByLineFunctions String[] ByRef asCode tRefactorSettings RefactorSettings Returns Boolean
        Integer iLine iSize iItem
        Boolean bOK bChange bWriteLine  
        String sLine  
        String[] asCodeNew asCodeOrg  
        
        Move asCode to asCodeOrg
        Send ClearFuncLibProperties of ghoRefactorFuncLib
        Get pRefactorSettings to RefactorSettings
        Move (SizeOfArray(asCode)) to iSize
        Decrement iSize          
        Move 0 to iItem  
        Move False to bChange
               
        For iLine from 0 to iSize
            Send DoAdvance of ghoProgressBar
            Send UpdateStatusBar ("Refactoring line:" * String(iLine) * "of:" * String(iSize + 1)) True
            Set Action_Text of ghoStatusPanel  to ("Refactoring line:" * String(iLine) * "of:" * String(iSize + 1))

            // Read a line from the source file's string array.
            // This is the same string that potentially gets changed by several
            // refactoring functions, as the value will be passed as ByRef.
            Move asCode[iLine] to sLine
            Send InitializeTokenizer of ghoRefactorFuncLib sLine
            
            // *** eRemoveFunctions ***
            // If at least one of these functions sets bWriteLine to false,
            // the read source line will _not_ be written back to disk.
            Move True to bWriteLine
            If (RefactorSettings.iSelectedRemoveFunctions > 0) Begin
                Get eRemoveFunctions (&sLine) RefactorSettings (&bWriteLine) to bOK
                If (bChange = False and bOK = True) Begin
                    Move True to bChange
                End
            End
            
            // *** eStandardFunctions ***
            If (RefactorSettings.iSelectedStandardFunctions > 0 and bWriteLine = True) Begin
                Get eStandardFunctions (&sLine) RefactorSettings to bOK
                If (bChange = False and bOK = True) Begin
                    Move True to bChange
                End
            End
            If (bWriteLine = True) Begin
                Move sLine to asCodeNew[iItem]
                Increment iItem
            End
        Loop
        
        If (RefactorSettings.bReadOnly = True) Begin
            Move asCodeOrg to asCode
        End
        Else Begin
            Move asCodeNew to asCode
        End
        Function_Return bChange
    End_Function

    // * Dummy message for the Studio's Code Explorer *
    Procedure CALLS_TO_VARIOUS_FUNCTION_TYPES
    End_Procedure  
    //
    //    
    // *** Type: eRemoveFunction ***
    //           Line-by-line functions
    Function eRemoveFunctions String ByRef sLine tRefactorSettings RefactorSettings Boolean ByRef bWriteLine Returns Boolean
        Boolean bChanged bChangesMade
        String sFunctionName sParameter
        Integer iFunctionID
        
        Move False to bChangesMade
        Constraint_Set (Self + eRemoveFunction) Clear
        Constrained_Clear eq FunctionsA by Index.4
        Constrain FunctionsA.Type eq eRemoveFunction
        Constrain FunctionsA.Selected eq True
        Constrain FunctionsA.bPublished eq True
        Constrained_Find First FunctionsA by Index.4
        While (Found = True)    
            Move (Trim(FunctionsA.Parameter)) to sParameter
            Move (Trim(FunctionsA.Function_Name)) to sFunctionName
            Move (Eval("get_" - (sFunctionName))) to iFunctionID
            Get iFunctionID of ghoRefactorFuncLib (&sLine) sParameter to bChanged
            If (bChanged = True) Begin
                Move False to bWriteLine     
                Reread FunctionsA
                    Add 1 to FunctionsA.Counter
                    SaveRecord FunctionsA
                    Move True to bChangesMade
                Unlock
            End
            Constrained_Find Next            
        Loop
    
        Function_Return bChangesMade
    End_Function              
    
    // *** Type: eStandardFunction ***
    //           Line-by-line functions
    Function eStandardFunctions String ByRef sLine tRefactorSettings RefactorSettings Returns Boolean
        Boolean bChanged bChangesMade
        String sFunctionName sParameter
        Integer iFunctionID
        
        Move False to bChangesMade
        Constraint_Set (Self + eStandardFunction) Clear
        Constrained_Clear eq FunctionsA by Index.4
        Constrain FunctionsA.Type eq eStandardFunction        
        Constrain FunctionsA.Selected eq True
        Constrain FunctionsA.bPublished eq True
        Constrained_Find First FunctionsA by Index.4
        While (Found = True)    
            Move (Trim(FunctionsA.Parameter))     to sParameter
            Move (Trim(FunctionsA.Function_Name)) to sFunctionName
            Move (Eval("get_" - (sFunctionName))) to iFunctionID
            Get iFunctionID of ghoRefactorFuncLib (&sLine) sParameter to bChanged
            If (bChanged = True) Begin
                Reread FunctionsA
                    Add 1 to FunctionsA.Counter
                    SaveRecord FunctionsA
                    Move True to bChangesMade
                Unlock
            End
            Constrained_Find Next            
        Loop
        
        Function_Return bChangesMade
    End_Function
    
    // *** eEditorFunctions ***
    //     One file as a string array is passed.
    Function eEditorFunctions String sFileName String[] ByRef asCode tRefactorSettings RefactorSettings Returns Boolean
        Handle hoEditor
        Integer iFunctionID
        Boolean bChanged bOK
        String sFunctionName sParameter 
        String[] asCodeOrg 
        
        Move asCode to asCodeOrg
        Move False to bChanged   
        Get phoEditor of ghoApplication to hoEditor
        Send ClearFuncLibProperties of ghoRefactorFuncLib
        Send SaveErrorState of ghoRefactorFuncLib
        
        // This will display the file name in the toolbar.
        Send UpdateStatusBar "Editor Refactoring Functions..." False  
        Get WriteDataToEditor of hoEditor asCode to bOK
        If (bOK = False) Begin
            Error "Could not write asCode string array correctly to editor object."
            Function_Return False
        End
        Send Activate of hoEditor

        Constraint_Set (Self + eEditorFunction) Clear
        Constrained_Clear eq FunctionsA by Index.4
        Constrain FunctionsA.Type eq eEditorFunction
        Constrain FunctionsA.Selected eq True
        Constrain FunctionsA.bPublished eq True
        Constrained_Find First FunctionsA by Index.4        
        While (Found = True)
            Move (Trim(FunctionsA.Parameter)) to sParameter
            Move (Lowercase(Trim(FunctionsA.Function_Name))) to sFunctionName 
            Move (Eval("get_" - (sFunctionName))) to iFunctionID             
            Set Message_Text of ghoStatusPanel to ("Function:" * String(sFunctionName))
            Get iFunctionID of ghoRefactorFuncLib asCode sParameter to bOK
            If (bOK = True) Begin
                Reread FunctionsA
                    Add 1 to FunctionsA.Counter
                    SaveRecord FunctionsA
                Unlock
                Move True to bChanged
            End
            Constrained_Find Next
        Loop
            
        If (RefactorSettings.bReadOnly = True) Begin
            Move asCodeOrg to asCode
        End
        Else If (bChanged = True) Begin  
            // Not sure why, but it is needed to save & re-load the file. Else the UTF8
            // settings in the editor is wrong for BOM files. 
            Send SaveFile of hoEditor
            Send LoadFile of hoEditor sFileName
            // To not get an "Editor change" data loss message when exiting program.
            Set Changed_State of hoEditor to False
            Get EditorDataAsStringArray of hoEditor to asCode
        End
        Send RestoreErrorState of ghoRefactorFuncLib

        Function_Return bChanged
    End_Function  
    
    // *** Type: eOtherFunction ***
    //           One file as a string array is passed.  
    //           These function should return the changes in the ByRef asCode string array.
    Function eOtherFunctions String sFileName String[] ByRef asCode tRefactorSettings RefactorSettings Returns Boolean
        Boolean bChanged bOK
        String sParameter sFunctionName
        Integer iFunctionID iRetval
        String[] asCodeOrg
        
        Move False to bChanged
        Move asCode to asCodeOrg
        
        Constraint_Set (Self + eOtherFunction) Clear
        Constrained_Clear eq FunctionsA by Index.4
        Constrain FunctionsA.Type eq eOtherFunction
        Constrain FunctionsA.Selected eq True
        Constrain FunctionsA.bPublished eq True
        Constrained_Find First FunctionsA by Index.4
        While (Found = True)    
            Send ClearFuncLibProperties of ghoRefactorFuncLib
            Move (Trim(FunctionsA.Parameter)) to sParameter
            Move (Trim(FunctionsA.Function_Name)) to sFunctionName 
            Set Message_Text of ghoStatusPanel to ("Function:" * String(sFunctionName))
            Move (Eval("get_" - (sFunctionName))) to iFunctionID
            Get iFunctionID of ghoRefactorFuncLib (&asCode) sParameter to iRetval
            If (iRetval <> 0) Begin
                Reread FunctionsA
                    Add iRetval to FunctionsA.Counter
                    SaveRecord FunctionsA
                    Move True to bChanged
                Unlock
            End
            Constrained_Find Next
        Loop

        If (RefactorSettings.bReadOnly = True) Begin
            Move asCodeOrg to asCode
        End
        Function_Return bChanged
    End_Function

    // *** Type: eReportFunction ***
    //           One file as a string array is passed.
    //           Makes no source code changes!
    Function eReportFunctions String sFileName String[] ByRef asCode tRefactorSettings RefactorSettings Returns Boolean
        Boolean bFound
        String sParameter sFunctionName
        Integer iFunctionID iRetval

        Move False to bFound            

        Constraint_Set (Self + eReportFunction) Clear
        Constrained_Clear eq FunctionsA by Index.4
        Constrain FunctionsA.Type eq eReportFunction
        Constrain FunctionsA.Selected eq True
        Constrain FunctionsA.bPublished eq True
        Constrained_Find First FunctionsA by Index.4
        While (Found = True)    
            Send ClearFuncLibProperties of ghoRefactorFuncLib
            Move (Trim(FunctionsA.Parameter)) to sParameter
            Move (Trim(FunctionsA.Function_Name)) to sFunctionName 
            Set Message_Text of ghoStatusPanel to ("Function:" * String(sFunctionName))
            Move (Eval("get_" - (sFunctionName))) to iFunctionID
            // Data send as ByRef to have a consistent calling convention for all refactoring functions:
            Get iFunctionID of ghoRefactorFuncLib (&asCode) sParameter to iRetval
            If (iRetval <> 0) Begin
                Reread FunctionsA
                    Add iRetval to FunctionsA.Counter
                    SaveRecord FunctionsA
                    Move True to bFound
                Unlock
            End
            Constrained_Find Next
        Loop

        Function_Return bFound
    End_Function
    
    // *** Type: eOtherFunctionAll ***
    //      All source files with full pathing is passed as a string array.
    //      These functions are responisble for writing changes to disk.
    //      Note: These must be called _after_ files has been changed by the Scintilla editor (if selected). 
    Function eOtherFunctionsAll String[] ByRef asFiles tRefactorSettings RefactorSettings Returns Boolean
        Boolean bOK bStop
        String sParameter sFunctionName
        Integer iFunctionID iRetval
        
        Move True to bOK

        Constraint_Set (Self + eOtherFunctionAll) Clear
        Constrained_Clear eq FunctionsA by Index.4
        Constrain FunctionsA.Type eq eOtherFunctionAll
        Constrain FunctionsA.Selected eq True
        Constrain FunctionsA.bPublished eq True
        Constrained_Find First FunctionsA by Index.4
        While (Found)
            Send ClearFuncLibProperties of ghoRefactorFuncLib
            Move (Trim(FunctionsA.Parameter)) to sParameter
            Move (Trim(FunctionsA.Function_Name)) to sFunctionName 
            Set Message_Text of ghoStatusPanel to ("Function:" * String(sFunctionName))
            Move (Eval("get_" - (sFunctionName))) to iFunctionID
            Get iFunctionID of ghoRefactorFuncLib (&RefactorSettings.FileData.asFullFileNames) sParameter to iRetval
            If (iRetval <> 0) Begin
                Reread FunctionsA
                    Add iRetval to FunctionsA.Counter
                    SaveRecord FunctionsA
                Unlock
            End

            // We only check for "Cancel" once every new file.
            Get Cancel_Check to bStop
            If (bStop = True) Begin
                Function_Return eEngineUserCancel
            End
            Constrained_Find Next
        Loop

        Function_Return bOK
    End_Function

    // ***Type: eReportFunctionAll ***
    //          All source files with full pathing is passed as a string array.
    //          Makes no changes
    Function eReportFunctionsAll String[] ByRef asFiles tRefactorSettings RefactorSettings Returns Boolean
        Boolean bOK bStop
        String sParameter sFunctionName
        Integer iFunctionID iRetval
        
        Move True to bOK
        Constraint_Set (Self + eReportFunctionAll) Clear
        Constrained_Clear eq FunctionsA by Index.4
        Constrain FunctionsA.Type eq eReportFunctionAll
        Constrain FunctionsA.Selected eq True
        Constrain FunctionsA.bPublished eq True
        Constrained_Find First FunctionsA by Index.4
        While (Found)
            Send ClearFuncLibProperties of ghoRefactorFuncLib
            Move (Trim(FunctionsA.Parameter)) to sParameter
            Move (Trim(FunctionsA.Function_Name)) to sFunctionName 
            Set Message_Text of ghoStatusPanel to ("Function:" * String(sFunctionName))
            Move (Eval("get_" - (sFunctionName))) to iFunctionID
            Get iFunctionID of ghoRefactorFuncLib (&RefactorSettings.FileData.asFullFileNames) sParameter to iRetval
            If (iRetval <> 0) Begin
                Reread FunctionsA
                    Add iRetval to FunctionsA.Counter
                    SaveRecord FunctionsA
                Unlock
            End

            // We only check for "Cancel" once every new file.
            Get Cancel_Check to bStop
            If (bStop = True) Begin
                Function_Return eEngineUserCancel
            End
            Constrained_Find Next
        Loop

        Function_Return bOK
    End_Function        
        
    // *** Count source lines: (Only) ***
    Function CountSourceLines String sSourceFile Returns Boolean
        Integer iLines         
        Boolean bOK
        Send SaveErrorState of ghoRefactorFuncLib
        Get _CountNumberOfLines of ghoRefactorFuncLib sSourceFile to iLines
        Reread SysFile
            Add 1 to SysFile.iCountNumberOfFiles
            Add iLines to SysFile.iCountNumberOfLines
            SaveRecord SysFile
        Unlock          
        Move (Err = False) to bOK
        Send RestoreErrorState of ghoRefactorFuncLib
        Function_Return bOK
    End_Function

    // * Dummy function for the Studio's Code Explorer *
    Procedure VALIDATIONS
    End_Procedure  
    //
    // At least one action should have been selected, unless we're counting source lines.
    // Also checks that spinform values are correct.
    Function IsValidActions tRefactorSettings RefactorSettings Returns Boolean
        Boolean bOK bFileExists                
        Handle hoDD
        Integer iTabSize iTotSelectedFunctions iMaxLines iMinLines iRetval
        String  sFileName sFileFilter
        
        If (RefactorSettings.bCountSourceLines = True) Begin
            Function_Return True
        End
        
        Get phoDD to hoDD
        Get TotSelectedFunctions of hoDD to iTotSelectedFunctions
        Move (iTotSelectedFunctions > 0) to bOK
        If (bOK = False) Begin
            Send Info_Box "You should at least check ONE action/function for the process to run."
            Function_Return False
        End

        If (RefactorSettings.bWorkspaceMode = True) Begin
            Move RefactorSettings.sFileFilter to sFileFilter
            If (not(sFileFilter contains "." and (not(sFileFilter contains "*") or not(sFileFilter contains "?")))) Begin
                Send Info_Box "You need to select at least one file name extenstion. Please adjust and try again."
                Move False to bOK
            End
        End
        Else If (SysFile.bCountSourceLines = False) Begin
            Get psCurrentSourceFileName of ghoApplication to sFileName
            If (ghoFileSystem <> 0) Begin
                Get FileExists of ghoFileSystem sFileName DIRMODE_FILES_ONLY to bFileExists
                If (bFileExists = False) Begin
                    Send Info_Box "The specified source file couldn't be found." "Process Halted"
                    Move False to bOK
                End
            End
        End

        Function_Return bOK
    End_Function

    // * Dummy message for the Studio's Code Explorer *
    Procedure SUMMARIES
    End_Procedure
    //
    Function SummaryText Integer eResponse tRefactorSettings RefactorSettings DateTime dtExecStart Handle hoEditor Returns String
        Integer iErrors
        DateTime dtExecEnd
        TimeSpan tsTotalTime
        String sTotalTime sText
        String[] asOtherLogFiles
        
        // A bit silly but it is how our error logging system works:
        Move "SummaryText" to FunctionsA.Function_Name

        Move (CurrentDateTime()) to dtExecEnd
        Move (dtExecEnd - dtExecStart) to tsTotalTime
        Get TimeSpanToString tsTotalTime to sTotalTime
        Set psTotalTime to sTotalTime
        Send UpdateStatusBar (CS_CRLF + "Process completed. Elapsed Time:" * sTotalTime) True
        Get CollectSummary RefactorSettings True to sText
        
        If (eResponse = eEngineOK) Begin
            Set Changed_State of hoEditor to False
        End                              
        Else If (eResponse = eEngineUserCancel) Begin
            Move "The process was cancelled by the user" to sText
        End
        Else If (eResponse = eEngineError) Begin
            Move "The process ended but with errors. The Refactoring Engine Error dialog will now be displayed." to sText
        End     
        Else If (eResponse = eEngineSelError) Begin
            Move "Name in File array is blank, cannot continue. (GetTheWorkDone)\nProcess interrupted." to sText
        End  
        Else If (eResponse = eEngineBackupErr) Begin
            Move "A file could not be copied to the backup area and no attempt was made to change it.\nProcess interrupted." to sText
        End
        
        Function_Return sText
    End_Function
    
    Function StartWarning tRefactorSettings RefactorSettings String sFileName Returns Integer
        Boolean bSaveBak bReadOnly
        Integer eResponse 
        String  sMessage sReadOnlyMessage
        
        If (RefactorSettings.FileData.asFullFileNames[0] = "") Begin
            If (RefactorSettings.FileData.asFolders[0] = "") Begin
                Move "No folders selected. Please adjust and try again." to sMessage
            End 
            Else Begin
                Move "No files found that matches the selected folders and file filter. Please adjust and try again." to sMessage
            End
            Send Info_Box sMessage
            Function_Return MBR_No
        End
        Move ("\n\nYou have also selected ReadOnly mode, which means that statistics will be shown but no actual changes to the source code will be made.") to sReadOnlyMessage
        
        If (RefactorSettings.bCountSourceLines = True) Begin
            Move "The Function 'Count number of source lines' needs to be run in solitude! All other functions will be ignored." to sMessage
            Append sMessage "\n\nContinue?"
        End
        Else Begin
            If (RefactorSettings.bWorkspaceMode) Begin    
                If (RefactorSettings.bCountSourceLines = False) Begin
                    Append sMessage ("You have selected" * String(RefactorSettings.iSelectedFunctionTotal) * "refactoring functions.\n" + "They will be applied to:\n") 
                End
                Append sMessage (SizeOfArray(RefactorSettings.FileData.asFullFileNames)) " Files in " (SizeOfArray(RefactorSettings.FileData.asFolders)) " selected Folders" 
                If (RefactorSettings.bReadOnly = False) Begin
                    Append sMessage "\n\nYou should ALWAYS have checked in your source code with a version control system and/or "
                    Append sMessage "made a backup of the source code, before you continue!"
                End
                Else Begin
                    Append sMessage sReadOnlyMessage
                End
                Append sMessage "\n\nContinue?"
            End
            Else Begin
                If (RefactorSettings.bCountSourceLines = False) Begin
                    Append sMessage ("You have selected" * String(RefactorSettings.iSelectedFunctionTotal) * "refactoring functions.\n" + "They will be applied to a sinlge source file:\n")
                End
                Append sMessage sFileName
                If (RefactorSettings.bReadOnly = True) Begin
                    Append sMessage sReadOnlyMessage
                End
                Append sMessage "\n\nContinue?"
            End
        End
        
        If (RefactorSettings.bShowStartQuestion = True) Begin
            Get YesNo_Box sMessage "" MB_DEFBUTTON2 to eResponse
        End
        Else Begin
            Move MBR_Yes to eResponse
        End
        Function_Return eResponse
    End_Function

    Function CollectSummary tRefactorSettings RefactorSettings Boolean bWriteLogFile Returns String
        String sText sLogText sLogFile sPath sTotalTime sProgram sFormatString sValue sSWSFile sFileName sReadOnlyTxt sTab
        Integer iChangedFiles iCount iSize
        Integer iFileCount iCh
        DateTime dtToday
        Boolean bExists bWorkspaceMode
        
        Move "    " to sTab
        Move ",#." to sFormatString
        Move SysFile.iCountNumberOfChangedFiles to iChangedFiles
        Move SysFile.iCountNumberOfFiles        to iFileCount
        Append sText "\n  Statistics:\n  ===========\n"
        Move "Note: bReadOnly = True. *No* changes were actually made to the source code." to sReadOnlyTxt
        Get psSWSFile of ghoApplication to sSWSFile
        If (sSWSFile <> "") Begin
            Append sText sTab ("SWS File:" * Trim(sSWSFile) + "\n")
        End

        Get pbWorkspaceMode of ghoApplication to bWorkspaceMode
        If (bWorkspaceMode = True) Begin
            Append sText sTab ("File Filter:" * Trim(RefactorSettings.sFileFilter) + "\n") 
            Append sText sTab ("Files:" * String(SizeOfArray(RefactorSettings.FileData.asFullFileNames)) + "\n")
            Move (SizeOfArray(RefactorSettings.FileData.asFolders)) to iSize
            Append sText sTab ("Folders:" * String(iSize) + "\n")
            Decrement iSize
            For iCount from 0  to iSize
                Append sText sTab RefactorSettings.FileData.asFolders[iCount] "\n"
            Loop
        End 
        Else Begin
            Get psCurrentSourceFileName of ghoApplication to sFileName
            Append sText sTab "Mode: Single file" " " sFileName  "\n"
            If (RefactorSettings.bReadOnly = True) Begin
                Append sText sTab sReadOnlyTxt "\n"
            End
        End

        If (RefactorSettings.bCountSourceLines = False) Begin
            Append sText "\n" sTab ("Selected Functions:" * String(SysFile.SelectedFunctionTotal))
        End
        Else Begin
            Append sText "\n" "  'Count of Source Lines' selected.  *All other functions were ignored*"
        End
        
        // If source line counting this will be the only action for this run:
        If (RefactorSettings.bCountSourceLines = True) Begin
            Move (FormatValue(SysFile.iCountNumberOfLines, sFormatString)) to sValue
            Append sText "\n" "  Skipped all COM wrapper files generated by the Studio, blank and commented lines" "\n"
            Append sText ("- Count of Source lines. Number of files:" * String(SysFile.iCountNumberOfFiles) * String("Total Number of Lines:") * String(sValue))
        End

        Else Begin
            // *** Type: eRemoveFunction ***
            //          Line-by-line
            If (RefactorSettings.iSelectedRemoveFunctions <> 0) Begin
                Append sText ("\n\nFunction Type:" * CS_RemoveFunction +"(s):")
                Constraint_Set (Self + eRemoveFunction) Clear
                Constrained_Clear eq FunctionsA by Index.4  
                Constrain FunctionsA.Type eq eRemoveFunction
                Constrain FunctionsA.Selected eq True
                Constrain FunctionsA.bPublished eq True
                Constrained_Find First FunctionsA by Index.4
                While (Found)
                    Append sText ("\n-" * String(FunctionsA.Counter) * "lines" * Trim(FunctionsA.SummaryText))
                    Constrained_Find Next            
                Loop
            End
            
            // *** Type: eStandardFunction ***
            //          Line-by-line
            If (RefactorSettings.iSelectedStandardFunctions <> 0) Begin
                Append sText ("\n\nFunction Type:" * CS_StandardFunction +"(s):")
                Constraint_Set (Self + eStandardFunction) Clear
                Constrained_Clear eq FunctionsA by Index.4  
                Constrain FunctionsA.Type eq eStandardFunction        
                Constrain FunctionsA.Selected eq True
                Constrain FunctionsA.bPublished eq True
                Constrained_Find First FunctionsA by Index.4
                While (Found)
                    If (FunctionsA.Counter <> 0) Begin
                        Append sText ("\n-" * String(FunctionsA.Counter) * "lines" * Trim(FunctionsA.SummaryText))
                    End
                    Constrained_Find Next            
                Loop
            End
            
            // Editor functions:
            // One source file at a time was passed as a string array.
            If (RefactorSettings.iSelectedEditorFunctions <> 0) Begin
                Append sText ("\n\nFunction Type:" * CS_EditorFunction +"(s):")
                Constraint_Set (Self + eEditorFunction) Clear
                Constrained_Clear eq FunctionsA by Index.4  
                Constrain FunctionsA.Type eq eEditorFunction
                Constrain FunctionsA.Selected eq True
                Constrain FunctionsA.bPublished eq True
                Constrained_Find First FunctionsA by Index.4
                While (Found)
                    If (FunctionsA.Counter <> 0) Begin
                        Append sText ("\n-" * String(FunctionsA.Counter) * "file(s)" * Trim(FunctionsA.SummaryText))
                    End
                    Constrained_Find Next            
                Loop
            End
            
            // Other functions:
            // One source file at a time was passed as a string array.
            If (RefactorSettings.iSelectedOtherFunctions <> 0) Begin
                Append sText ("\n\nFunction Type:" * CS_OtherFunction +"(s):")
                Constraint_Set (Self + eOtherFunction) Clear
                Constrained_Clear eq FunctionsA by Index.4  
                Constrain FunctionsA.Type eq eOtherFunction
                Constrain FunctionsA.Selected eq True
                Constrain FunctionsA.bPublished eq True
                Constrained_Find First FunctionsA by Index.4
                While (Found)
                    If (FunctionsA.Counter <> 0) Begin
                        Append sText ("\n-" * String(FunctionsA.Counter) * "lines" * Trim(FunctionsA.SummaryText))
                    End
                    Constrained_Find Next            
                Loop
            End

            // OthertAll functions:
            // All selected files were passed as a string array (with full path)
            If (RefactorSettings.iSelectedOtherAllFunctions <> 0) Begin
                Append sText ("\n\nFunction Type:" * CS_OtherFunctionAll +"(s):")
                Constraint_Set (Self + eOtherFunctionAll) Clear
                Constrained_Clear eq FunctionsA by Index.4  
                Constrain FunctionsA.Type eq eOtherFunctionAll
                Constrain FunctionsA.Selected eq True
                Constrain FunctionsA.bPublished eq True
                Constrained_Find First FunctionsA by Index.4
                While (Found)
                    If (FunctionsA.Counter <> 0) Begin
                        Append sText ("\n-" * String(FunctionsA.Counter) * "file(s)" * Trim(FunctionsA.SummaryText))
                    End
                    Constrained_Find Next            
                Loop
            End
            
            // Report functions: These makes no code changes.
            // One source file at a time was passed as a string array.
            If (RefactorSettings.iSelectedReportFunctions <> 0) Begin
                Append sText ("\n\nFunction Type:" * CS_ReportFunction +"(s):")
                Constraint_Set (Self + eReportFunction) Clear
                Constrained_Clear eq FunctionsA by Index.4  
                Constrain FunctionsA.Type eq eReportFunction
                Constrain FunctionsA.Selected eq True
                Constrain FunctionsA.bPublished eq True
                Constrained_Find First FunctionsA by Index.4
                While (Found)
                    If (FunctionsA.Counter <> 0) Begin
                        Append sText ("\n-" * String(FunctionsA.Counter) * "file(s)" * Trim(FunctionsA.SummaryText))
                    End
                    Constrained_Find Next            
                Loop
            End

            // ReportAll functions: These makes no code changes.
            // All selected files were passed as a string array (with full path)
            If (RefactorSettings.iSelectedReportAllFunctions <> 0) Begin
                Append sText ("\n\nFunction Type:" * CS_ReportFunctionAll +"(s):")
                Constraint_Set (Self + eReportFunctionAll) Clear
                Constrained_Clear eq FunctionsA by Index.4  
                Constrain FunctionsA.Type eq eReportFunctionAll
                Constrain FunctionsA.Selected eq True
                Constrain FunctionsA.bPublished eq True
                Constrained_Find First FunctionsA by Index.4
                While (Found)
                    If (FunctionsA.Counter <> 0) Begin
                        Append sText ("\n-" * Trim(FunctionsA.SummaryText) * String(FunctionsA.Counter) * "file(s)" )
                    End
                    Constrained_Find Next            
                Loop
            End
            
        End
        
        If (bWriteLogFile = True) Begin
            Get psTotalTime to sTotalTime    
            Move ("Process completed without errors. Elapsed Time:" * String(sTotalTime)) to sTotalTime
            Get psHomePath of ghoApplication to sPath
            Get vFolderFormat sPath to sPath
            Move (sPath + CS_BackupFolder + CS_DirSeparator + CS_SummaryLogfileName) to sLogFile
            
            Get OpenAppendOutput sLogFile to iCh
            // No channel available 
            If (iCh < 0) Begin
                //Error DFErr_Program "No Channel Available for Process: Procedure 'SummaryText'"
                Function_Return ""
            End

            Move (Replaces("\n", sText, (Character(13) + Character(10)))) to sLogText
            Get psProduct of ghoApplication to sProgram
            Move (CurrentDateTime()) to dtToday
            Writeln channel iCh "====================================================================================="
            Writeln channel iCh "*** CREATED BY: " sProgram " -- " dtToday " " "***"
            Writeln channel iCh sLogText
            Writeln channel iCh  
            Writeln channel iCh ("Total number of files changed:" * String(iChangedFiles) * "out of" * String(iFileCount) * "Files.")
            Writeln channel iCh sTotalTime
            If (RefactorSettings.bReadOnly = True) Begin
                Writeln channel iCh "  " sReadOnlyTxt
            End
            If (Error_Count(Self) <> 0) Begin
                Writeln channel iCh " " "ERROR! Process ended with: " (Error_Count(Self)) " Error(s). Please see toolbar button: 'Refactor Engine Error log'."
            End
            Writeln channel iCh
            Send CloseAppendOutput iCh
        End

        Function_Return sText
    End_Function

    Function ReadFileToStringArray String sSourceFile Returns String[]
        Boolean bLastLineBreak bEndOfFile bFirstLine bHasBom
        Integer iLine iCh iFileSize iEncoding
        String sLine sLastLine sLineBreak sFileNameOnly
        String[] asSourceFile
        Handle hoEditor
        
        Move 0 to iLine
        Move True  to bFirstLine
        Move False to bEndOfFile
        Move False to bLastLineBreak
        Move ""    to sLastLine
        
        Get OpenInput ("binary:" + sSourceFile) to iCh
        If (iCh < 0) Begin
            Function_Return asSourceFile
        End
        Get phoEditor to hoEditor
        Get ParseFileName sSourceFile to sFileNameOnly
        Set TableName_Text of ghoStatusPanel to ("Reading:" * String(sFileNameOnly))
        Get vWin32_APIFileSize sSourceFile to iFileSize
        Move (ResizeArray(asSourceFile, iFileSize)) to asSourceFile

        // Need to use binary read mode if we want to preserve tab characters and not have automatic tab replacement
        // filemode options don't seem to work as documented, not sure why.
        While (bEndOfFile = False)
            Readln channel iCh sLine
            Move (SeqEof) to bEndOfFile
            If (bEndOfFile and Length(sLastLine) > 0) Begin
                If (Right(sLastLine, 1) = CS_CR) Begin
                    Move True to bLastLineBreak
                End
            End
            Move sLine to sLastLine
            If (bFirstLine = True) Begin
                // This also sets the Scintilla editor's UTF8/OEM mode.
                Get DetectBOMCharacter sLine to bHasBom

                // Determine the linebreak character to use for the file based on what is in the first line
                // The readline automatically reads Until LF, but does not report LF back in the string
                If (Length(sLine) > 0 and Right(sLine, 1) = CS_CR) Begin
                    Move CS_CRLF to sLineBreak
                End
                Else Begin
                    Move CS_LF to sLineBreak
                End
                Set psLineBreak to sLineBreak
                Move False to bFirstLine
            End
            If (sLineBreak = CS_CRLF) Begin
                If (Right(sLine, 1) = CS_CR) Begin
                    Move (Left(sLine, Length(sLine) - 1)) to sLine
                End
            End   
           Get EditorFormatToUtf8 of hoEditor sLine to sLine
            If (bEndOfFile = False) Begin
                Move sLine to asSourceFile[iLine]
                Increment iLine
            End
        Loop

        Send CloseInput iCh
        Move (ResizeArray(asSourceFile, iLine)) to asSourceFile
        Set pbLastLineBreak to bLastLineBreak

        Function_Return asSourceFile
    End_Function  
    
    Function IsFileUTF8 Global String sFilename Returns Boolean
        String sLine
        UChar[] ucLine
        Integer iCh
        
        Move (Seq_New_Channel()) to iCh    
        Direct_Input channel iCh sFilename
        Read_Block channel iCh ucLine 3
        Close_Input channel iCh
        Send Seq_Release_Channel iCh
        
        If (SizeOfArray(ucLine) > 2) ;
            If (ucLine[0]=C_BOM_UTF8c1 and ucLine[1]=C_BOM_UTF8c2 and ucLine[2]=C_BOM_UTF8c3) Begin
                Function_Return True
            End
    
        Function_Return False
    End_Function

    // Detects if a sLine has an UTF8 "BOM" file start.
    // If true it sets three properties of the phoEditor object.
    // Returns true if the line has BOM characters.
    Function DetectBOMCharacter String sLine Returns Boolean
        Boolean bHasBom bUtf8Mode
        UChar[] uaLine
        Handle hoEditor
        Integer iEncoding 
        
        Get phoEditor to hoEditor 
        Move False to bHasBom
        Move (StringToUCharArray(sLine)) to uaLine
        Move (SizeOfArray(uaLine) >= 3 and ( ;
            (uaLine[0] = C_BOM_UTF8c1    and uaLine[1] = C_BOM_UTF8c2 and uaLine[2] = C_BOM_UTF8c3) or ;
            (uaLine[0] = C_BOM_UTF16LEc1 and uaLine[1] = C_BOM_UTF16LEc2))) to bHasBom

        If (bHasBom = True) Begin
            Set pbHasUtf8BOM of hoEditor to True
            Get pbUtf8Mode   of hoEditor to bUtf8Mode
            If (bUtf8Mode = False) Begin
                Set pbUtf8Mode of hoEditor to True
                Set pbOemMode  of hoEditor to False
            End
            Move eTE_UTF8 to iEncoding
        End 
        Else Begin
            Set pbOemMode    of hoEditor to True
            Set pbUtf8Mode   of hoEditor to False
            Set pbHasUtf8BOM of hoEditor to False
            Move eTE_OEM to iEncoding    
        End
        Send ShowTextEncoding of hoEditor iEncoding

        Function_Return bHasBom    
    End_Function

    Function WriteStringArrayToFile String[] asCode String sSourceFile Returns Boolean
        Boolean bLastLineBreak bIsUtf8
        Integer iCh iSize iCount
        String  sLineBreak sLine
        Handle hoEditor
        
        Move False to Err
        Move CS_CRLF to sLineBreak
        Get OpenOutput sSourceFile to iCh
        If (iCh < 0) Begin
            Function_Return False
        End
        Get phoEditor to hoEditor
        Get pbUtf8Mode of hoEditor to bIsUtf8
        
        Move (SizeOfArray(asCode)) to iSize
        Decrement iSize   
        If (iSize >= 0) Begin
            For iCount from 0 to (iSize-1)
                Move asCode[iCount] to sLine 
                If (bIsUtf8 = False) Begin
                    Get Utf8ToEditorFormat of hoEditor sLine to sLine
                End
                Write channel iCh sLine sLineBreak
            Loop
            If (bLastLineBreak = True) Begin
                Write channel iCh asCode[iSize] sLineBreak
            End
            Else Begin
                Write channel iCh asCode[iSize]
            End
        End

        Send CloseOutput iCh
        Function_Return (Err = False)
    End_Function  
    
    Function TimeSpanToString TimeSpan tsTime Returns String
        Integer iDays iHours iMinutes iSeconds iMilliseconds
        String  sTime

        Move "" to sTime
        Move (SpanDays(tsTime))    to iDays
        Move (SpanHours(tsTime))   to iHours
        Move (SpanMinutes(tsTime)) to iMinutes
        Move (SpanSeconds(tsTime)) to iSeconds
        Move (SpanMilliSeconds(tsTime)) to iMilliSeconds
        If (iDays > 0) Begin   // Don't show days if it is zero
            Move (String(iDays) + ":") to sTime
        End
        If (iHours < 10) Begin
            Move (sTime+"0") to sTime
        End
        Move (sTime + String(iHours) + ":") to sTime
        If (iMinutes < 10) Begin
            Move (sTime + "0") to sTime
        End
        Move (sTime + String(iMinutes) + ":") to sTime
        If (iSeconds < 10) Begin
            Move (sTime + "0") to sTime
        End
        Move (sTime + String(iSeconds) + "." + String(iMilliSeconds)) to sTime

        Function_Return sTime
    End_Function

    Procedure UpdateStatusBar String sText Boolean bIdleTextOnly Integer iLi Integer iChrs
        Handle hoStatusBar
        Integer iLines iCharacters

        Get StatusBar_Id to hoStatusBar
        If (num_arguments > 2) Begin
            Move iChrs to iCharacters
            If (iCharacters = 0) Begin
                Move 0 to iLines
            End                 
            Else Begin
                Move iLi to iLines
            End
            Set NumberOfEditorLines      of hoStatusBar to iLines
            Set NumberOfEditorCharacters of hoStatusBar to iCharacters
        End
        Else Begin
            If (bIdleTextOnly = True) Begin
                Set psIdleText of hoStatusBar to sText
                Set ActionText of hoStatusBar to ""
            End
            Else Begin
                Set ActionText of hoStatusBar to sText
            End
        End
    End_Procedure

    Procedure Update_Status String sProgress
        String  sPath
        Boolean bWorkspaceMode

        Get pbWorkspaceMode of ghoApplication to bWorkspaceMode
        If (bWorkspaceMode = True) Begin
            Get psHomePath of ghoApplication to sPath
            If (sPath <> "") Begin
                // Strip out the path, so we can see the filename without it being cut off.
                Move (Replace(sPath, sProgress, "..")) to sProgress
            End
        End
        Forward Send Update_Status sProgress
    End_Procedure

    Procedure IncrementFileCount Boolean bChangesMade
        Reread SysFile
            Add 1 to SysFile.iCountNumberOfFiles
            If (bChangesMade = True) Begin
                Add 1 to SysFile.iCountNumberOfChangedFiles                
            End
            SaveRecord SysFile
        Unlock
    End_Procedure

    Procedure OnError Integer ErrNum Integer iErrLine String ErrMsg
        Send Log_Status of ghoStatusLog ("iErrNum =" * String(ErrNum) * "iErrLine =" * String(iErrLine) * "ErrMsg =" * String(ErrMsg))
    End_Procedure
    
    Procedure Start_Log
    End_Procedure
    Procedure End_Log
    End_Procedure
    
    Procedure OnProcess
        Send RunRefactoringEngine
    End_Procedure
    
End_Class                          
