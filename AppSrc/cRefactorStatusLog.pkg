Use StatFLog.pkg
Declare_Datafile StatLog
Declare_Datafile Functions

Global_Variable Handle ghoStatusLog
Move 0 to ghoStatusLog

Class cRefactorStatusLog is a StatusDbLog
    Procedure Construct_Object
        Forward Send Construct_Object 
        Set Status_Log_Id to Self
        
        Delegate Set Display_Error_State  to False
        Delegate Set Status_Log_State to True
        Delegate Set Status_Log_Id to Self 
        Property Boolean pbStatusLogState True
        Move Self to ghoStatusLog
        Open StatLog
        
        Property Boolean pbInSavingMode False
    End_Procedure                    
    
    Procedure Log_Status String sText
        Integer iDateFormat
        String sFunctionName  
        DateTime dtCurrentDateTime
        Date    dDate
        Integer OldError                    // We must trap errors that occur
        
        If (pbStatusLogState(Self) = False) Begin 
            Move False to Err
            Move 0 to LastErr
            Procedure_Return
        End
        Set pbInSavingMode to True
        Move Error_Object_ID to OldError    // within this object, often errors
        Move Self to Error_Object_Id        // are logged - causing recursion(!)
        Get_Attribute DF_DATE_FORMAT to iDateFormat
        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
        
        Clear StatLog
        Move (Trim(FunctionsA.Function_Name)) to sFunctionName
        If (sFunctionName = "") Begin
            Move (Trim(Functions.Function_Name)) to sFunctionName
        End
        Move sFunctionName       to StatLog.FunctionName
        Move (CurrentDateTime()) to dDate
        Move (CurrentDateTime()) to dtCurrentDateTime
        Move dDate               to StatLog.Date
        Move dtCurrentDateTime   to StatLog.Time
        Move sText               to StatLog.Description
        SaveRecord StatLog

        Set_Attribute DF_DATE_FORMAT to iDateFormat
        Move OldError to Error_Object_Id
        Set pbInSavingMode to False
    End_Procedure
    
    // When errors occur within object, they are directed here.
    { MethodType=Event Visibility=Private }
    Procedure Error_Report Integer iErrorNumber Integer iErrLine String sErrorText
        String sStack
        Boolean bUnhandled
        
        If (pbInSavingMode(Self) = False) Begin
            //Forward send Error_Report iErrorNumber iErrLine ErrMsg
            Send Error_report of desktop iErrorNumber iErrLine sErrorText
            Procedure_Return
        End
        
        // This is weird! Even though Recnum is part of the index, it can happen
        // that a "Duplicate Record" error is generated by the Log_Status above.
        // This happens only during heavy load with a big workspace with hundred
        // of files.
        // When an error happens within the Log_Status message above we end up here, 
        // as otherwise there would be a recursion.
        // So we wait a second, get a new datetime value and attempt to save again.
        // The question is why is this happening?
        
        Sleep 1
        Move (CurrentDateTime()) to StatLog.Time 
        Move ("Internal Error No:" * String(iErrorNumber)) to StatLog.FunctionName 
        Move sErrorText to StatLog.Description
        SaveRecord StatLog
    End_Procedure
    
End_Class
