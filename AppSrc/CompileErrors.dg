Use Windows.pkg
Use cRichEdit.pkg
Use cRDCButtonDPI.pkg
Use cRDCModalPanel.pkg 
Use cRDCCJGrid.pkg
Use seq_chnl.pkg
Use vwin32fh.pkg
Use cCJGrid.pkg
Use cCJGridColumn.pkg

Struct tCompileError
    Boolean bError    // If false, it is a warning.
    Integer iErrorNo
    Integer iLine    
    String sFileName
    String sErrorTxt
    String sText
End_Struct

Object oErrorLogDialog_dg is a floatingpanel ToolPanel
    Set Size to 78 800
    Set Label to "Compile Errors"
    Set piMinSize to 70 211
    Set Location to 467 4
    Set Icon to "CompileErrors.ico"
    Set Color to clBlack
    
    Property String psErrorFile ""
    Property Integer piIndent

    Object oCompileErrors_grd is a cCJGrid
        Set Size to 96 2000
        Set Location to 0 0
        Set peAnchors to anAll
        
        Property Integer piIconOff
        Property Integer piWarningIcon
        Property Integer piErrorIcon
        
        Set pbGrayIfDisable to False
        Set pbShowHeader to False
        Set pbShowRowFocus to True
        Set peVisualTheme to xtpGridThemeVisualStudio2012Dark
        Set psNoItemsText to "No errors"
        Set pbAutoSave to False
        Set TextColor to clWhite
        Set piSelectedRowBackColor to clWhite
        Set piSelectedRowForeColor to clBlack
        Set piFocusCellBackColor to clWhite
        Set piFocusCellForeColor to clBlack
        Set peHorizontalGridStyle to xtpGridNoLines
        Set pbAllowAppendRow to False
        Set pbAllowColumnRemove to False
        Set pbAllowColumnReorder to False
        Set pbAllowDeleteRow to False
        Set pbAllowInsertRow to False
        Set pbAutoAppend to False
        Set pbRestoreLayout to True
        Set pbSelectionEnable to True
        Set pbSelectTextOnEdit to False
        Set psLayoutSection to "oCompileErrors_grd"
        Set piHighlightBackColor to clWhite
        Set piHighlightForeColor to clBlack
        Set peVerticalGridStyle to xtpGridNoLines

        Object oIcon_Col is a cCJGridColumn
            Set piWidth to 25
            Set pbDrawFooterDivider to False
            Set pbDrawHeaderDivider to False
            Set peIconAlignment to xtpAlignmentIconCenter
            Set pbShowInFieldChooser to False
            Set pbAllowDrag to False
            Set pbAllowRemove to False
            Set pbEditable to False
            Set pbResizable to False

            Procedure OnSetDisplayMetrics Handle hoGridItemMetrics Integer iRow String ByRef sValue
                String sIconFile
                Integer iVal
               
                Forward Send OnSetDisplayMetrics hoGridItemMetrics iRow

                Get RowValue of obError_Col iRow to iVal
                If (iVal = 1) Begin
                    Set ComItemIcon of hoGridItemMetrics to (piErrorIcon(Self))
                End
                Else Begin
                    Set ComItemIcon of hoGridItemMetrics to (piWarningIcon(Self))
                End
           End_Procedure

        End_Object
        
        Object oText_Col is a cCJGridColumn
            Set piWidth to 2000
            Set pbAllowDrag to False
            Set pbAllowRemove to False
            Set pbComboEntryState to False
            Set pbEditable to False
            Set pbShowInFieldChooser to False
        End_Object 
        
        // Hidden columns:
        Object obError_Col is a cCJGridColumn
            Set piWidth to 4
            Set pbVisible to False
            Set pbCheckbox to True
            Set pbShowInFieldChooser to False
        End_Object 
        
        Object oErrorNum_Col is a cCJGridColumn
            Set piWidth to 4
            Set pbVisible to False
            Set pbShowInFieldChooser to False
        End_Object 
        
        Object oLine_Col is a cCJGridColumn
            Set piWidth to 4
            Set pbVisible to False
            Set pbShowInFieldChooser to False
        End_Object 
        
        Object oFileName_Col is a cCJGridColumn
            Set piWidth to 4
            Set pbVisible to False
            Set pbShowInFieldChooser to False
        End_Object 
        
        Object oErrorTxt_Col is a cCJGridColumn
            Set piWidth to 4
            Set pbVisible to False
            Set pbShowInFieldChooser to False
        End_Object  
        
        Procedure Delete_Data
            Handle hoDataSource
            tDataSourceRow[] TheData

            If (not(IsComObjectCreated(Self))) Begin
                Procedure_Return
            End
            
            Send InitializeData TheData  
        End_Procedure

        Procedure LoadData
            String sFileName      
            Integer iSize iCount 
            Integer iIcon_Col iText_Col ibError_Col iErrorNum_Col iLine_Col iFileName_Col iErrorTxt_Col
            String[] asErrData
            tCompileError[] asCompileError
            Handle hoDataSource
            tDataSourceRow[] TheData TheDataEmpty

            If (not(IsComObjectCreated(Self))) Begin
                Procedure_Return
            End

            Get psErrorFile to sFileName
            Get ReadErrorFile sFileName to asErrData
            Get MassageErrorFile asErrData to asCompileError
            Move (SizeOfArray(asCompileError)) to iSize
            If (iSize = 0) Begin
                Procedure_Return
            End
            
            Decrement iSize
            Get phoDataSource to hoDataSource
            Get DataSource of hoDataSource to TheData
            Move TheDataEmpty to TheData

            Get piColumnId of oIcon_Col     to iIcon_Col
            Get piColumnId of oText_Col     to iText_Col
            Get piColumnId of obError_Col   to ibError_Col
            Get piColumnId of oErrorNum_Col to iErrorNum_Col
            Get piColumnId of oLine_Col     to iLine_Col
            Get piColumnId of oFileName_Col to iFileName_Col
            Get piColumnId of oErrorTxt_Col to iErrorTxt_Col

            For iCount from 0 to iSize   
                Move ""                                 to TheData[iCount].sValue[iIcon_Col]
                Move asCompileError[iCount].sText       to TheData[iCount].sValue[iText_Col]
                Move asCompileError[iCount].bError      to TheData[iCount].sValue[ibError_Col]
                Move asCompileError[iCount].iErrorNo    to TheData[iCount].sValue[iErrorNum_Col]
                Move asCompileError[iCount].iLine       to TheData[iCount].sValue[iLine_Col]
                Move asCompileError[iCount].sFileName   to TheData[iCount].sValue[iFileName_Col]
                Move asCompileError[iCount].sErrorTxt   to TheData[iCount].sValue[iErrorTxt_Col]
            Loop

            Send InitializeData TheData  
            Send MoveToLastRow
        End_Procedure
        
        Function ExtractData String sValue Returns tCompileError
            String sTmp
            Integer iPos
            tCompileError CompileError
            
            // Error or Warning?
            Move (Pos(" ", sValue)) to iPos
            If (Left(sValue, iPos) contains "ERROR") Begin
                Move True to CompileError.bError
            End
            // Remove read part
            Move (Trim(Mid(sValue, Length(sValue), iPos))) to sValue
            Move (Pos(" ", sValue)) to iPos
            
            // Error number:
            Move (Trim(Left(sValue, iPos))) to sTmp
            Move sTmp to CompileError.iErrorNo
            // Remove read part
            Move (Trim(Mid(sValue, Length(sValue), iPos))) to sValue

            // File name:
            Move (Pos("OF FILE:", sValue)) to iPos
            Move (Trim(Mid(sValue, Length(sValue), iPos + 8))) to sTmp
            Move sTmp to CompileError.sFileName
            // Remove read part
            Move (Trim(Left(sValue, iPos-1))) to sValue

            // Line number:
            Move (Pos("ON LINE:", sValue)) to iPos
            Move (Trim(Mid(sValue, Length(sValue), iPos + 8))) to sTmp
            Move (Pos(" ", sTmp)) to iPos
            Move (Trim(Left(sTmp, iPos))) to sTmp
            Move sTmp to CompileError.iLine
            // Remove read part
            Move (Pos("ON LINE:", sValue)) to iPos
            Move (Trim(Left(sValue, iPos -1))) to sValue
            
            // Error Text:
            Move sValue to CompileError.sErrorTxt
            
            // Finally, construct the text to display:
            Move "Error" to sValue
            Append sValue " " CompileError.iErrorNo ":"
            Append sValue "   " CompileError.sFileName
            Append sValue "   " "(ln " CompileError.iLine ")"
            Append sValue " " CompileError.sErrorTxt
            Move sValue to CompileError.sText
            
            Function_Return CompileError
        End_Function

        Function ReadErrorFile String sFileName Returns String[]
            Integer iCh iFileSize iCount
            String[] asFile  
            String sLine
            
    
            Get Seq_New_Channel to iCh
            If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin 
                Error "No Channel Available for Process: Procedure 'ReadSourceFile (CompileErrors.dg)'"            
                Function_Return asFile
            End
    
            Move 0 to iCount
            Get vWin32_APIFileSize sFilename to iFileSize
            Move (ResizeArray(asFile, iFileSize)) to asFile
    
            Direct_Input channel iCh ("binary:" + sFilename)
            While (SeqEof = False)
                Readln channel iCh sLine
                If (Trim(sLine) <> "") Begin
                    Move sLine to asFile[iCount]
                    Increment iCount
                End
            Loop
            Close_Input channel iCh
            Send Seq_Release_Channel iCh
            Move (ResizeArray(asFile, iCount)) to asFile
    
            Function_Return asFile
        End_Function  
        
        Function MassageErrorFile String[] asFile Returns tCompileError[]
            String sValue
            Integer iSize iCount
            tCompileError[] asCompileError
            
            Move (SizeOfArray(asFile)) to iSize
            Decrement iSize
            For iCount from 0 to iSize
                Move asFile[iCount] to sValue 
                Get ExtractData asFile[iCount] to asCompileError[iCount]
            Loop
            
            Function_Return asCompileError
        End_Function
        
        Procedure DisplayCurrentSourceLine  
            Integer iLine_Col iLine iItem
            Handle hoDataSource
            tDataSourceRow[] TheData
            
            Get piColumnId of oLine_Col to iLine_Col
            Get phoDataSource to hoDataSource 
            Get SelectedRow of hoDataSource to iItem
            Get DataSource of hoDataSource to TheData  
            Move TheData[iItem].sValue[iLine_Col] to iLine
            If (iLine <> -1) Begin  
                Decrement iLine       
                Send JumpToSourceLine of (Client_Id(phoMainPanel(ghoApplication))) iLine    
                Send Activate of (phoEditorRefactored(ghoApplication))
            End
        End_Procedure   

        Procedure OnComRowDblClick Variant llRow Variant llItem
            Send DisplayCurrentSourceLine
        End_Procedure

        Procedure LoadIcons
            Integer iImage
            Get AddImage "" 0 to iImage
            Set piIconOff to iImage
            Get AddImage "Warning.ico" 0 to iImage
            Set piWarningIcon to iImage
            Get AddImage "Error.ico" 0 to iImage
            Set piErrorIcon  to iImage
        End_Procedure

        Procedure OnSetFocus
            Integer iRetVal
            Send LoadIcons  
            Send LoadData
            Send Activate
        End_Procedure
              
        On_Key kEnter Send DisplayCurrentSourceLine
    End_Object

    // Adjust location of this Toolpanel to the bottom of the application,
    // and make it the same width as the application.
    Procedure Locate_Panel
        Handle hoTarget hoFocus
        Integer iSize iLocation
        Integer iScreenHt iScreenWd iScreenRow iScreenCol
        Integer iHeight iWidth iRow iCol
        
        Get Focus of Desktop to hoFocus
        
        Get Parent to hoTarget
        // Only do this if the object exists and is not the desktop
        If (hoTarget and hoTarget > Desktop) Begin
            Get Absolute_GUIOrigin of hoTarget to iLocation
            Get GuiClientSize of hoTarget to iSize
        End
        Else Begin
            // this is the center on the primary screen and is our fallback position if
            // the other modes don't work right
            Move (GuiScreen_Size(1)) to iSize
            Move 0 to iLocation
        End
        
        // this is the origin row and column of "the containing" object
        Move (Hi(iLocation))  to iScreenRow
        Move (Low(iLocation))  to iScreenCol
        If (iScreenCol > 32767) Begin
            Move (iScreenCol - 65536 ) to iScreenCol
        End
        If (iScreenRow > 32767) Begin
            Move (iScreenRow - 65536 ) to iScreenRow
        End
        
        // this is the height and width of the "containing" object or screen
        Move (Hi(iSize)) to iScreenHt
        Move (Low(iSize)) to iScreenWd
        
        // this is the height and width of this toolpanel
        Get GuiWindowSize to iSize
        Move (hi(iSize))   to iHeight  
        Move iScreenWd     to iWidth
        Move ( (iScreenHt - iHeight) + iScreenRow) to iRow
        
        // Adjust panel to fit multi-display setup
        Send AdjustForMultiDisplay  iHeight iWidth (&iScreenCol) (&iRow)
        
        // Set toolpanel to same width as application
        Set GuiSize     to iHeight iScreenWd
        Set GuiLocation to (iRow -5) (iScreenCol -10)
        Send Adjust_Logicals
    End_Procedure
    
    On_Key Key_Alt+Key_C  Send Close_Panel
    On_Key Key_Escape     Send Close_Panel 
End_Object

// *** Public access methods for this dialog ***
//
// Pass a file name including path to display.
Procedure ActivateErrorDialog String sErrorFile
    Handle ho
    Boolean bExists
    Integer iSize iHi iLow iLoc
    
    Get vFilePathExists sErrorFile to bExists
    If (bExists = False) Begin
        Send Info_Box "The ErrorLog doesn't exist."
        Procedure_Return
    End
    Move (oErrorLogDialog_dg(Self)) to ho
    Set psErrorFile of ho to sErrorFile
    
    Send Activate of ho
End_Procedure

// Public access method for deleting grid data in this toolpanel.
Procedure Delete_DataErrorDialog
    Handle ho hoGrid
    Move (oCompileErrors_grd(oErrorLogDialog_dg(Self))) to hoGrid
    If (Active_State(hoGrid)) Begin
        Send Delete_Data of hoGrid 
    End
End_Procedure

// Public access method close the toolpanel.
Procedure CloseErrorDialog
    Send Close_Panel of (oErrorLogDialog_dg(Self))    
End_Procedure
