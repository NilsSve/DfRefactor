Use cScintillaEdit.pkg
Use seq_chnl.pkg
Use oEditorProperties.pkg

#IFNDEF C_CtrlShiftTab
Define C_CtrlShiftTab for 7170
#ENDIF
Class cScintillaRefactorEditor is a cScintillaEdit
    
    Procedure Construct_Object
        Forward Send Construct_Object

        Set peAnchors to anAll 
        // Changed this to True as it is how the Studio works by default.
        Set pbFindDocumentStart to True
        
        Property Boolean piInSetFocus False
        Property DateTime pdtCurrentFileDateTime
        Property String psCodeFile
        On_Key Key_Ctrl+Key_Tab Send Switch_Next_View
        On_Key C_CtrlShiftTab   Send Switch_Prior_View
        On_Key Key_Ctrl+Key_S   Send Request_Save
        On_Key Key_Ctrl+Key_F   Send CME_Find
        On_Key Key_F3           Send CME_FindNext
        On_Key Key_Shift+Key_F3 Send CME_FindPrevious   
        On_Key Key_Ctrl+Key_G   Send CME_GotoLine  
        
        On_Key Key_Ctrl+Key_Alt+Key_F3 Send CME_FindReplace  
    End_Procedure
    
    Function ReadImageDataToStringArray Integer iImg Returns String[]
        Integer iChannel iCount
        String sTextValue sLine
        Boolean bSeqEof
        String[] asCode
        
        Move "" to sTextValue
        Move 0 to iCount
        
        Get Seq_New_Channel to iChannel
        If (iChannel = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
             Send Stop_box "No channel available. Function: 'ReadImageDataToStringArray'"
             Function_Return asCode
        End
        
        Send Delete_Data
        Direct_Input channel iChannel ("image: " + String(iImg))
        
        While (SeqEof = False)
            Readln channel iChannel sLine
            Move sLine to asCode[iCount]
            Increment iCount
        Loop
        Close_Input channel iChannel
        Send Seq_Release_Channel iChannel 
        Move (ResizeArray(asCode, (iCount -1))) to asCode
        
        Function_Return asCode
    End_Function
    
    Function ToggleScopeBlocks Returns Integer
        Integer iMode
        Get EditorMessage SCI_FOLDALL to iMode
        Function_Return iMode
    End_Function
    
    // Needed by the toolbar system.
    Procedure Request_Save
        Send SaveFile
    End_Procedure
    
    Procedure Help
       Delegate Send Help
    End_Procedure

    Procedure SaveFile
        Boolean bOK

        Send DispatchAnyKey
        Get WriteToDisk to bOK
        If (bOK = False) Begin
            Send Info_Box "An error occured and the file couldn't be saved properly."
        End
        Else Begin
            Set ActionText of (StatusBar_Id(Self))  to "Changes saved!"
        End
    End_Procedure
    
    // Helper function (to SaveFile)
    Function WriteToDisk Returns Boolean
        String sFileName
        Integer eResult

        Get psCodeFile to sFileName
        Get CM_SaveFile sFileName False to eResult
        Send FillFileTimeStamp sFileName // Update the filetime.

        Function_Return (eResult = CME_SUCCESS)
    End_Function

    Function WriteStringArrayToDisk String[] asCode Returns Boolean
        String sFileName sLine
        Integer iSize iCount iCh

        Get Seq_New_Channel to iCh
        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Send Info_Box "No Channel Available for saving file" "Error"
            Function_Return False
        End

        Get psCodeFile to sFileName
        Move (SizeOfArray(asCode)) to iSize
        Decrement iSize
        
        Direct_Output channel iCh sFileName
        
        For iCount from 0 to iSize
            Move asCode[iCount] to sLine
            #IF (!@ > 200)
                Move (Utf8ToOem(sLine)) to sLine
            #ENDIF         
            If (iCount < iSize) Begin
                Writeln channel iCh sLine
            End
            Else Begin
                Write channel iCh sLine
            End
        Loop                

        Close_Output channel iCh
        Send Seq_Release_Channel iCh
        Function_Return (Err = False)
    End_Function

    Function WriteDataToEditor String[] asCode Returns Boolean
        Integer iCount iSize iVoid
        String sLine
        
        Send Delete_Data
        Get CM_EnableCRLF True to iVoid

        Move (SizeOfArray(asCode)) to iSize
        Decrement iSize
        
        For iCount from 0 to iSize
            Move asCode[iCount] to sLine
            #IF (!@ > 200)
                Move (Utf8ToOem(sLine)) to sLine
            #ENDIF
            If (iCount < iSize) Begin
                Move (sLine + CS_CRLF) to sLine
            End
            Send AppendText sLine
        Loop
        
        Function_Return True
    End_Function

    Function EditorDataAsStringArray Returns String[]
        String[] asCode
        String sLine
        Integer iSize iCount 
        
        Get Line_Count to iSize   
        Decrement iSize
        For iCount from 0 to iSize
            Get Line iCount to sLine
            #IF (!@ > 200)
                Move (OemToUtf8(sLine)) to asCode[iCount]    
            #ELSE
                Move sLine to asCode[iCount]    
            #ENDIF            
        Loop                                  
        
        Function_Return asCode
    End_Function   

    Procedure JumpToSourceLine Integer iLine
        Handle hoEdit
        Get phoCodeMaxEditor to hoEdit    
        If (hoEdit <> 0) Begin
            Send Activate of hoEdit
            Send EditorMessage of hoEdit SCI_GOTOLINE iLine
        End
    End_Procedure
            
    Procedure LoadFile String sFileName
        Integer eStatus

        If (sFileName <> "") Begin
            Set psCodeFile to sFileName
            Send Delete_Data
            Get CM_OpenFile sFileName to eStatus
            Send FillFileTimeStamp sFileName // Update the filetime.  
            // Activate the Editor object(!) and view.
            Send Activate
        End
    End_Procedure   
    
    Procedure Request_Clear
        Send Delete_Data
    End_Procedure

    Function CharacterCount Returns Integer
        Integer iLineCount iStartPos iEndPos
        Integer iTotalCharacters

        Move 0 to iTotalCharacters
        Get EditorMessage SCI_GETLINECOUNT 0 0 to iLineCount
        If (iLineCount > 0) Begin
            Get EditorMessage SCI_POSITIONFROMLINE 0 0 to iStartPos
            Get EditorMessage SCI_GETLINEENDPOSITION (iLineCount - 1) 0 to iEndPos
            Get EditorMessage SCI_COUNTCHARACTERS iStartPos iEndPos to iTotalCharacters
        End

        Function_Return iTotalCharacters
    End_Function

    Procedure ApplyEditorOptions
        Forward Send ApplyEditorOptions
    End_Procedure

    Procedure FillFileTimeStamp String sFileName
        DateTime dtCurrentFileDateTime
        Get FileModTime sFileName  to dtCurrentFileDateTime
        Set pdtCurrentFileDateTime to dtCurrentFileDateTime
    End_Procedure

    // Returns the DateTime of the passed file name was modified, with seconds (only) precision.
    Function FileModTime String sFileName Returns DateTime
        Date dDate
        Integer iYY iHH iMM iSS
        Boolean bExists
        DateTime dtFileDateTime

        Move (NullDateTime()) to dtFileDateTime
        Get vFilePathExists sFileName to bExists
        If (bExists = True) Begin
            Get_File_Mod_Time sFileName to dDate iHH iMM iSS
            Move dDate            to dtFileDateTime
            Move (DateGetYear       (dtFileDateTime))      to iYY
            Move (DateSetYear       (dtFileDateTime, iYY)) to dtFileDateTime
            Move (DateSetHour       (dtFileDateTime, iHH)) to dtFileDateTime
            Move (DateSetMinute     (dtFileDateTime, iMM)) to dtFileDateTime
            Move (DateSetSecond     (dtFileDateTime, iSS)) to dtFileDateTime
            Move (DateSetMillisecond(dtFileDateTime, 0))   to dtFileDateTime
        End

        Function_Return dtFileDateTime
    End_Function

    Function IsFileTimeNewer String sFileName Returns Boolean
        Boolean bExists bIsNewer
        DateTime dtCurrentFileDateTime dtCompareFileDateTime

        Move False to bIsNewer
        Get vFilePathExists sFileName to bExists
        If (bExists = True) Begin
            Get pdtCurrentFileDateTime to dtCurrentFileDateTime
            Get FileModTime sFileName  to dtCompareFileDateTime
            Move (dtCompareFileDateTime > dtCurrentFileDateTime) to bIsNewer
        End
        Function_Return bIsNewer
    End_Function

    { MethodType=Property }
    Procedure Set piTabSize Integer iTabSize
        Send EditorMessage SCI_SETTABWIDTH iTabSize
        Set piTabSize of ghoEditorProperties to iTabSize
        Send SaveIni  of ghoEditorProperties
    End_Procedure

    { MethodType=Property }
    Function piTabSize Returns Integer
        Integer iTabSize
        Send EditorMessage SCI_GETTABWIDTH iTabSize
        Function_Return iTabSize
    End_Function

    Procedure UpdateStatusBar String sText Boolean bIdleTextOnly Integer iLi Integer iChrs
        Handle hoStatusBar
        Integer iLines iCharacters

        Move (StatusBar_Id(Self)) to hoStatusBar   
        If (num_arguments > 2) Begin
            Move iChrs to iCharacters
            If (iCharacters = 0) Begin
                Move 0 to iLines
            End                 
            Else Begin
                Move iLi to iLines
            End
            Set NumberOfEditorLines      of hoStatusBar to iLines
            Set NumberOfEditorCharacters of hoStatusBar to iCharacters
        End
        Else Begin
            If (bIdleTextOnly = True) Begin
                Set psIdleText of hoStatusBar to sText
                Set ActionText of hoStatusBar to ""
            End
            Else Begin
                Set ActionText of hoStatusBar to sText 
            End
        End
        Send PumpMsgQueue of Desktop
    End_Procedure    
    
    Procedure Changed_State Boolean bChanged
        Send EditorMessage SCI_GETMODIFY bChanged
    End_Procedure
    
    Function Changed_State Returns Boolean
        Boolean bChanged
        Get CM_IsModified to bChanged
        Function_Return bChanged        
    End_Function
    
    Procedure OnChange
        Boolean bChanged
        Get CM_IsModified to bChanged
        If (bChanged = True) Begin
            Set ActionText of (StatusBar_Id(Self))  to ""
        End
    End_Procedure

    // Used for checking if the file in editor has changed externally and
    // if so reload it.
    Procedure OnSetFocus
        Integer iRet iCurrentLine
        String  sMsg  sFileName
        Handle  hoMain
        Boolean bUserModified bHasChangedExternal bDoReloadFile
        Integer iLines iSize

        Get Line_Count to iLines
        Get CharacterCount to iSize
        Send UpdateStatusBar "" False iLines iSize
        Send OnSelChange
        Send OnOvertypeChange
        Move False to bDoReloadFile

        Get Main_Panel_Id to hoMain
        If (not(piInSetFocus(Self))) Begin // recursive protection
            Set piInSetFocus to True
            Get psCodeFile to sFileName
            If (sFileName = "") Begin
                Procedure_Return
            End
            Get IsFileTimeNewer sFileName to bHasChangedExternal
            Get CM_IsModified to bUserModified
            If (bHasChangedExternal and bUserModified) Begin
                If (bUserModified) Begin
                    Append sMsg "The file has been changed by another program.\n\n"
                End
                Append sMsg "Do you want to reload it?\n"
                If (bUserModified) Begin
                    Append sMsg "Pressing YES will discard any changes made.\n"
                End

                Get YesNo_Box sMsg (Label(hoMain)) to iRet
                If (iRet = MBR_Yes) Begin  
                    Move True to bDoReloadFile
                End
                Else Begin
                    Send FillFileTimeStamp sFileName // Update the file modified datetime.
                End
            End

            // If file has changed externally, but we didn't edit, then do not ask, just refresh
            If (bHasChangedExternal and bUserModified = False) Begin
                Get SC_LineCount to iRet
                If (iRet > 1) Begin
                    Move True to bDoReloadFile
                End
            End
            If (bDoReloadFile = True) Begin
                Move "The Editor file has been changed by another program.\n\n" to sMsg
                Append sMsg "Reload?\n"
                Get YesNo_Box sMsg (Label(hoMain)) to iRet
                If (iRet = MBR_Yes) Begin
                    Get CurrentLine to iCurrentLine
                    Get CM_OpenFile sFileName to iRet
                    Send EditorMessage SCI_SETSAVEPOINT
                    If (iCurrentLine <> 0) Begin
                        Send EditorMessage SCI_GOTOLINE iCurrentLine
                    End
                    Send FillFileTimeStamp sFileName // Update the file modified datetime.
                End
            End
            Set piInSetFocus to False
        End
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object

    End_Procedure

    Procedure OnFileDropped String sFilename Boolean bLast
        String sSWSFile    
        Boolean bLastFile
        
        Move False to bLastFile
        If (num_arguments = 2) Begin
            Move bLast to bLastFile
        End
        Forward Send OnFileDropped sFilename bLast
        If (bLast = True) Begin
            Get psSWSFile of ghoApplication to sSWSFile
            If (sSWSFile = "") Begin
                Send Info_Box "You need to select a workspace first."
                Procedure_Return
            End
            Send UpdateSourceFileNameDisplay of ghoApplication sFileName
            Send LoadFile sFilename
        End
    End_Procedure

End_Class
