Use cCJStandardMenuItemClasses.pkg
Use seq_chnl.pkg
Use cEditorHotKey_Mixin.pkg
Use cSciLexerRefactor.pkg
Use oEditorProperties.pkg 

Declare_Datafile FunctionsA

#IFNDEF C_CtrlShiftTab
    Define C_CtrlShiftTab for 7170
#ENDIF
Register_Object oOpenFolderMenuItem

Object oSciContextMenu is a cCJContextMenu
    Property Handle phoServedObject    0

    Object oSourceFileText_MenuItem is a cCJMenuItem
        Set psCaption to "Select Source File"
        Set psDescription to "Displays an Open File dialog to select a source file from (Ctrl+O)"
        Set psImage to "ActionOpen.ico"
        Set psShortcut to "Ctrl+O"

        Procedure OnExecute Variant vCommandBarControl
            Forward Send OnExecute vCommandBarControl
            Send Execute of (oOpenFolderMenuItem(ghoCommandBars))
        End_Procedure

        Function IsEnabled Returns Boolean
            Boolean bState
            String sSWSFile

            Move False to bState
            Get psSWSFile of ghoApplication to sSWSFile
            Move (sSWSFile <> "") to bState

            Function_Return bState
        End_Function

    End_Object

    Object oCutMenuItem is a cCJCutMenuItem
    End_Object

    Object oCopyMenuItem is a cCJCopyMenuItem
    End_Object

    Object oPasteMenuItem is a cCJPasteMenuItem
    End_Object

    Object oFindMenuItem is a cCJMenuItem
        Set pbControlBeginGroup to True
        Set psCaption to "&Find"
        Set psToolTip to "Find text"
        Set psDescription to "Find text in current file"
        Set psShortcut to "Ctrl+F"
        Set psImage to "ActionFind.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send CME_Find of (phoServedObject(Self))
        End_Procedure
    End_Object

    Object oFindNextMenuItem is a cCJMenuItem
        Set psCaption to "Find &Next"
        Set psToolTip to "Find next text"
        Set psDescription to "Find next text in current file"
        Set psShortcut to "F3"
        Set psImage to "ActionFindNext.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send CME_FindNext of (phoServedObject(Self))
        End_Procedure
    End_Object

    Object oFindPreviousMenuItem is a cCJMenuItem
        Set psCaption to "Find &Previous"
        Set psToolTip to "Find previous text"
        Set psDescription to "Find previous text in current file"
        Set psShortcut to "Shift+F3"
        Set psImage to "ActionFindPrevious.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send CME_FindPrevious of (phoServedObject(Self))
        End_Procedure
    End_Object

    Object oFindReplaceMenuItem is a cCJMenuItem
        Set psCaption to "Find &Replace"
        Set psToolTip to "Find Replace text"
        Set psDescription to "Find and replace text in current file"
        Set psShortcut to "Ctrl+Alt+F3"
        Set psImage to "ActionFindAndReplace.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send CME_FindReplace of (phoServedObject(Self))
        End_Procedure
    End_Object

    Object oGotoLineMenuItem is a cCJMenuItem
        Set pbControlBeginGroup to True
        Set psCaption to "Goto &Line"
        Set psToolTip to "Goto Line"
        Set psDescription to "Goto line in current file"
        Set psShortcut to "Ctrl+G"
        Set psImage to "ActionGoToLine.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send CME_GotoLine of (phoServedObject(Self))
        End_Procedure
    End_Object

    Object oSelectAllMenuItem is a cCJMenuItem
        Set psCaption to "Select &All"
        Set psToolTip to "Select All"
        Set psDescription to "Select All text in current file"
        Set psShortcut to "Ctrl+A"
        Set psImage to "ActionSelectAll.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send CME_SelectAll of (phoServedObject(Self))
        End_Procedure
    End_Object

    Object oUndoMenuItem is a cCJMenuItem
        Set psCaption to "Undo"
        Set psToolTip to "Undo"
        Set psDescription to "Undo the last editor action"
        Set psShortcut to "Ctrl+Z"
        Set psImage to "ActionUndo.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send CME_UndoAction of (phoServedObject(Self))
        End_Procedure
    End_Object

    Object oNormalizeCaseMenuItem is a cCJMenuItem
        Set psCaption to "Adjust Upper/Lowercase"
        Set psToolTip to "Adjust Upper/Lowercase"
        Set psDescription to "Normalize the case on all of the text in the current file"
        Set pbControlBeginGroup to True
        Set psImage to "ActionCasing.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send RefactorNormalizeCase of (phoServedObject(Self))
        End_Procedure
    End_Object

    Object oReIndentMenuItem is a cCJMenuItem
        Set psCaption to "Reindent code"
        Set psToolTip to "Reindent code"
        Set psDescription to "ReIndent all of the text in the current file"
        Set psImage to "ActionIndent.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send RefactorReIndent of (phoServedObject(Self))
        End_Procedure
    End_Object

    Object oDropSelfMenuItem is a cCJMenuItem
        Set psCaption to "Drop Self"
        Set psToolTip to "Drop Self"
        Set psDescription to "Refactoring drop self method"
        Set psImage to "ActionDrop.ico"

        Procedure OnExecute Variant vCommandBarControl
            Send RefactorDropSelf of (phoServedObject(Self))
        End_Procedure
    End_Object

End_Object

Class cScintillaRefactorEditor is a cSciLexerRefactor
    
    Import_Class_Protocol cEditorHotKey_Mixin

    Procedure Construct_Object
        Forward Send Construct_Object

        Set peAnchors to anAll 
        // Changed this to True as it is how the Studio works by default.
        Set pbFindDocumentStart to True
        
        Property Boolean piInSetFocus False
        Property DateTime pdtCurrentFileDateTime
        Property String psCodeFile

        Property Handle phoCodeMaxEditor   0
        Property Handle phoEditorEditView  0 // This is only needed in The Hammer where an editor view has also components such as a treeview on the left

        Set phoCodeMaxEditor     to Self
        Set Floating_Menu_Object to oSciContextMenu
        Set pbOemToAnsiMode      to False    // Don't do any ANSI/OEM Translation on load and save
        
        Send Define_cEditorHotKey_Mixin

        On_Key Key_Ctrl+Key_Tab Send Switch_Next_View
        On_Key C_CtrlShiftTab   Send Switch_Prior_View
        On_Key Key_Ctrl+Key_S   Send Request_Save
        
        On_Key Key_Ctrl+Key_F   Send CME_Find
        On_Key Key_F3           Send CME_FindNext
        On_Key Key_Shift+Key_F3 Send CME_FindPrevious   
        On_Key Key_Ctrl+Key_G   Send CME_GotoLine  
        On_Key Key_Ctrl+Key_Alt+Key_F3 Send CME_FindReplace  
    End_Procedure
    
//    Function RefactorSourceFileInEditor  String[] ByRef asSourceFile Returns Integer
//        Integer iFunctionID iCounter
//        Boolean bChanged bOK
//        String sFunctionName sParameter 
//        String[] asSourceFileNew 
//                                                              
//        Move False to Err
//        Move 0 to LastErr
//        Move False to bChanged      
//        Move 0 to iCounter
//        
//        Send UpdateStatusBar "Editor Refactoring Functions..." False
//        Get WriteDataToEditor asSourceFile to bOK
//        Send Activate
//        
//        Constraint_Set eEditor_Function Clear  
//        Constrained_Clear eq FunctionsA by Index.4
//        Constrain FunctionsA.Selected eq True
//        Constrain FunctionsA.Type eq eEditor_Function
//        Constrained_Find First FunctionsA by Index.4
//        
//        While (Found = True)
//            Move (Trim(FunctionsA.Parameter)) to sParameter
//            Move (Lowercase(Trim(FunctionsA.Function_Name))) to sFunctionName 
//            Move (Eval("get_" - (sFunctionName))) to iFunctionID             
//            If (sFunctionName = CS_EditorDropSelf) Begin
//                Send Stop_StatusPanel of ghoStatusPanel
//            End
//            Get iFunctionID of ghoRefactorFuncLib asSourceFile sParameter to bChanged
//            // We need to restart the status panel if function CS_EditorDropSelf was called,
//            // because it involves a popup dialog.
//            If (sFunctionName = CS_EditorDropSelf) Begin
//                Send Start_StatusPanel of ghoStatusPanel
//            End
//            If (bChanged = True) Begin
//                Increment iCounter
//            End
//            Constrained_Find Next
//        Loop
//            
//        Get EditorDataAsStringArray to asSourceFileNew
//        Move (not(IsSameArray(asSourceFileNew, asSourceFile))) to bChanged
//        If (bChanged = True) Begin
//            Move asSourceFileNew to asSourceFile
//        End
//        
//        // To not get an "Editor change" data loss message when exiting program.
//        Set Changed_State to False
//        Function_Return iCounter
//    End_Function
//
    Function ReadImageDataToStringArray Integer iImg Returns String[]
        Integer iChannel iCount
        String sTextValue sLine
        Boolean bSeqEof
        String[] asCode
        
        Move "" to sTextValue
        Move 0 to iCount
        
        Get Seq_New_Channel to iChannel
        If (iChannel = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
             Send Stop_box "No channel available. Function: 'ReadImageDataToStringArray'"
             Function_Return asCode
        End
        
        Send Delete_Data
        Direct_Input channel iChannel ("image: " + String(iImg))
        
        While (SeqEof = False)
            Readln channel iChannel sLine
            Move sLine to asCode[iCount]
            Increment iCount
        Loop
        Close_Input channel iChannel
        Send Seq_Release_Channel iChannel 
        Move (ResizeArray(asCode, (iCount -1))) to asCode
        
        Function_Return asCode
    End_Function
    
    Function ToggleScopeBlocks Returns Integer
        Integer iMode
        Get EditorMessage SCI_FOLDALL to iMode
        Function_Return iMode
    End_Function
    
    // Needed by the toolbar system.
    Procedure Request_Save
        Send SaveFile
    End_Procedure
    
    Procedure Help
       Delegate Send Help
    End_Procedure

    Procedure SaveFile
        Boolean bOK

        Send DispatchAnyKey
        Get WriteToDisk to bOK
        If (bOK = False) Begin
            Error DFERR_PROGRAM "An error occured and the file couldn't be saved properly."
        End
        Else Begin
            Set ActionText of (StatusBar_Id(Self))  to "Changes saved!"
        End
    End_Procedure
    
    // Helper function (to SaveFile)
    Function WriteToDisk Returns Boolean
        String sFileName
        Integer eResult

        Get psCodeFile to sFileName
        Get CM_SaveFile sFileName False to eResult
        Send FillFileTimeStamp sFileName // Update the filetime.

        Function_Return (eResult = CME_SUCCESS)
    End_Function

    Function WriteStringArrayToDisk String[] asCode Returns Boolean
        Boolean bIsUtf8
        String sFileName sLine
        Integer iSize iCount iCh

        Get Seq_New_Channel to iCh
        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Error DFERR_PROGRAM "No Channel Available for saving file"
            Function_Return False
        End

        Get psCodeFile to sFileName
        Move (SizeOfArray(asCode)) to iSize
        Decrement iSize
        
        Direct_Output channel iCh sFileName
        
        For iCount from 0 to iSize
            Move asCode[iCount] to sLine
            #IF (!@ > 200)
            Get pbUtf8Mode To bIsUtf8
            if (bIsUtf8=false) Begin
               Get Utf8ToEditorFormat sLine to sLine
            End    
            #ENDIF         
            If (iCount < iSize) Begin
                Writeln channel iCh sLine
            End
            Else Begin
                Write channel iCh sLine
            End
        Loop                

        Close_Output channel iCh
        Send Seq_Release_Channel iCh
        Function_Return (Err = False)
    End_Function

    Function WriteDataToEditor String[] asCode Returns Boolean
        Boolean bIsUtf8
        Integer iCount iSize iVoid
        String sLine
        
        Send Delete_Data
        Get CM_EnableCRLF True to iVoid

        Move (SizeOfArray(asCode)) to iSize
        Decrement iSize
        
        For iCount from 0 to iSize
            Move asCode[iCount] To sLine
            #IF (!@ > 200)
            Get pbUtf8Mode To bIsUtf8
            if (bIsUtf8=false) Begin
               Get Utf8ToEditorFormat sLine to sLine
            End    
            #ENDIF
            If (iCount < iSize) Begin
                Move (sLine + String(CS_CRLF)) to sLine
            End
            Send AppendText sLine
        Loop
        If (iSize >= 0) Begin
            // Must do to show content in editor:
            Send PumpMsgQueue of Desktop
        End
        Function_Return True
    End_Function

    Function EditorDataAsStringArray Returns String[]
        Boolean bIsUtf8
        String[] asCode
        String sLine
        Integer iSize iCount 
        
        Get Line_Count to iSize   
        Decrement iSize
        For iCount from 0 to iSize
            Get Line iCount to sLine
            Move sLine to asCode[iCount]    
        Loop                                  
        
        Function_Return asCode
    End_Function   

    Procedure JumpToSourceLine Integer iLine
        Handle hoEdit
        Get phoCodeMaxEditor to hoEdit    
        If (hoEdit <> 0) Begin
            Send Activate of hoEdit
            Send EditorMessage of hoEdit SCI_GOTOLINE iLine
        End
    End_Procedure
            
    Procedure LoadFile String sFileName
        Integer eStatus

        If (sFileName <> "") Begin
            Set psCodeFile to sFileName
            Send Delete_Data
            Get CM_OpenFile sFileName to eStatus
            Send FillFileTimeStamp sFileName // Update the filetime.  
            // Activate the Editor object(!) and view.
            Send Activate
        End
    End_Procedure   
    
    Procedure Request_Clear
        Send Delete_Data
    End_Procedure

    Function CharacterCount Returns Integer
        Integer iLineCount iStartPos iEndPos
        Integer iTotalCharacters

        Move 0 to iTotalCharacters
        Get EditorMessage SCI_GETLINECOUNT 0 0 to iLineCount
        If (iLineCount > 0) Begin
            Get EditorMessage SCI_POSITIONFROMLINE 0 0 to iStartPos
            Get EditorMessage SCI_GETLINEENDPOSITION (iLineCount - 1) 0 to iEndPos
            Get EditorMessage SCI_COUNTCHARACTERS iStartPos iEndPos to iTotalCharacters
        End

        Function_Return iTotalCharacters
    End_Function

    Procedure ApplyEditorOptions
        Forward Send ApplyEditorOptions
    End_Procedure

    Procedure FillFileTimeStamp String sFileName
        DateTime dtCurrentFileDateTime
        Get FileModTime sFileName  to dtCurrentFileDateTime
        Set pdtCurrentFileDateTime to dtCurrentFileDateTime
    End_Procedure

    // Returns the DateTime of the passed file name was modified, with seconds (only) precision.
    Function FileModTime String sFileName Returns DateTime
        Date dDate
        Integer iYY iHH iMM iSS
        Boolean bExists
        DateTime dtFileDateTime

        Move (NullDateTime()) to dtFileDateTime
        Get vFilePathExists sFileName to bExists
        If (bExists = True) Begin
            Get_File_Mod_Time sFileName to dDate iHH iMM iSS
            Move dDate            to dtFileDateTime
            Move (DateGetYear       (dtFileDateTime))      to iYY
            Move (DateSetYear       (dtFileDateTime, iYY)) to dtFileDateTime
            Move (DateSetHour       (dtFileDateTime, iHH)) to dtFileDateTime
            Move (DateSetMinute     (dtFileDateTime, iMM)) to dtFileDateTime
            Move (DateSetSecond     (dtFileDateTime, iSS)) to dtFileDateTime
            Move (DateSetMillisecond(dtFileDateTime, 0))   to dtFileDateTime
        End

        Function_Return dtFileDateTime
    End_Function

    Function IsFileTimeNewer String sFileName Returns Boolean
        Boolean bExists bIsNewer
        DateTime dtCurrentFileDateTime dtCompareFileDateTime

        Move False to bIsNewer
        Get vFilePathExists sFileName to bExists
        If (bExists = True) Begin
            Get pdtCurrentFileDateTime to dtCurrentFileDateTime
            Get FileModTime sFileName  to dtCompareFileDateTime
            Move (dtCompareFileDateTime > dtCurrentFileDateTime) to bIsNewer
        End
        Function_Return bIsNewer
    End_Function

    { MethodType=Property }
    Procedure Set piTabSize Integer iTabSize
        Send EditorMessage SCI_SETTABWIDTH iTabSize
        Set piTabSize of ghoEditorProperties to iTabSize
        Send SaveIni  of ghoEditorProperties
    End_Procedure

    { MethodType=Property }
    Function piTabSize Returns Integer
        Integer iTabSize
        Send EditorMessage SCI_GETTABWIDTH iTabSize
        Function_Return iTabSize
    End_Function

    Procedure UpdateStatusBar String sText Boolean bIdleTextOnly Integer iLi Integer iChrs
        Handle hoStatusBar
        Integer iLines iCharacters

        Move (StatusBar_Id(Self)) to hoStatusBar   
        If (num_arguments > 2) Begin
            Move iChrs to iCharacters
            If (iCharacters = 0) Begin
                Move 0 to iLines
            End                 
            Else Begin
                Move iLi to iLines
            End
            Set NumberOfEditorLines      of hoStatusBar to iLines
            Set NumberOfEditorCharacters of hoStatusBar to iCharacters
        End
        Else Begin
            If (bIdleTextOnly = True) Begin
                Set psIdleText of hoStatusBar to sText
                Set ActionText of hoStatusBar to ""
            End
            Else Begin
                Set ActionText of hoStatusBar to sText 
            End
        End
        Send PumpMsgQueue of Desktop
    End_Procedure    
    
    Procedure Changed_State Boolean bChanged
        Send EditorMessage SCI_GETMODIFY bChanged
    End_Procedure
    
    Function Changed_State Returns Boolean
        Boolean bChanged
        Get CM_IsModified to bChanged
        Function_Return bChanged        
    End_Function
    
    Procedure OnChange
        Boolean bChanged
        Get CM_IsModified to bChanged
        If (bChanged = True) Begin
            Set ActionText of (StatusBar_Id(Self))  to ""
        End
    End_Procedure

    // Used for checking if the file in editor has changed externally and
    // if so reload it.
    Procedure OnSetFocus
        Integer iRet iCurrentLine
        String  sMsg  sFileName
        Handle  hoMain
        Boolean bUserModified bHasChangedExternal bDoReloadFile
        Integer iLines iSize

        Get Line_Count to iLines
        Get CharacterCount to iSize
        Send UpdateStatusBar "" False iLines iSize
        Send OnSelChange
        Send OnOvertypeChange
        Move False to bDoReloadFile

        Get Main_Panel_Id to hoMain
        If (not(piInSetFocus(Self))) Begin // recursive protection
            Set piInSetFocus to True
            Get psCodeFile to sFileName
            If (sFileName = "") Begin
                Procedure_Return
            End
            Get IsFileTimeNewer sFileName to bHasChangedExternal
            Get CM_IsModified to bUserModified
            If (bHasChangedExternal and bUserModified) Begin
                If (bUserModified) Begin
                    Append sMsg "The file has been changed by another program.\n\n"
                End
                Append sMsg "Do you want to reload it?\n"
                If (bUserModified) Begin
                    Append sMsg "Pressing YES will discard any changes made.\n"
                End

                Get YesNo_Box sMsg (Label(hoMain)) to iRet
                If (iRet = MBR_Yes) Begin  
                    Move True to bDoReloadFile
                End
                Else Begin
                    Send FillFileTimeStamp sFileName // Update the file modified datetime.
                End
            End

            // If file has changed externally, but we didn't edit, then do not ask, just refresh
            If (bHasChangedExternal and bUserModified = False) Begin
                Get SC_LineCount to iRet
                If (iRet > 1) Begin
                    Move True to bDoReloadFile
                End
            End
            If (bDoReloadFile = True) Begin
                Move "The Editor file has been changed by another program.\n\n" to sMsg
                Append sMsg "Reload?\n"
                Get YesNo_Box sMsg (Label(hoMain)) to iRet
                If (iRet = MBR_Yes) Begin
                    Get CurrentLine to iCurrentLine
                    Get CM_OpenFile sFileName to iRet
                    Send EditorMessage SCI_SETSAVEPOINT
                    If (iCurrentLine <> 0) Begin
                        Send EditorMessage SCI_GOTOLINE iCurrentLine
                    End
                    Send FillFileTimeStamp sFileName // Update the file modified datetime.
                End
            End
            Set piInSetFocus to False
        End
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object

    End_Procedure

    Procedure OnFileDropped String sFilename
        String sSWSFile    
        Forward Send OnFileDropped sFilename
        Get psSWSFile of ghoApplication to sSWSFile
        If (sSWSFile = "") Begin
            Send Info_Box "You need to select a workspace first."
            Procedure_Return
        End
        Send OnFileNameUpdate of ghoApplication sFileName
        Set pbWorkspaceMode of ghoApplication to False
        Send LoadFile sFilename
    End_Procedure

    Procedure CME_Find
        Handle hoEdit
        Get phoCodeMaxEditor to hoEdit
        If (hoEdit) Begin
            Send Activate of hoEdit
            Send Find of hoEdit
        End
    End_Procedure

    Procedure CME_FindNext
        Handle hoEdit
        Get phoCodeMaxEditor to hoEdit
        If (hoEdit) Begin
            Send Activate of hoEdit
            Send FindNext of hoEdit
        End
    End_Procedure

    Procedure CME_FindPrevious
        Handle hoEdit
        Get phoCodeMaxEditor to hoEdit
        If (hoEdit) Begin
            Send Activate of hoEdit
            Send FindPrevious of hoEdit
        End
    End_Procedure

    Procedure CME_FindReplace
        Handle hoEdit
        Get phoCodeMaxEditor to hoEdit
        If (hoEdit) Begin
            Send Activate of hoEdit
            Send Replace of hoEdit
        End
    End_Procedure

    Procedure CME_GotoLine
        Handle hoEdit
        Get phoCodeMaxEditor to hoEdit
        If (hoEdit) Begin
            Send Activate of hoEdit
            Send GotoLine of hoEdit
        End
    End_Procedure

    Procedure CME_SelectAll
        Handle hoEdit
        Get phoCodeMaxEditor to hoEdit
        If (hoEdit) Begin
            Send Activate of hoEdit
            Send SelectAll of hoEdit
        End
    End_Procedure

    Procedure CME_UndoAction
        Handle hoEdit
        Integer iRet
        Get phoCodeMaxEditor to hoEdit
        If (hoEdit) Begin
            Send Activate of hoEdit
            Get CM_Undo to iRet
        End
    End_Procedure

    Function Can_UndoAction Returns Boolean
        Handle hoEdit
        Integer iRet
        Move 0 to iRet
        Get phoCodeMaxEditor to hoEdit
        If (hoEdit) Begin
            Get CM_CanUndo to iRet
        End
        Function_Return (iRet = 1)
    End_Function

    // Dummy methods, don't implement these as it will be a pain to keep in sync.
    // If any of these below will be implemented then that is best done in
    // coordinated effort with the Hammer.
    Procedure CAOpenFile
    End_Procedure
    Procedure CANewFile
    End_Procedure
    Procedure InsertHeaderGlobal
    End_Procedure
    Procedure InsertHeaderUser
    End_Procedure
    Procedure OpenFileUnderCursor
    End_Procedure
    Procedure InsertRevision
    End_Procedure
    Procedure InsertColorValue
    End_Procedure
    Procedure WindowSwitchToCodeView
    End_Procedure
    Procedure PAWindowSwitchToErrorView
    End_Procedure
    Procedure SyncCodeView
    End_Procedure
    Procedure CASwitchToNextView
    End_Procedure
    Procedure CASwitchToPreviousView
    End_Procedure
    Procedure ListCreator
    End_Procedure
    Procedure ListObjects
    End_Procedure
    Procedure ListVars
    End_Procedure
    Procedure ListKeys
    End_Procedure
    Procedure ListProcedures
    End_Procedure
    Procedure ListFunctions
    End_Procedure
    Procedure ListClasses
    End_Procedure
    Procedure ListIDETags
    End_Procedure
    Procedure Toggle_OnItem_AddItem
    End_Procedure
    Procedure ConvertCStructToVDF
    End_Procedure
    Procedure ConvertCDllCallToVDF
    End_Procedure
    Procedure ConvertVDFTypeToHandler
    End_Procedure
    Procedure MarkScopeBlock
    End_Procedure
    Procedure RefactorObjectNeighborhood
    End_Procedure
    Procedure GoToFirstIndentationMismatch
    End_Procedure
    Procedure RefactorMethodExtract
    End_Procedure

     // Toggle comments.
     // The logic checks if there is a comment for the first 2 characters at the first
     // line, if there is.. it will try to remove the comments
     // if there is not, then it will insert comments -in the first two positions- for
     // all selected lines.
    Procedure ToggleComment
        Boolean bAddComments
        Integer iStart iEnd iLine iRet iEndCol iStartCol iCurrLine
        String sVal sChk
        
        Append sChk "//"
        Get CM_GetSel False to iRet
        Get piSelEndCol    to iEndCol
        Get piSelStartCol  to iStartCol
        Get piSelStartLine to iStart
        Get piSelEndLine   to iEnd
        Move iEnd          to iCurrLine

        // Is selection at end line column 1? Don't include that line...
        If (iStart<>iEnd) Begin
            If (iEndCol=0) Decrement iEnd
        End
        //
        // Check the first line to see if we are going to add or remove comments
        Move False to bAddComments
        Get Value Item iStart to sVal
        If (Left(sVal,2) <> sChk) Begin
          Move True to bAddComments
        End
         
            // Run all lines and toggle the comment mark.
        Send EditorMessage SCI_BEGINUNDOACTION
        For iLine from iStart to iEnd
            Get value Item iLine to sVal
            If (bAddComments) Begin
              Move (Append(sChk,sVal)) to sVal
            End
            Else Begin
              If (Left(sVal,2) = sChk) Move (Replace(sChk,sVal,"")) to sVal
            End
            Set Value Item iLine to sVal
        Loop                                 
        Send EditorMessage SCI_ENDUNDOACTION
        // Keep the selection
        Move (CM_SetSel(Self,iStart,iStartCol,iCurrLine,iEndCol,False)) to iRet
        // This must be after the "CM_SetSel" line
        Send EditorMessage SCI_GOTOLINE iLine 
    End_Procedure

    Procedure SetAdjustments
        Boolean bOemToAnsiMode
        Boolean bUtf8Mode
        Integer hoIni iRet
        // Font Face
        String  sLanguage
        String  sFontData
        String  sFontTemp
        String  sFontFace
        Integer iFontSize
        Integer iCharSet
        //

        Move (CM_ENABLEGLOBALPROPS(Self,False))    to iRet

        Move ghoEditorProperties  to hoIni
        Move (CM_SetLineNumbering(Self,Low(piLineNumbering(hoIni)),Hi(piLineNumbering(hoIni)),Low(piLineNumbering(hoIni)))) to iRet
        Move (CM_EnableLeftMargin(Self,pbLeftMargin(hoIni)))            to iRet
        Get psLanguage of hoIni to sLanguage

        Move (CM_SetLanguage(Self,sLanguage))                           to iRet
        Move (CM_ShowScrollBar(Self,True,pbScrollBarH(hoIni)))          to iRet
        Move (CM_ShowScrollBar(Self,False,pbScrollBarV(hoIni)))         to iRet
        // Editor font face?
        Move (psFontFace(ghoEditorProperties))                          to sFontData
        If (sFontData="") Begin
            Move "11pt; 0; Courier New"                   to sFontData
        End
        // Font Size
        Move (Left(sFontData, Pos(";", sFontData)))                     to sFontTemp
        Move (Trim(Replace(sFontTemp, sFontData, "")))                  to sFontData
        Move (Trim(Replace("PT;", Uppercase(sFontTemp), "")))           to iFontSize
        // Code Page
        Move (Left(sFontData, Pos(";", sFontData)))                     to sFontTemp
        Move (Trim(Replace(sFontTemp, sFontData, "")))                  to sFontData
        Move (Trim(Replace(";", sFontTemp, "")))                        to iCharSet
        Get pbOemToAnsiMode of ghoEditorProperties to bOemToAnsiMode
        Get pbUtf8Mode of ghoEditorProperties to bUtf8Mode
        //
        If (bUtf8Mode) Begin
          Send EditorMessage SCI_SETCODEPAGE SC_CP_UTF8
          Move SC_CHARSET_ANSI to iCharSet
          Set pbOemToAnsiMode to False
          Set pbUtf8Mode      to True
        End
        Else Begin
          //
          Send EditorMessage SCI_SETCODEPAGE 0  // must tell scintilla to switch to single byte mode
          //
          Set pbUtf8Mode      to False
          Set pbOemToAnsiMode to bOemToAnsiMode
          If (bOemToAnsiMode) Begin
            If (iCharSet<=0) Begin
              Move SC_CHARSET_OEM to iCharSet
            End  
          End
        End
        // Font Face
        Move (Trim(sFontData))                                          to sFontFace
        //
        Send EditorMessage SCI_STYLESETFONT STYLE_DEFAULT (AddressOf(sFontFace))
        Send EditorMessage SCI_STYLESETSIZE STYLE_DEFAULT iFontSize
        Send EditorMessage SCI_STYLESETCHARACTERSET STYLE_DEFAULT iCharSet
        Send EditorMessage SCI_STYLESETSIZE STYLE_LINENUMBER (iFontSize-1) // Set font size
        //
        Set  pbShowMatchingBraces to (pbShowMatchingBraces(hoIni))
        If  (pbShowIndentGuides(hoIni)) Begin
            Send ShowIndentationGuides
        End
        Send SelectTillEndOfLine (pbSelectWholeLine(hoIni))

        Move (CM_EnableDragDrop(Self,pbDragDrop(hoIni)))                to iRet
        Move (CM_EnableColumnSel(Self,pbColumnSel(hoIni)))              to iRet
        Move (CM_SetAutoIndentMode(Self,piAutoIndentMode(hoIni)))       to iRet
        Move (CM_SetTabSize(Self,piTabSize(hoIni)))                     to iRet
        Move (CM_EnableTabExpand(Self,pbTabExpand(hoIni)))              to iRet
        Move (CM_EnableNormalizeCase(Self,pbNormalizeCase(hoIni)))      to iRet
        Move (CM_EnableSelBounds(Self,pbSelBounds(hoIni)))              to iRet
        Move (CM_EnableCaseSensitive(Self,pbCaseSensitive(hoIni)))      to iRet
        Move (CM_EnableWholeWord(Self,pbWholeWord(hoIni)))              to iRet
    End_Procedure

    Procedure SetLexer
        Boolean bInit
        Integer iRet
        Integer iLanguage
        Integer iLexer
        String  sKeywords sScopeKeywords1 sScopeKeywords2 sOperators
        String  sLanguage sLexerLang
        String  sHotKeys

        Get psLanguage of ghoEditorProperties  to sLanguage
        Move (CM_SetLanguage(Self,sLanguage))  to iRet
        Get EditorMessage SCI_GETLEXER 0 0     to iLexer
        Move (ZeroString(255)) to sLexerLang
        Get EditorMessage SCI_GETLEXERLANGUAGE 0 (AddressOf(sLexerLang)) to iRet
        Get FindLanguage    of ghoEditorProperties sLanguage    to iLanguage

        If (iLexer=SCLEX_DATAFLEX) Begin
            Get SCKeywords (psLanguages.szKeywords(ghoEditorProperties, iLanguage))         to sKeywords
            Get SCKeywords (psLanguages.szScopeKeywords1(ghoEditorProperties, iLanguage))   to sScopeKeywords1
            Get SCKeywords (psLanguages.szScopeKeywords2(ghoEditorProperties, iLanguage))   to sScopeKeywords2
            Get SCKeywords (psLanguages.szOperators(ghoEditorProperties,iLanguage))         to sOperators
            Move (Replaces("^",sOperators,"")) to sOperators // The ^ char is a wildcard match in scintilla, the result is EVERYTHING is an operator, so remove it before passing it, it is a hardcoded operator in scintilla.
            // Fill the arrays for normalizing case feature when typing
            Get InitializedLanguage of oNormalizeCase SCLEX_DATAFLEX to bInit
            If (bInit=False) Begin
                Send AddKeywords   of oNormalizeCase SCLEX_DATAFLEX sKeywords
                Send AddScopewords of oNormalizeCase SCLEX_DATAFLEX sScopeKeywords1
                Send AddScopewords of oNormalizeCase SCLEX_DATAFLEX sScopeKeywords2
            End
            // Supply the keywords/scope keywords in lower case as the lexer matches on lowercase characters
            Move (Lowercase(sKeywords)) to sKeywords
            Move (sKeywords+Character(0)) to sKeywords
            Move (Lowercase(sScopeKeywords1)) to sScopeKeywords1
            Move (Lowercase(sScopeKeywords2)) to sScopeKeywords2
            Move (Lowercase(sOperators))      to sOperators
            Send EditorMessage SCI_SETKEYWORDS 0 (AddressOf(sKeywords))         // language keywords
            If (sScopeKeywords1<>"" and sScopeKeywords2<>"") Begin
                Send EditorMessage SCI_SETKEYWORDS 1 (AddressOf(sScopeKeywords1)) // scope open
                Send EditorMessage SCI_SETKEYWORDS 2 (AddressOf(sScopeKeywords2)) // scope close
                Send EditorMessage SCI_SETKEYWORDS 3 (AddressOf(sOperators))      // operators
            End
            //
        End
        // Use shortcut keys as defined in hammer config codemaxedit.ini file.
        Send RegisterAllInternalCommands
        Send RegisterExtraCommands
        Get psEditorHotKeys of ghoEditorProperties to sHotKeys
        Get CMSetHotkeys sHotKeys  to iRet
    End_Procedure

    Function Line_Count Returns Integer
        Integer iCount
        Get SC_LineCount to iCount
        Function_Return iCount
    End_Function

    Function Line Integer iLine Returns String
        String sLine
        Get CM_GetLine iLine to sLine
        Function_Return sLine
    End_Function

    Procedure AppendText String sText
        Integer eSuccess
        Get CM_AddText sText to eSuccess
    End_Procedure

End_Class
