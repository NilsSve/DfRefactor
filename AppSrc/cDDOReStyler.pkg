// Copyright (c)  2014  KURANT Project
// All rights reserved.
//
// $FileName    : .\Hammer\AppSrc\DDOReStyler.src
// $ProjectName : The Hammer 2.0
// $Authors     : wil
// $Created     : 11.14.2014  14:21
//
// $Edited      : 09.21.2021 Nils Svedmyr. Refactored to a package for the "DFRefactor" project.
//
// $Type        : LGPL
//
// Contents:
//  Unfortunately the naming style of datadictionaries over time has not been constant.
//  The new style is
//    Object o<tablename>_DD is a c<TableName>Datadictionary
//  They also have a switch so you can keep on using the legacy style name which is
//    Object o<tablename>_DD is a <tablename>_Datadictionary
//
//  However before VDF12, the
//    Object <tableName>_DD is a <tablename>_Datadictionary
//
//  This caused tremendous headaches as due to the extra "o" we ended up with name clashes
//  all over the place. Copying old code into new views/dialogs simply breaks and if your
//  codebase has mixed styles then the compiler will not catch that.
//  A code nightmare.
//
//  This program allows you to switch between the following code styles:
//
//  <TableName>_DD              == eDDOldStyle
//  o<TableName>_DD             == eDDStudioStyle
//
//
// How this code works:
// 1. It scans your source file and for each file it will locate the datadictionary objects
//    These datadictionary objects are then stored in an array
// 2. We read the whole filelist into another array so that we know what table names can be
//    used.
// 3. The DDOs found in step 1) are classified against the filelist items and we determine
//    the DDO style used for the declared DDOs. DDOs that could be verified are labeled
//    on style used and marked as being verified.
// 4. We scan the source again and replace the verified DDOs with the style wanted.
// 5. Write the source out to disk (overwriting the original)
//
//
// Please note that if your source already contains unknown DD objects (eg. You copied old
// style code from another version of your appinto new style code) that this parser will
// not try to correct that. The starting point should be correct working code.
//
// Note if a detected DDO is in commented out source code then we will still replace it,
// this is to make sure uncommenting code doesn't break the source.
// Commented out DDO declarations are -not- detected.
//
// The following use cases are not supported by the DDRestyler:
//   - include files,
//   - source files with incorrect DDOs already in there
//       (eg. declare o<table>_DD but later on use <table>_DD)
//   - references to DDO's not declared in the source file (non autonomous usage)
//
//*****************************************************************************************
Use seq_chnl.pkg
Use vwin32fh.pkg
Use RefactorConstants.inc
Use cRefactorEngine.pkg
Use RefactorStatusPanel.pkg
Use WsGlobalFunctions.pkg

Declare_Datafile SysFile

Struct tFileList
    Integer iFileNum
    String  sRootName     // actual filename
    String  sDisplayName  // description
    String  sTable        // datadictionary name is based on sTable (see aliases)
End_Struct

Struct tDDO
    String  sDDO          // sDDO name
    Boolean bVerified     // sDDO name has been verified against filelist
    Integer eDDOStyle     // DDO naming style
    Integer iLine         // source line where the DDO is declared
    Integer iFileNum      // Not needed at this stage, but we got the data, so stick it in
    String  sTableName    // Just as easy to have
End_Struct

Class cDataFiles is a cObject
    Procedure Construct_Object
        Forward Send Construct_Object
        Property tFileList[] pFileList
    End_Procedure

    // Loops through the Filelist.cfg and enumerates all tables.
    Procedure EnumerateAllFiles
        Integer iFile iIndex 
        String sRoot sDisplay sTable
        tFileList[] aFilelist

        Move (ResizeArray(aFilelist,0)) to aFilelist
        Move 0 to iFile
        Move 0 to iIndex
        Repeat
            Get_Attribute DF_FILE_NEXT_USED of iFile to iFile
            If (iFile > 0) Begin
                Get_Attribute DF_FILE_ROOT_NAME    of iFile to sRoot
                Get_Attribute DF_FILE_DISPLAY_NAME of iFile to sDisplay
                Get_Attribute DF_FILE_LOGICAL_NAME of iFile to sTable
                Move iFile    to aFilelist[iIndex].iFileNum
                Move sRoot    to aFilelist[iIndex].sRootName
                Move sDisplay to aFilelist[iIndex].sDisplayName
                Move sTable   to aFilelist[iIndex].sTable
                Increment iIndex
            End
        Until (iFile = 0)
        
        Set pFileList to aFilelist
    End_Procedure

End_Class

Class cDDOReStyler is a cObject
    Procedure Construct_Object
        Forward Send Construct_Object
  
        Property String   psFileName  ""
        Property String[] pasSource
        Property tDDO[]   pDDObjects
        Property Boolean  pbStrict       True   // Only replace verified DDOs, non strict not supported atm (Search code if need)
        Property Integer  peDDOStyle eDDNewStyle
        Property Boolean  pbCamelCaseTableName True // For new tablename Camel Case the TableName in the object

        Property String psHomePath
        Property String[] pasAllFiles
        Property Integer piFileCount

        Object oDataFiles is a cDataFiles
        End_Object

    End_Procedure

    Function StartDDORestyler Returns Integer
        Boolean bOk bStop
        Integer iCount iSize 
        String[] asAllFiles 
        
        Set piFileCount to 0
        Get pasAllFiles to asAllFiles
        Move (SizeOfArray(asAllFiles)) to iSize
        Decrement iSize
        Set piPosition  of ghoProgressBar to 0
        Set piAdvanceBy of ghoProgressBar to 1
        Set piMaximum   of ghoProgressBar to (iSize + 1)

        For iCount from 0 to iSize
            Send RestyleDDObjects asAllFiles[iCount] (peDDOStyle(Self))
            If (Active_State(ghoStatusPanel) = True) Begin
                Send Update_StatusPanel of ghoStatusPanel ("File No:" * String(iCount + 1) * "of:" * String(iSize + 1))
                // We only check for "Cancel" once every new file.
                Get Cancel_Check of ghoRefactorEngine to bStop
                If (bStop = True) Begin
                    Function_Return eEngineUserCancel
                End
            End
        Loop
        
        Function_Return (piFileCount(Self))
    End_Function

    Procedure ReadFile String sFileName
        Integer iCh iLine
        String sLine
        String[] asSource

        Move 0 to iLine
        Move (ResizeArray(asSource, 0)) to asSource
        Get OpenInput sFileName to iCh
        If (iCh < 0) Begin
            Procedure_Return
        End
        
        Set psFileName to sFileName
        Repeat
            Readln channel iCh sLine
            If (not(SeqEof)) Begin
                Move (RTrim(sLine)) to asSource[iLine]
                Increment iLine
            End
        Until (SeqEof)
        Send CloseInput iCh
        Set pasSource to asSource
    End_Procedure

    Procedure WriteFile
        Boolean  bExists
        Integer  iCh iSize iCount
        String   sFileName
        String[] asSource

        Get psFileName to sFileName
        File_Exist sFileName bExists
        If (bExists = False) Begin
            Error DFERR_PROGRAM ("File not found:" * String(sFileName) * "WriteFile (cDDOReStyler)")
            Procedure_Return
        End
        Get pasSource to asSource
        Get OpenOutput sFileName to iCh
        If (iCh > 0) Begin
            Move (SizeOfArray(asSource)) to iSize
            Decrement iSize
            For iCount from 0 to iSize
                Writeln channel iCh asSource[iCount]
            Loop
            Send CloseOutput iCh
        End
    End_Procedure

    // Scans the whole file and locates the declared datadictionary objects based on that
    // the line will start with "Object" and ends with "_DataDictionary".
    //
    // The search is case insensitive, commented out source will be ignored.
    //
    // Example line that will be detected:
    //  Object oCustomer_DD is a Customer_DataDictionary
    //
    Procedure FindCurrentDDObjects
        Integer iCount iLine iPos iSpaceChars iDDO
        String  sLine sDDObject sNline   // normalized line, lowercase and trimmed
        String[] sSource
        tDDO[] DDObjects

        Move 0 to iDDO
        Move (ResizeArray(DDObjects, 0)) to DDObjects
        Get pasSource to sSource
        
        Move (SizeOfArray(sSource) -1) to iCount
        If (iCount >= 0) Begin
            For iLine from 0 to iCount
                Move sSource[iLine] to sLine
                Move (Lowercase(Trim(sLine))) to sNline
                If (Pos("object ", sNline) = 1) Begin
                    Move (Pos("_datadictionary", sNline)) to iPos
                    If (iPos > 0) Begin
                        Move (Replace("object ", sNline, "")) to sNline
                        // Space characters on the left? Count them
                        Move (Length(sNline) - (Length(Ltrim(sNline)))) to iSpaceChars
                        Move (Ltrim(sNline)) to sNline // Remove them
                        Move (Pos(" ", sNline)) to iPos
                        If (iPos <> 0) Begin
                            Move (Mid(Ltrim(sLine), (iPos -1), (8 + iSpaceChars))) to sDDObject
                            Move sDDObject  to DDObjects[iDDO].sDDO
                            Move iLine      to DDObjects[iDDO].iLine
                            Move False      to DDObjects[iDDO].bVerified
                            Move eDDUnknown to DDObjects[iDDO].eDDOStyle
                            Increment iDDO
                        End
                    End
                End
            Loop
        End
        
        Set pDDObjects to DDObjects
    End_Procedure

    // Helper function for comparing tablenames in the filelist
    //
    // Custom comparison function:
    //   Returns (GT) if struct value in first parameter > struct value in second parameter.
    //   Returns (LT) if struct value in first parameter < struct value in second parameter.
    //   Otherwise returns (EQ).
    Function CompareTableNames tFileList  List1 tFileList List2 Returns Integer
        Move (Lowercase(List1.sTable)) to List1.sTable
        Move (Lowercase(List2.sTable)) to List2.sTable
        If (List1.sTable > List2.sTable) Begin
            Function_Return (GT)
        End
        Else If (List1.sTable < List2.sTable) Begin
            Function_Return (LT)
        End
        Function_Return (EQ)
    End_Function

    // Looks at the DD Objects found in the source and
    // tests them against the filelist plus determines the type
    Procedure ClassifyDDObjects
        Boolean bHasObjectPrefix bHasDDPostfix bHasDataDictionaryPostfix
        Integer iListSize iCount iDDO iFile
        String sDDO sTableName sTableNameO // exception if tablename actually starts with letter O
        tDDO[] DDObjects
        tFileList SearchFile
        tFileList[] FileList

        Send EnumerateAllFiles of oDataFiles // not entirely optimal to run this in each source file but meh
        Get pFileList of oDataFiles    to FileList
        Move (SizeOfArray(FileList)-1) to iListSize
        Get pDDObjects to DDObjects
        Move (SizeOfArray(DDObjects)-1) to iCount
        
        If (iListSize >= 0 and iCount >= 0) Begin
            For iDDO from 0 to iCount
                Move False to bHasObjectPrefix
                Move False to bHasDDPostfix
                Move False to bHasDataDictionaryPostfix
                Move ""    to sTableNameO
                Move DDObjects[iDDO].sDDO to sDDO
                Move (Trim(sDDO)) to sTableName
                If (sTableName<>"") Begin
                    If (Lowercase(Left(sTableName, 1)) = "o") Begin
                        Move True to bHasObjectPrefix
                        Move (Replace(Mid(sTableName, 1, 1), sTableName, "")) to sTableName
                        Move (Trim(sDDO)) to sTableNameO // What if tablename actually starts with a letter "o" ?
                    End
                    If (Lowercase(Right(sTableName, 3)) = "_dd") Begin
                        Move True to bHasDDPostFix
                        Move (Left(sTableName,Length(sTableName) -3)) to sTableName
                        If (sTableNameO <> "") Begin
                            Move (Left(sTableNameO,Length(sTableNameO) -3)) to sTableNameO
                        End
                    End
                    Else If (Lowercase(Right(sTableName, 15)) = "_datadictionary") Begin
                        Move True to bHasDataDictionaryPostFix
                        Move (Left(sTableName, Length(sTableName) -15)) to sTableName
                        If (sTableNameO <> "") Begin
                            Move (Left(sTableNameO,Length(sTableNameO) -15)) to sTableNameO
                        End
                    End
                    Move sTableName to SearchFile.sTable
                    Move (SearchArray(SearchFile,FileList, Self, (RefFunc(CompareTableNames)) )) to iFile
                    If (iFile >- 1) Begin
                        Move True to DDObjects[iDDO].bVerified
                        Move FileList[iFile].iFileNum to DDObjects[iDDO].iFileNum
                        Move FileList[iFile].sTable   to DDObjects[iDDO].sTableName
                    End
                    Else If (sTableNameO <> "") Begin
                        Move sTableNameO to SearchFile.sTable
                        Move (SearchArray(SearchFile,FileList, Self, (RefFunc(CompareTableNames)) )) to iFile
                        If (iFile >- 1) Begin
                            Move False to bHasObjectPrefix
                            Move True  to DDObjects[iDDO].bVerified
                            Move FileList[iFile].iFileNum to DDObjects[iDDO].iFileNum
                            Move FileList[iFile].sTable   to DDObjects[iDDO].sTableName
                        End
                    End
                    If (bHasObjectPrefix = False and bHasDDPostfix) Begin
                        Move eDDOldStyle to DDObjects[iDDO].eDDOStyle
                    End
                    Else If (bHasObjectPrefix) Begin
                        If (bHasDDPostfix) Begin
                            Move eDDStudioStyle to DDObjects[iDDO].eDDOStyle
                        End
                    End
                End
            Loop
            Set pDDObjects to DDObjects
        End
    End_Procedure

    Function NewStyleName String sTableName Integer eNewStyle Returns String
        String  sDDStyle
        Boolean bCamelCase

        Get pbCamelCaseTableName to bCamelCase
        If (bCamelCase) Begin
            // Camel Case makes the whole tablename lowercase except for the first Letter
            Move (lowercase(sTableName)) to sTableName
            Move (Overstrike(Uppercase(Left(sTableName,1)),sTableName,1)) to sTableName
        End

        Case Begin
            Case (eNewStyle = eDDOldStyle)
                Move (sTableName + "_DD") to sDDStyle
                Case Break
            Case (eNewStyle = eDDStudioStyle)
                Move ("o" + sTableName + "_DD") to sDDStyle
                Case Break
            Case (eNewStyle = eDDNewStyle)
                Move ("o" + sTableName + "_DD") to sDDStyle
                Case Break
            Case Else
                Error DFErr_Program ("Unexpected error new style" * Trim(eNewStyle) * "is undefined.")
        Case End
        Function_Return sDDStyle
    End_Function

    Procedure ApplyNewStyleForTable tDDO DDObject
        Boolean bUpdated
        Integer eNewStyle eOldStyle iCount iLine iPos iLen
        String sLine sNline sNOldDDName sNewDDName
        String[] asSource

        Get peDDOStyle to eNewStyle
        Move DDObject.eDDOStyle to eOldStyle
        If (eNewStyle <> eOldStyle) Begin
            Get pasSource to asSource
            Move (Lowercase(DDObject.sDDO)) to sNOldDDName
            Move (Length(sNOldDDName))      to iLen
            Get NewStyleName DDObject.sTableName eNewStyle to sNewDDName
            Move (SizeOfArray(asSource) -1)  to iCount
            
            If (iCount >= 0) Begin
                For iLine from 0 to iCount
                    Move False to bUpdated
                    Move asSource[iLine] to sLine
                    
                    // End of line happens, see Set DDO_Server To <table>_DD
                    Move (sLine + " ") to sLine
                    Move (Lowercase(sLine)) to sNline
                    // Valid separate characters are: " ",",","(",")", EOL
                    // The DDO objects are _never_ at the start of the line
                    Move (Replaces(",", sNline, " ")) to sNline
                    Move (Replaces("(", sNline, " ")) to sNline
                    Move (Replaces(")", sNline, " ")) to sNline

                    // Only one type of replacement left, easy testing :)
                    Move (Pos(" " + sNOldDDName + " ", sNline)) to iPos
                    While (iPos <> 0)
                        Move True to bUpdated
                        Move (Replace(" " + sNOldDDName + " ", sNline, " " + sNewDDName + " ")) to sNline
                        // Don't know correct case in the actual line, use remove+insert
                        // Can't use replace on the real line as it will end up replacing replaced
                        Move (Remove(sLine, (iPos +1), iLen)) to sLine
                        Move (Insert(sNewDDName, sLine, (iPos +1))) to sLine

                        Move (Pos(" " + sNOldDDName + " ", sNline)) to iPos
                    Loop
                    If (bUpdated) Begin
                        Move (RTrim(sLine)) to asSource[iLine]
                    End
                Loop
                Set pasSource to asSource
            End
        End
    End_Procedure

    Function ApplyNewStyle Returns Integer
        Boolean bStrict bReplace
        Integer iFile iCount eStyle iFileCount
        String  sFileName
        tDDO[]  DDObjects

        Move 0 to iFileCount
        Get peDDOStyle to eStyle              

        If (eStyle <> eDDUnknown) Begin
            Get pbStrict to bStrict   // Default is to only rename DDO's that exist in filelist
            Get ParseFileName (psFileName(Self)) to sFileName
            Get pDDObjects to DDObjects
            Move (SizeOfArray(DDObjects) - 1) to iCount
            
            If (iCount >= 0) Begin
                For iFile from 0 to iCount
                    Move False to bReplace
                    If (bStrict) Begin
                        If (DDObjects[iFile].bVerified=True) Begin
                            Move True to bReplace
                        End
                        Else Begin
                            Error DFErr_Program ("DDO" * DDObjects[iFile].sDDO * "was not found in the filelist. File" * sFileName)
                        End
                    End
                    Else Begin
                        // if you want to do non strict, you need to fill in ddobject.sTableName still!
                        Move True to bReplace
                    End
                    If (DDObjects[iFile].eDDOStyle = eDDUnknown) Begin
                        Move False to bReplace
                        Error DFErr_Program ("DDO" * DDObjects[iFile].sDDO * "style is not recognized. File" * sFileName)
                    End
                    If (DDObjects[iFile].eDDOStyle = eStyle) Begin
                        Move False to bReplace
                        Error DFErr_Program ("DDO" * DDObjects[iFile].sDDO * "style already correct. File" * sFileName)
                    End
                    If (bReplace) Begin
                        Send ApplyNewStyleForTable DDObjects[iFile]
                        Increment iFileCount
                    End
                Loop
            End
        End     
        Function_Return iFileCount
    End_Function

    // Code that handles the restyle on the DD Object in the source filename supplied
    // and changes it to the new style eDDStyle
    Procedure RestyleDDObjects String sFileName Integer eDDStyle
        Integer iFileCount iFileCountTot
        Send ReadFile sFilename
        Send FindCurrentDDObjects
        Send ClassifyDDObjects
        Set peDDOStyle to eDDStyle
        Get ApplyNewStyle to iFileCount
        Get piFileCount to iFileCountTot
        Set piFileCount to (iFileCount + iFileCountTot)
        If (pbReadOnly(ghoRefactorFuncLib) = False) Begin
            Send WriteFile
        End
    End_Procedure

End_Class
