// Original work by Sean Bamforth, APG.
// Adapted to this project by Nils Svedmyr, RDC Tools International
// 2023-11-19 Changed from BusinessProcess to cObject as we dynamically instantiate this
// class from the cRefactorFuncLib class, which already uses a BusinessProcess.
//
Use cRefactorApplication.pkg
Use vWin32fh.pkg
Use RefactorConstants.inc

Define CS_UnusedSourceLogFile for "UnusedSourceFiles.txt"

Struct tUnusedSourceFiles
    String sUsedPackageName
    String sFileName
    String sPath
    Integer iRow
End_Struct

Class cUnusedSourceFiles is a cObject

    Procedure Construct_Object
        Forward Send Construct_Object
        
        Property String psHomePath
        Property String psLogFile
        Property String[] pasAllFiles
        Property Integer piNoOfUnusedSourceFiles 0
        Property Boolean pbOK True
        //
        // Return array:
        // ToDo: We probably don't need this.
        // tUnusedSourceFiles[] pasUnusedSource
    End_Procedure

    Function FilesAsStructArray String[] asFiles Returns tUnusedSourceFiles[]
        tUnusedSourceFiles[] asUnusedSource
        Integer iSize iCount
        String sFolder sFullFileName sFileName

        Move (SizeOfArray(asFiles)) to iSize
        Decrement iSize
        For iCount From 0 to iSize
            Move asFiles[iCount] to sFullFileName
            Get ParseFolderName sFullFileName to sFolder
            Get ParseFileName   sFullFileName to sFileName
            Move sFolder   to asUnusedSource[iCount].sPath
            Move sFilename to asUnusedSource[iCount].sFileName
        Loop

        Function_Return asUnusedSource
    End_Function

    Function IsUseOrIncludeLine String sInp Returns Boolean
        Boolean bOK

        Move False to bOK
        Move (Lowercase(sInp)) to sInp
        Get StripComment sInp  to sInp
        Move (Trim(sInp)) to sInp

        If ((Pos("use ", sInp)) = 1) Begin
            Move True to bOK
        End
        If ((Pos("#include ", sInp)) = 1) Begin
            Move True to bOK
        End                   
        // Hardcoded exception for the LoginEncryption.pkg file(!). It should never be removed.
        If (lowercase(sInp) contains "loginencryption.pkg") Begin
            Move False to bOK
        End
        Function_Return bOK
    End_Function

    Function StripComment String sLine Returns String
        Integer iPos

        Move (Pos(CS_CommentSymbol, sLine)) to iPos
        If (iPos > 0) Begin
            Move (Left(sLine, iPos - 1)) to sLine
        End
        Function_Return sLine
    End_Function

    // Note: The function adds a ".pkg" to the package name if no extension has been specifieds in the source code.
    Function ExtractPackageName String sLine Returns String
        Integer iPos

        Move (Trim(Lowercase(sLine))) to sLine
        Get StripComment sLine to sLine
        Move (Pos("#include ", sLine)) to iPos
        If (iPos = 1) Begin
            Move (Mid(sLine, CI_EOL, (iPos + 8))) to sLine
        End
        Move (Pos("use ", sLine)) to iPos
        If (iPos = 1) Begin
            Move (Mid(sLine, CI_EOL, (iPos + 3))) to sLine
        End
        Move (Trim(sLine)) to sLine
        If (not(sLine contains ".")) Begin
            Move (sLine + ".pkg") to sLine
        End

        Move (Pos(CS_DirSeparator, sLine)) to iPos
        If (iPos <> 0) Begin
            Get ParseFileName sLine to sLine
        End

        Function_Return sLine
    End_Function

    Function ReadSourceFile String sFilename Returns String[]
        Integer iCh iFileSize iCount
        String[] asFile

        Get Seq_New_Channel to iCh
        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin 
            Error "No Channel Available for Process: Procedure 'ReadSourceFile (cUnusedSourceFiles)'"            
            Function_Return asFile
        End

        Move 0 to iCount
        Get vWin32_APIFileSize sFilename to iFileSize
        Move (ResizeArray(asFile, iFileSize)) to asFile

        Direct_Input channel iCh ("binary:" + sFilename)
        While (SeqEof = False)
            Readln channel iCh asFile[iCount]
            Increment iCount
        Loop
        Close_Input channel iCh
        Send Seq_Release_Channel iCh

        Move (ResizeArray(asFile, iCount)) to asFile
        Function_Return asFile
    End_Function

    Function SingleFileUsedPackages String sFullFilename Returns tUnusedSourceFiles[]
        tUnusedSourceFiles[] asRetVal
        String[] asFile
        String sLine sPath sFilename sPackageName sSourceLine
        Integer iItem iCount iSize
        Boolean bOK

        Move 0 to iItem
        Get ReadSourceFile sFullFilename to asFile
        Move (SizeOfArray(asFile)) to iSize
        If (iSize = 0) Begin
            Function_Return asRetVal
        End

        Get ParseFolderName sFullFilename  to sPath
        Get ParseFileName   sFullFilename  to sFilename
        Set Title_Text of ghoStatusPanel   to ("Scanning for 'Use':" * String(sPath))
        Set Message_Text of ghoStatusPanel to ("in file:" * String(sFilename))
        Decrement iSize
        For iCount from 0 to iSize
            Move asFile[iCount] to sLine
            Move (Lowercase(sLine)) to sLine
            Move (Trim(sLine)) to sSourceLine
            If (sSourceLine <> "") Begin
                Get IsUseOrIncludeLine sLine to bOK
                If (bOK = True) Begin
                    Get ExtractPackageName sLine to sPackageName
                    Move sPackageName to asRetVal[iItem].sUsedPackageName
                    Move sPath        to asRetVal[iItem].sPath
                    Move sFilename    to asRetVal[iItem].sFileName
                    Move iCount       to asRetVal[iItem].iRow
                    Increment iItem
                End
            End
        Loop

        Set Title_Text   of ghoStatusPanel to ""
        Set Message_Text of ghoStatusPanel to ""

        Function_Return asRetVal
    End_Function

    Function IncludeOrUseFile String sLine Returns String
        Integer iPos

        Move (lowercase(sLine)) to sLine
        Move (Replace("#include ", sLine, "use ")) to sLine

        Move (Pos("use ",sLine)) to iPos
        If (iPos = 0) Begin
            Function_Return ""
        End

        Move (Mid(sLine, CI_EOL, (iPos + 4))) to sLine
        Move (Trim(sLine)) to sLine
        If ((Pos(".", sLine)) = 0) Begin
            Append sLine ".pkg"
        End

        Function_Return sLine
    End_Function

    //    Function RemoveStructArrayDuplicates tUnusedSourceFiles[] asUsedSourceFiles Returns tUnusedSourceFiles[]
    //        tUnusedSourceFiles[] asNoDuplicates
    //        Integer iSize iCount iItem
    //        String sUsedPackageName sUsedPackageNameCompare
    //
    //        Move 0 to iItem
    //        Move (SortArray(asUsedSourceFiles))   to asUsedSourceFiles
    //        Move (SizeOfArray(asUsedSourceFiles)) to iSize
    //        Decrement iSize
    //        For iCount from 0 to iSize
    //            Move asUsedSourceFiles[iCount].sUsedPackageName to sUsedPackageName
    //            Move asNoDuplicates[iItem].sUsedPackageName     to sUsedPackageNameCompare
    //            If (Lowercase(sUsedPackageName) <> Lowercase(sUsedPackageNameCompare)) Begin
    //                Move asUsedSourceFiles[iCount].iRow         to asNoDuplicates[iItem].iRow
    //                Move asUsedSourceFiles[iCount].sFileName    to asNoDuplicates[iItem].sFileName
    //                Move asUsedSourceFiles[iCount].sPath        to asNoDuplicates[iItem].sPath
    //                Move sUsedPackageName                       to asNoDuplicates[iItem].sUsedPackageName
    //                Increment iItem
    //            End
    //        Loop
    //
    //        Function_Return asNoDuplicates
    //    End_Function

    // Note: Only uniqely identifed package files are returned in the struct array.
    // All duplicates have been removed.
    Function UsedPackageFiles tUnusedSourceFiles[] asSourceAllFiles Returns tUnusedSourceFiles[]
        tUnusedSourceFiles[] asSingleFile asUsedSourceFiles
        Integer iCount iSize

        Move (SizeOfArray(asSourceAllFiles)) to iSize
        Decrement iSize
        For iCount From 0 to iSize
            Get SingleFileUsedPackages (asSourceAllFiles[iCount].sPath + String(asSourceAllFiles[iCount].sFileName)) to asSingleFile
            If (SizeOfArray(asSingleFile) <> 0) Begin
                Move (AppendArray(asUsedSourceFiles, asSingleFile)) to asUsedSourceFiles
            End
        Loop

        // It doesn't make any time difference if duplicates are removed or not.
        //        Get RemoveStructArrayDuplicates asUsedSourceFiles to asUsedSourceFiles

        Function_Return asUsedSourceFiles
    End_Function

    Function UnusedPackages tUnusedSourceFiles[] asUsedFiles tUnusedSourceFiles[] asAllFiles Returns tUnusedSourceFiles[]
        Integer iCount iSize iIndex iItem
        String sFilename sExt
        tUnusedSourceFiles[] aUnusedSource
        tUnusedSourceFiles UsedFile

        Move 0 to iItem
        Move (SortArray(asUsedFiles))  to asUsedFiles
        Move (SizeOfArray(asAllFiles)) to iSize
        Decrement iSize
        
        If (SizeOfArray(asUsedFiles) <> 0) Begin
            For iCount from 0 to iSize
                Move asAllFiles[iCount].sFileName to sFilename
                Move (Lowercase(sFilename))       to sFilename
                Move sFilename                    to UsedFile.sUsedPackageName
                Get ParseFileExtension sFilename  to sExt
    
                If (Lowercase(sExt) <> "src") Begin
                    Move (SearchArray(UsedFile, asUsedFiles)) to iIndex
                    If (iIndex = -1) Begin                                      
                        // Fix for Bug #182 "LoginEncryptionKey.inc" should never be listed as an unused source file.
                        If (Lowercase(asAllFiles[iCount].sFileName) <> "loginencryptionkey.inc") Begin
                            Move asAllFiles[iCount].sFileName to aUnusedSource[iItem].sFileName
                            Move asAllFiles[iCount].sPath     to aUnusedSource[iItem].sPath
                            Increment iItem
                        End
                    End
                End
            Loop
        End

        Function_Return aUnusedSource
    End_Function

    // *** MAIN INTERFACE MESSAGE ***
    Function FindUnusedSourceFiles String[] asFiles Returns Integer
        String sHomePath
        Integer iFiles
        
        Get psHomePath of ghoApplication to sHomePath
        Set pasAllFiles to asFiles
        Set psHomePath to sHomePath
        Set psLogFile to (sHomePath + CS_BackupFolder + CS_DirSeparator + CS_UnusedSourceLogFile)
        
        Send RunUnusedSourceFiles    

        Get piNoOfUnusedSourceFiles to iFiles
        Function_Return iFiles
    End_Function
    
    Procedure RunUnusedSourceFiles
        String[] asFiles  
        String sHomePath
        tUnusedSourceFiles[] asAllSourceFiles asUsedFiles asUnusedSource
        Integer iCh iSize iCount

        Get psHomePath to sHomePath
        Get pasAllFiles                                 to asFiles 
        Get FilesAsStructArray asFiles                  to asAllSourceFiles
        Get UsedPackageFiles asAllSourceFiles           to asUsedFiles
        Get UnusedPackages asUsedFiles asAllSourceFiles to asUnusedSource
        Set piNoOfUnusedSourceFiles to (SizeOfArray(asUnusedSource))

        Get Seq_New_Channel to iCh
        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
            Set pbOK to False
            Error "No channel available for writing Unused Source Code. Procedure: 'OnProcess' (cUnusedSourceFiles)"
            Procedure_Return
        End

        Move (SizeOfArray(asUnusedSource)) to iSize
        If (iSize <> 0) Begin
            Decrement iSize
            Get vFolderFormat sHomePath to sHomePath

            Direct_Output channel iCh (psLogFile(Self))
            For iCount from 0 to iSize
                Writeln channel iCh (asUnusedSource[iCount].sPath + String(asUnusedSource[iCount].sFileName))
            Loop

            Close_Output channel iCh
            Send Seq_Release_Channel iCh
        End
        Set pbOK to True   
        
        // ToDo: We probably don't need this.
//        Set pasUnusedSource to asUnusedSource
    End_Procedure
    
    Function ReadUnusedSourceLogFile Returns String[]
        String sFileName sLine sHomePath
        tUnusedSourceFiles[] asUnusedSource
        Boolean bLogFileExists bExists
        Integer iCh iCount

        Get psHomePath to sHomePath
        Get vFolderFormat sHomePath to sHomePath
        Move (sHomePath + CS_BackupFolder + CS_DirSeparator + CS_UnusedSourceLogFile) to sFileName
        Get vFilePathExists sFileName to bLogFileExists
        If (bLogFileExists = False) Begin
            Send Info_Box ("Can't find the log file:" * CS_UnusedSourceLogFile)
            Procedure_Return
        End

        Send Cursor_Wait of Cursor_Control
        Direct_Input channel iCh sFileName
        While (SeqEof = False)
            Readln channel iCh sLine
            Get vFilePathExists sLine to bExists
            If (bExists = True) Begin
                Get ParseFolderName sLine to asUnusedSource[iCount].sPath
                Get ParseFileName   sLine to asUnusedSource[iCount].sFileName
                Increment iCount
            End
        Loop
        Send Cursor_Ready of Cursor_Control

        Function_Return asUnusedSource        
    End_Function

End_Class
