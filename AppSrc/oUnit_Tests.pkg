Use DFUnit\Fixturing\Fixture.pkg
Use RefactorConstants.h.pkg

Register_Function RestylelDDOs String[] ByRef asFiles String sParameter Returns Integer

Object oRefactorFuncLib_Tests is a cTestFixture
    Set psFunctionName to "Refactor FuncLib Fixture Object"

    Use oRefactorFuncLib.pkg

        Procedure Setup
        End_Procedure

        // Reinitialize base class properties for each cTestFixture procedure call.
        Procedure TearDown
            Send _InitializeFuncLib of ghoRefactorFuncLib
        End_Procedure

    // *** cTestFixture objects below: ***
    //
    Object oChangeCalcToMoveStatement is a cTestFixture
        Set psFunctionName to "ChangeCalcToMoveStatement"

        {Published = True}
        { Description = "Changes: 'Calc (iA * iB) to iC' to 'Move (iA * iB) to iC'" }
        Procedure ChangeCalcToMoveStatement_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Calc (iA * iB) to iC' to sLine
            Move '  Move (iA * iB) to iC' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeCalcToMoveStatement of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeCalcToMoveStatement_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    MoveInt (iA * iB) to iC' to sLine
            Move '    Move (iA * iB) to iC' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeCalcToMoveStatement of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeCalcToMoveStatement_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    MoveNum (nA * nB) to nC' to sLine
            Move '    Move (nA * nB) to nC' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeCalcToMoveStatement of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeCalcToMoveStatement_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    MoveReal (rA * rB) to rC' to sLine
            Move '    Move (rA * rB) to rC' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeCalcToMoveStatement of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeCalcToMoveStatement_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    MoveStr ("Yes" * "and") to sC' to sLine
            Move '    Move ("Yes" * "and") to sC' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeCalcToMoveStatement of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeCurrent_ObjectToSelf is a cTestFixture
        Set psFunctionName to "ChangeCurrent_ObjectToSelf"

        {Published = True}
        Procedure ChangeCurrent_ObjectToSelf_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (piCurrentRow(Current_Object)) to iRow' to sLine
            Move 'Move (piCurrentRow(Self)) to iRow' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeCurrent_ObjectToSelf of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeCurrent_ObjectToSelf_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (piCurrentRow(Current_Object)) to (phoTestHandle(Current_Object))' to sLine
            Move 'Move (piCurrentRow(Self)) to (phoTestHandle(Self))' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeCurrent_ObjectToSelf of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeCurrent_ObjectToSelf_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    Move OG_Current_Object to WindowIndex // not current_object' to sLine
            Move '    Move OG_Current_Object to WindowIndex // not current_object' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeCurrent_ObjectToSelf of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeDfTrueDfFalse is a cTestFixture
        Set psFunctionName to "ChangeDfTrueDfFalse"

        {Published = True}
        Procedure ChangeDfTrueDfFalse_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move DFTrue to Found' to sLine
            Move 'Move True to Found' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeDfTrueDfFalse of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeDfTrueDfFalse_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((Left(sRow,1)) ne "#") Move dfFalse to bRename' to sLine
            Move 'If ((Left(sRow,1)) ne "#") Move False to bRename' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeDfTrueDfFalse of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeGetAddress is a cTestFixture
        Set psFunctionName to "ChangeGetAddress"

        {Published = True}
        Procedure GetAddress_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    GetAddress of sString to pMyPointer" to sLine
            Move "    Move (AddressOf(sString)) to pMyPointer" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure GetAddress_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Function GetAddress Returns String" to sLine
            Move " Function GetAddress Returns String" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure GetAddress_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Entry_Item (GetAddress(oCustomer_DD))" to sLine
            Move " Entry_Item (GetAddress(oCustomer_DD))" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure GetAddress_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "String structBytesRead      //Actual bytes read - Should be integer but getAddress cannot find " to sLine
            Move "String structBytesRead      //Actual bytes read - Should be integer but getAddress cannot find " to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeGetAddress of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeIfNotCommandtoExpression is a cTestFixture
        Set psFunctionName to "ChangeIfNotCommandToExpression"
        
        {Published = True}
        Procedure ChangeIfNotCommandToExpression_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    IFNOT Found Begin' to sLine
            Move '    If (Not(Found)) Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeIfNotCommandToExpression of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object
    
    Object oChangeInToContains is a cTestFixture
        Set psFunctionName to "ChangeInToContains"

        {Published = True}
        Procedure ChangeInToContains_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    indicate Select as sSubString in sHostString // Comment' to sLine
            Move '    indicate Select as (sHostString contains sSubString) // Comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    if sSubString in sHostString RunProgram' to sLine
            Move '    if (sHostString contains sSubString) RunProgram' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Until sSubString in sHostString' to sLine
            Move 'Until (sHostString contains sSubString)' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'While sSubString in sHostString' to sLine
            Move 'While (sHostString contains sSubString)' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        // This test will fail because the logic assumes the source line to be of proper syntax,
        // e.g. it needs to start with a command (or indicator + command).
        {Published = True}
        Procedure ChangeInToContains_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    If sSubString    in     sHostString Move True to bFound' to sLine
            Move '    If (sHostString contains sSubString) Move True to bFound' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_6
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'if "." in a_number Move "A" to "B"' to sLine
            Move 'if (a_number contains ".") Move "A" to "B"' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_7
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'if "." in "12.12"' to sLine
            Move 'if ("12.12" contains ".")' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_8
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move (Replaces('`', 'if "`" in "I`m okay"', "'")) to sLine
            Move (Replaces('`', 'if ("I`m okay" contains "`")', "'")) to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_9
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move (Replaces('`', 'if "`" in "I`m okay"', "'")) to sLine
            Move (Replaces('`', 'if ("I`m okay" contains "`")', "'")) to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_10
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "If (Character(10)) in sValue RunProgram" to sLine
            Move "If (sValue contains (Character(10))) RunProgram" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_11
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If "Support Classes" in sShow Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sLine
            Move 'If (sShow contains "Support Classes") Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_12
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "IF NOT APM.BALANCE_TYPE IN 'BIP' MOVE 'I' TO APM.BALANCE_TYPE" to sLine
            Move "IF NOT ('BIP' contains APM.BALANCE_TYPE) MOVE 'I' TO APM.BALANCE_TYPE" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInToContains_13
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "[SELECT] INDICATE SELECT as BATCH.TRAN IN 'APINV,APCDT'" to sLine
            Move "[SELECT] INDICATE SELECT as ('APINV,APCDT' contains BATCH.TRAN)" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInToContains of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLegacyOperators is a cTestFixture
        Set psFunctionName to "ChangeLegacyOperators"

        {Published = True}
        Procedure ChangeLegacyOperators_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    While ((Found eq True) and (iA Eq iB))" to sLine
            Move "    While ((Found = True) and (iA = iB))" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    While  iL  lt  13" to sLine
            Move "    While (iL < 13)" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Send Find to Self EQ 1" to sLine
            Move "    Send Find to Self EQ 1" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If  iParXt_Next   Eq   0   Move   "to"   to sLabel' to sLine
            Move 'If (iParXt_Next = 0) Move "to" to sLabel' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If  iA  eq  iB Move (Trim (FlexErrs.Error_Descr) * Trim (Flexerrs.Note)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String' to sLine
            Move 'If (iA = iB) Move (Trim (FlexErrs.Error_Descr) * Trim (Flexerrs.Note)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_6
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Constrain FlexErrs.Recnum gt 10' to sLine
            Move 'Constrain FlexErrs.Recnum gt 10' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_7
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    If d Gt  2 Begin' to sLine
            Move '    If (d > 2) Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_8
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    If d Eq   1 Begin' to sLine
            Move '    If (d = 1) Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_9
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '     If (Found) Move (WindowIndex eq FieldIndex) to Found' to sLine
            Move '     If (Found) Move (WindowIndex = FieldIndex) to Found' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_10
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '     If (MyFunction(self,iRow)) eq sValue Function_Return iRow' to sLine
            Move '     If ((MyFunction(self,iRow)) = sValue) Function_Return iRow' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_11
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '     If lsDriver eq "ODBC_DRV" Function_Return ""' to sLine
            Move '     If (lsDriver = "ODBC_DRV") Function_Return ""' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_12
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '     If row# eq -1 Move "Unknown" to value# // This one is ok' to sLine
            Move '     If (row# = -1) Move "Unknown" to value# // This one is ok' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_13
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '     If ((Current_Radio(Self)) eq 0) Move (Append("W",(Value(oWorkspace(Self),0)))) to retval' to sLine
            Move '     If ((Current_Radio(Self)) = 0) Move (Append("W",(Value(oWorkspace(Self),0)))) to retval' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_14
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '         If iArg eq 1 Send Anything' to sLine
            Move '         If (iArg = 1) Send Anything' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_15
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    If code# eq 0 If tmp# ge 0 Move (rval#+tmp#) to rval#' to sLine
            Move '    If (code# = 0) If (tmp# >= 0) Move (rval#+tmp#) to rval#' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_16
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "INDICATE IN_JOBSTREAM as REP_JOBSTREAM EQ 888888" to sLine
            Move "INDICATE IN_JOBSTREAM as (REP_JOBSTREAM = 888888)" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_17
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If servtyp.rk     Eq "J" Begin' to sLine
            Move 'If (servtyp.rk = "J") Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_18
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If Fdel Eq 1 Begin // skapa fil om delar finns****************************************' to sLine
            Move 'If (Fdel = 1) Begin // skapa fil om delar finns****************************************' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_19
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If sysfil.adm_system Eq "1" Begin // Comment ' to sLine
            Move 'If (sysfil.adm_system = "1") Begin // Comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_20
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If sysfil.modnr_ord   Eq "J" Trim maskiner.mtyp   to Modellnr' to sLine
            Move 'If (sysfil.modnr_ord = "J") Trim maskiner.mtyp to Modellnr' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyOperators_21
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If (Trim(kontakt.namn))  Eq (Trim(namn)) Begin' to sLine
            Move 'If ((Trim(kontakt.namn)) = (Trim(namn))) Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure 
        
        {Published = True}
        Procedure ChangeLegacyOperators_22
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If sOne Eq "A" Insert "B" in sOne At 2' to sLine
            Move 'If (sOne = "A") Insert "B" in sOne At 2' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyOperators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure 

    End_Object

    Object oChangeLegacyIndicators is a cTestFixture
        Set psFunctionName to "ChangeLegacyIndicators"

        {Published = True}
        Procedure ChangeLegacyIndicators_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate Found as True' to sLine
            Move 'Move (True) to Found' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate [Found] as True' to sLine
            Move 'Move (True) to Found' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Select] Indicate Select as WindowIndex Eq FieldIndex' to sLine
            Move '   If (Select) Move (WindowIndex Eq FieldIndex) to Select' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Not Found] Indicate Select as WindowIndex Eq FieldIndex' to sLine
            Move '   If (Not(Found)) Move (WindowIndex Eq FieldIndex) to Select' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Indicate Select as Windowindex Eq Fieldindex // Comment" to sLine
            Move "    Move (Windowindex Eq Fieldindex) to Select // Comment" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_6
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    If [False] Indicate Select as Windowindex Eq Fieldindex // Comment" to sLine
            Move "    If (False) Move (Windowindex Eq Fieldindex) to Select // Comment" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_7
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    If [False] Move (Windowindex Eq Fieldindex) to Select // Comment" to sLine
            Move "    If (False) Move (Windowindex Eq Fieldindex) to Select // Comment" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_8
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Found] Reread // End comment' to sLine
            Move '   If (Found) Reread // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_9
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not found]   reread' to sLine
            Move '   If (not(found)) reread' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_10
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Not Found] Move iA to iB // End comment' to sLine
            Move '   If (Not(Found)) Move (iA) to iB // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_11
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Found] Repeat // End comment' to sLine
            Move '   While (Found) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_13
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not Seqeof] Repeat // End comment' to sLine
            Move '   While (not(Seqeof)) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_14
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not Found] Repeat // End comment' to sLine
            Move '   While (not(Found)) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_15
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Found] Loop // End comment' to sLine
            Move '   Loop // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_16
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not Seqeof] Loop // End comment' to sLine
            Move '   Loop // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_17
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [Select] Until [Found] // End comment' to sLine
            Move '   Until (Found) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_18
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not Found] While // End comment' to sLine
            Move '   While (not(Found)) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_19
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   While [not Found] // End comment' to sLine
            Move '   While (not(Found)) // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_20
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   [not Found] Reread // End comment' to sLine
            Move '   If (not(Found)) Reread // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_21
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Constrain FlexErrs.Recnum gt 10 // End comment' to sLine
            Move '   Constrain FlexErrs.Recnum gt 10 // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_22
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    [Found] Delete hTable // End comment' to sLine
            Move '    If (Found) Delete hTable // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_23
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    [Not MyBoolean] Begin' to sLine
            Move '    If (Not(MyBoolean)) Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_24
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    [Found ~Found] Begin' to sLine
            Move '    If (Found and (Not(Found))) Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_25
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    [FindErr]  Move ( _("Lösenordet måste uppfylla följande villkor") + ":\n\n" + ;' to sLine
            Move '    If (FindErr) Move ( _("Lösenordet måste uppfylla följande villkor") + ":\n\n" + ;' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_26
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    [~Debits] Begin' to sLine
            Move '    If (Not(Debits)) Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_27
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "[SELECT] INDICATE SELECT as BATCH.TRAN IN 'APINV,APCDT'" to sLine
            Move "If (SELECT) Move (BATCH.TRAN contains 'APINV,APCDT') to SELECT" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_28
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "[CLEAR_TR] DISPLAY (SYS.APDATE + 1) TO FREQ_DATE        // MOD 18 START" to sLine
            Move "If (CLEAR_TR) DISPLAY (SYS.APDATE + 1) TO FREQ_DATE // MOD 18 START" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_29
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "[NOT CLEAR_TR] BLANKFORM SACLD" to sLine
            Move "If (NOT(CLEAR_TR)) BLANKFORM SACLD" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_30
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "INDICATE IN_JOBSTREAM as REP_JOBSTREAM EQ 888888" to sLine
            Move "Move (REP_JOBSTREAM EQ 888888) to IN_JOBSTREAM" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_31
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "INDICATE GST AS SYS.USE_GST EQ 'Y'" to sLine
            Move "Move (SYS.USE_GST EQ 'Y') to GST" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_32
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "[GST] DISPLAY CTRLGST.END_DATE TO SAOTD" to sLine
            Move "If (GST) DISPLAY CTRLGST.END_DATE TO SAOTD" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_33
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "[not GST] BLANKFORM SATEN THRU SAOTD" to sLine
            Move "If (not(GST)) BLANKFORM SATEN THRU SAOTD" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_34
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '[FINDERR] SHOW_ERROR "CTRLGST is not set up properly"' to sLine
            Move 'If (FINDERR) SHOW_ERROR "CTRLGST is not set up properly"' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_35
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "INDICATE TAX_YEND False" to sLine
            Move "Move (False) to TAX_YEND" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_36
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "INDICATE USE_PO as SYS.PO_USED EQ 'Y'" to sLine
            Move "Move (SYS.PO_USED EQ 'Y') to USE_PO" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_37
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "If SANPD LE '01/01/1984' INDICATE ERROR_DATE True       // V2.01" to sLine
            Move "If (SANPD LE '01/01/1984') Move True to ERROR_DATE // V2.01" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_38
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "[P_END] If SANPD GT (SYS.APDATE + 31) Error 107" to sLine
            Move "If (P_END and (SANPD GT (SYS.APDATE + 31))) Error 107" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_39
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "INDICATE NO_PROCESS GROUP All [not P_END not M_END not Y_END] and All [not T_END not CLEAR_TR]  // MOD 19 START" to sLine
            // ToDo: How should this work??
            // The function now ignores lines with "GROUP" and/or "ALL" in them.
            Move "INDICATE NO_PROCESS GROUP All [not P_END not M_END not Y_END] and All [not T_END not CLEAR_TR]  // MOD 19 START" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_40
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "[Found] Set Field_Changed_Value Field Artiklar.karaktarstyp to (Trim(Karlista.karaktartyp))" to sLine
            Move "If (Found) Set Field_Changed_Value Field Artiklar.karaktarstyp to (Trim(Karlista.karaktartyp))" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_41
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate select as sysfil.auto_avtal    Eq "J"' to sLine
            Move 'Move (sysfil.auto_avtal Eq "J") to select' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_42
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '[Select] Indicate select as servdat           Ne ""' to sLine
            Move 'If (Select) Move (servdat Ne "") to select' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_43
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '[Found  ] Set Field_Changed_Value Field maskiner.rad1art to (Trim(Artiklar.Artnr))' to sLine
            Move 'If (Found) Set Field_Changed_Value Field maskiner.rad1art to (Trim(Artiklar.Artnr))' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_44
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If (Mid("Jensen",1,6)) Eq "n" Begin' to sLine
            Move 'If (Mid("Jensen",1,6)) Eq "n" Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyIndicators_45
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If (Mid("Jensen", 1, 3)) Eq "J" Begin' to sLine
            Move 'If (Mid("Jensen", 1, 3)) Eq "J" Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLegacyShadow_State is a cTestFixture
        Set psFunctionName to "ChangeLegacyShadow_State"

        {Published = True}
        Procedure ChangeLegacyShadow_State_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Set Shadow_State of (oApplication(Self)) to False  // Comment here' to sLine
            Move '   Set Enabled_State of (oApplication(Self)) to True  // Comment here' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyShadow_State_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Get Shadow_State to bState   // Other comment' to sLine
            Move '   Get Enabled_State to (Not(bState))   // Other comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyShadow_State_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Set Shadow_State of oButton to (not(bState))' to sLine
            Move '   Set Enabled_State of oButton to bState' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyShadow_State_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Set Object_Shadow_state to True' to sLine
            Move '   Set Enabled_State to False' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyShadow_State_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Set Shadow_State of oButton to (not(bState))   // End comment' to sLine
            Move '   Set Enabled_State of oButton to bState   // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyShadow_State_6
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '        Set Shadow_State of oButton to (not(bState))' to sLine
            Move '        Set Enabled_State of oButton to bState' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyShadow_State_7
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '        Set object_shadow_state of (oBtn1(self)) to (not(liLogImage))' to sLine
            Move '        Set Enabled_State of (oBtn1(self)) to liLogImage' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLegacyShadow_State_8
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '        If sUserAccessHigh ne "Y" Set Shadow_state Item 0 to True' to sLine
            Move '        If sUserAccessHigh ne "Y" Set Enabled_State Item 0 to False' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLegacyShadow_State of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeReplaceCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeReplaceCommandToFunction"

        {Published = True}
        Procedure ChangeReplaceCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Replace  "A"  In  sNameX  With "B" // End comment' to sLine
            Move '  Move (Replace("A",sNameX,"B")) to sNameX // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeReplaceCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeSquareBracketsIndicators is a cTestFixture
        Set psFunctionName to "ChangeSquareBracketsIndicators"

        { Published = True }
        Procedure ChangeSquareBracketsIndicators_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    [Found ~Found] Begin' to sLine
            Move '    If (Found and Not(Found)) Begin' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeSquareBracketsIndicators of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeTrimCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeTrimCommandToFunction"

        {Published = True}
        Procedure ChangeTrimCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Trim sTmp to sValue" to sLine
            Move " Move (Trim(sTmp)) to sValue" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeTrimCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeTrimCommandToFunction_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " Move sTmp to sValue // That's mighty trim of you" to sLine
            Move " Move sTmp to sValue // That's mighty trim of you" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeTrimCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeTrimCommandToFunction_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move " If iA gt iB Trim sTmp to sValue" to sLine
            Move " If iA gt iB Move (Trim(sTmp)) to sValue" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeTrimCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeUClassToRefClass_Fixture is a cTestFixture
        Set psFunctionName to "ChangeUClassToRefClass"

        {Published = True}
        Procedure ChangeUClassToRefClass_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Get Create U_Array to hArray" to sLine
            Move "    Get Create (RefClass(Array)) to hArray" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeUClassToRefClass of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeUClassToRefClass_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "    Get    Create   U_Array    to     hArray" to sLine
            Move "    Get    Create   (RefClass(Array))    to     hArray" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeUClassToRefClass of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveLocalKeyWord is a cTestFixture
        Set psFunctionName to "RemoveLocalKeyWord"

        {Published = True}
        Procedure RemoveLocalKeyWord_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Set pbInFunction of ghoRefactorFuncLib to True
            Move '  Local Integer iRename' to sLine
            Move '  Integer iRename' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveLocalKeyWord_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  // Local Integer iRename' to sLine
            Move '  // Local Integer iRename' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveLocalKeyWord_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  "Local Integer iRename"' to sLine
            Move '  "Local Integer iRename"' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveLocalKeyWord_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Set pbInFunction of ghoRefactorFuncLib to True            
            Move '  Local String[] asData' to sLine
            Move '  String[] asData' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveLocalKeyWord of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveOldStudioMarkers is a cTestFixture
        Set psFunctionName to "RemoveOldStudioMarkers"

        {Published = True}
        Procedure RemoveOldStudioMarkers_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//AB-IgnoreStart' to sLine
            Move '//AB-IgnoreStart' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            // Returns True if a legacy IDE (Studio) source code marker is found, and
            // in case the source line should be removed.
            Get RemoveOldStudioMarkers of ghoRefactorFuncLib (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveOldStudioMarkers_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//AB-DDOEnd' to sLine
            Move '//AB-DDOEnd' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFuncLib (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveOldStudioMarkers_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  //AB-PanelStoreTopStart' to sLine
            Move '  //AB-PanelStoreTopStart' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFuncLib (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveOldStudioMarkers_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  //AB/ ' to sLine
            Move '  //AB/ ' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFuncLib (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveOldStudioMarkers_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//IDE-FileType=ftApplication' to sLine
            Move '//IDE-FileType=ftApplication' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveOldStudioMarkers of ghoRefactorFuncLib (&sLine) to bChanged
            If (bChanged = False) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeInsertCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeInsertCommandToFunction"

        {Published = True}
        Procedure ChangeInsertCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move ' If sOne Eq "A" Insert "_" in sOne at 2' to sLine
            Move ' If sOne Eq "A" Move (Insert("_",sOne,2)) to sOne' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInsertCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInsertCommandToFunction_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Insert "   " in sVar at 2' to sLine
            Move '   Move (Insert("   ",sVar,2)) to sVar' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInsertCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInsertCommandToFunction_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   Replace sChr In sTag with (uppercase(sChr))' to sLine
            Move '   Replace sChr In sTag with (uppercase(sChr))' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInsertCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeInsertCommandToFunction_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "INSERT 'chmod 777 ' IN WK_CHAIN_ARG AT 1" to sLine
            Move "Move (Insert('chmod 777 ',WK_CHAIN_ARG,1)) to WK_CHAIN_ARG" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeInsertCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLengthCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeLengthCommandToFunction"

        {Published = True}
        Procedure ChangeLengthCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Length sVar to iLength' to sLine
            Move 'Move (Length(sVar)) to iLength' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLengthCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLengthCommandToFunction_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   If iA EQ iB Length sVar to iLength' to sLine
            Move '   If iA EQ iB Move (Length(sVar)) to iLength' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLengthCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangeLengthCommandToFunction_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   If (Found) Length sVar to iLength // End comment' to sLine
            Move '   If (Found) Move (Length(sVar)) to iLength // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLengthCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeLeftCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeLeftCommandToFunction"

        {Published = True}
        Procedure ChangeLeftCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Left sPath  to sDir (iSepPos - 1)' to sLine
            Move 'Move (Left(sPath, (iSepPos - 1))) to sDir' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeLeftCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeRightCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeRightCommandToFunction"

        {Published = True}
        Procedure ChangeRightCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Right sPath to sPath (Length(sPath) - iSepPos)' to sLine
            Move 'Move (Right(sPath, (Length(sPath) - iSepPos))) to sPath' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeRightCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangePosCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangePosCommandToFunction"

        {Published = True}
        Procedure ChangePosCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Pos "-"  in sIns to iPos' to sLine
            Move 'Move (Pos("-",sIns)) to iPos' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangePosCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure ChangePosCommandToFunction_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '   If (iA <> iB) Pos "   "  in sIns to iPos // End comment' to sLine
            Move '   If (iA <> iB) Move (Pos("   ",sIns)) to iPos // End comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangePosCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeSysdate4 is a cTestFixture
        Set psFunctionName to "ChangeSysdate4"

        {Published = True}
        Procedure ChangeSysdate4_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Sysdate4 dToday' to sLine
            Move 'Sysdate dToday' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeSysdate4 of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oChangeZeroStringCommandToFunction is a cTestFixture
        Set psFunctionName to "ChangeZeroStringCommandToFunction"

        {Published = True}
        Procedure ChangeZeroStringCommandToFunction_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'ZeroString iLength to sParameter' to sLine
            Move 'Move (ZeroString(iLength)) to sParameter' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ChangeZeroStringCommandToFunction of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oEditorNormalizeCase is a cTestFixture
        Set psFunctionName to "EditorNormalizeCase"

        {Published = True}
        Procedure EditorNormalizeCase_1
            String sLine sExpected
            String[] asData
            Boolean bChanged bOK
            Handle hoEditor

            Get phoEditor of ghoRefactorFuncLib to hoEditor
            Move 'move iA TO iB' to asData[0]
            Move 'Move iA to iB' to sExpected
            Get WriteDataToEditor of hoEditor asData to bOK
            Get EditorNormalizeCase of ghoRefactorFuncLib (&asData) to bChanged

            If (bChanged = True) Begin
                // We need this because of an optimization in the cRefactoringEngine,
                // where we only want to call EditorDataAsStringArray once after all
                // calls to eEditor_Function type(s).
                Get EditorDataAsStringArray of hoEditor to asData
                Move asData[0] to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oEditorReIndent is a cTestFixture
        Set psFunctionName to "EditorReIndent"

        {Published = True}
        Procedure EditorReIndent_1
            String sLine sExpected sParam
            Boolean bChanged bOK
            String[] asData
            Handle hoEditor

            Get phoEditor of ghoRefactorFuncLib to hoEditor
            Move "    If (Found) Begin"     to asData[0]
            Move "    Move False to Found"  to asData[1]
            Move "    End"                  to asData[2]
            Get WriteDataToEditor of hoEditor asData to bOK
            Get EditorReIndent of ghoRefactorFuncLib (&asData) to bChanged
            If (bChanged = True) Begin
                // See oEditorNormalizeCase above for comment:
                Get EditorDataAsStringArray of hoEditor to asData
                Move (asData[0] = "If (Found) Begin") to bOK
                If (bOK) Begin
                    Move (asData[1] = "    Move False to Found") to bOK
                End
                If (bOK) Begin
                    Move (asData[2] = "End") to bOK
                End
            End
            Send Assert (bChanged and bOK)
        End_Procedure

    End_Object
    
    Object oNormalizeArrayNotation is a cTestFixture
        Set psFunctionName to "NormalizeArrayNotation"
        
        {Published = True}
        Procedure NormalizeArrayNotation_1
            String sLine sExpected
            Boolean bChanged
            Move 'String [] asAddress' to sLine
            Move 'String[] asAddress'  to sExpected
            Get NormalizeArrayNotation of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveEndComments is a cTestFixture
        Set psFunctionName to "RemoveEndComments"

        {Published = True}
        Procedure RemoveEndComments_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'End_Procedure   // This is a bla bla procedure' to sLine
            Move 'End_Procedure' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveEndComments of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveEndComments_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'End_Function   // This is an end function' to sLine
            Move 'End_Function' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveEndComments of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveEndComments_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'End_Class   // This class does bla bla bla' to sLine
            Move 'End_Class' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveEndComments of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure RemoveEndComments_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'End_Object   // This object does bla bla bla' to sLine
            Move 'End_Object' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveEndComments of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveMultipleBlankLines is a cTestFixture
        Set psFunctionName to "RemoveMultipleBlankLines"

        {Published = True}
        Procedure RemoveMultipleBlankLines_1
            String sLine sExpected
            Boolean bChanged
            Integer iItem
            String[] asCode asExpected

            Move 0 to iItem
            Move "    Use SQL.pkg" to asCode[iItem]
            Increment iItem
            Move "    " to asCode[iItem]
            Increment iItem
            Move "    " to asCode[iItem]
            Increment iItem
            Move "    " to asCode[iItem]
            Increment iItem
            Move "    " to asCode[iItem]
            Increment iItem
            Move "    " to asCode[iItem]
            Increment iItem
            Move "    " to asCode[iItem]
            Increment iItem
            Move "    " to asCode[iItem]
            Increment iItem
            Move "    " to asCode[iItem]
            Increment iItem
            Move "Set Border_Style to Border_Thick" to asCode[iItem]

            Move 0 to iItem
            Move "    Use SQL.pkg" to asExpected[iItem]
            Increment iItem
            Move "" to asCode[iItem]
            Increment iItem
            Move "Set Border_Style to Border_Thick" to asExpected[iItem]

            Get RemoveMultipleBlankLines of ghoRefactorFuncLib (&asCode) 1 to bChanged
            Send AssertArrayAreEqual asExpected asCode
        End_Procedure

    End_Object

    Object oRemoveProjectObjectStructure is a cTestFixture
        Set psFunctionName to "RemoveProjectObjectStructure"

        // ToDo: Don't know if and how this should/could be tested?
        {Published=False}
        Procedure RemoveProjectObjectStructure_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveProjectObjectStructure of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemovePropertyPrivate is a cTestFixture
        Set psFunctionName to "RemovePropertyPrivate"

        {Published = True}
        Procedure RemovePropertyPrivate_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Property Boolean pbState Private' to sLine
            Move 'Property Boolean pbState' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemovePropertyPrivate of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemovePropertyPublic is a cTestFixture
        Set psFunctionName to "RemovePropertyPublic"

        {Published = True}
        Procedure RemovePropertyPublic_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Property Boolean pbState Public' to sLine
            Move 'Property Boolean pbState' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemovePropertyPublic of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveSansSerif is a cTestFixture
        Set psFunctionName to "RemoveSansSerif"

        {Published = True}
        Procedure RemoveSansSerif_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Set TypeFace to "MS Sans serif"' to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveSansSerif of ghoRefactorFuncLib (&sLine) to bChanged
            If (bChanged = True) Begin
                Move "" to sLine
            End
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveStudioGeneratedComments is a cTestFixture
        Set psFunctionName to "RemoveStudioGeneratedComments"

        // ToDo: Don't know how we could test this.
        {Published = True}
        Procedure RemoveStudioGeneratedComments_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "// fires when the button is clicked" to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveStudioGeneratedComments of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        Procedure RemoveStudioGeneratedComments_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "//OnChange is called on every changed character to sLine" to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveStudioGeneratedComments of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        Procedure RemoveStudioGeneratedComments_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "// Visual DataFlex xx.x Client Size Adjuster" to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveStudioGeneratedComments of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        Procedure RemoveStudioGeneratedComments_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "// Visual DataFlex xx.x Migration Utility," to sLine
            Move '' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveStudioGeneratedComments of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveTrailingSpaces is a cTestFixture
        Set psFunctionName to "RemoveTrailingSpaces"

        {Published = True}
        Procedure RemoveTrailingSpaces_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move True to Seqeof     ' to sLine
            Move 'Move True to Seqeof' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RemoveTrailingSpaces of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oRemoveUnusedLocals is a cTestFixture
        Set psFunctionName to "RemoveUnusedLocals"

        {Published = True}
        // Not sure how we should test this?
        Procedure RemoveUnusedLocals_1
            String[] asCode asExpected
            Boolean bChanged
            Integer iItem

            Move 0 to iItem
            Move "Procedure Test"                       to asCode[iItem]
            Increment iItem
            Move     "Date dToday"                      to asCode[iItem]
            Increment iItem
            Move     "String sVal"                      to asCode[iItem]
            Increment iItem
            Move     "Integer iVal"                     to asCode[iItem]
            Increment iItem
            Move     "Sysdate4 dToday"                  to asCode[iItem]
            Increment iItem
            Move     "Move (dToday + 23) to dToday"     to asCode[iItem]
            Increment iItem
            Move "End_Procedure"                        to asCode[iItem]

            Move 0 to iItem
            Move "Procedure Test"                       to asExpected[iItem]
            Increment iItem
            Move     "Date dToday"                      to asExpected[iItem]
            Increment iItem
            Move     "Sysdate4 dToday"                  to asExpected[iItem]
            Increment iItem
            Move     "Move (dToday + 23) to dToday"     to asExpected[iItem]
            Increment iItem
            Move "End_Procedure"                        to asExpected[iItem]

            Get RemoveUnusedLocals of ghoRefactorFuncLib (&asCode) to bChanged
            Send AssertArrayAreEqual asExpected asCode
        End_Procedure

    End_Object

    Object oReportUnusedSourceFiles is a cTestFixture
        Set psFunctionName to "ReportUnusedSourceFiles"

        {Published = True}
        Procedure ReportUnusedSourceFiles_1
            String sLine sExpected sPath
            String[] asFiles
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get psHome of (phoWorkspace(ghoApplication)) to sPath
            Move (sPath + CS_LegacyCode) to asFiles[0]
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get ReportUnusedSourceFiles of ghoRefactorFuncLib (&asFiles) to bChanged
            Send AssertFalse bChanged ""
        End_Procedure

    End_Object

    Object oRestylelDDOs is a cTestFixture
        Set psFunctionName to "RestylelDDOs"

        {Published = True}
        Procedure RestylelDDOs_1
            String sLine sExpected sFileFilter sPath
            String[] asFiles asExpected asFolders
            Boolean bChanged
            tTokenizer TokenizerData
            tRefactorFiles asRefactorFiles

            Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sPath
            Move sPath to asFolders[0]
            Move "*.dd" to sFileFilter
            Get AllSourceFiles of ghoApplication asFolders sFileFilter to asRefactorFiles
            Move asRefactorFiles.asFullFileNames to asFiles
            Move asFiles to asExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RestyleDDOs of ghoRefactorFuncLib (&asFiles) eDDNewStyle to bChanged
            Send AssertArrayAreEqual asExpected asFiles
        End_Procedure

    End_Object

    Object oSplitInlineIfElseLine is a cTestFixture
        Set psFunctionName to "SplitInlineIfElseLine"

        {Published = True}
        Procedure SplitInlineIfElseLine_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If (WindowIndex = 0) Move "Go"   to sLabel' to sLine
            Move ('If (WindowIndex = 0) Begin' + CS_CRLF + '    Move "Go"   to sLabel' + CS_CRLF + 'End') to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get SplitInlineIfElseLine of ghoRefactorFuncLib (&sLine) eSplitToBeginEndBlock to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure SplitInlineIfElseLine_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If (WindowIndex = 0) Move "Go"   to sLabel' to sLine
            Move ('If (WindowIndex = 0);' + CS_CRLF + '    Move "Go"   to sLabel') to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get SplitInlineIfElseLine of ghoRefactorFuncLib (&sLine) eSplitBySemicolon to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

        {Published = True}
        Procedure SplitInlineIfElseLine_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If (WindowIndex = 0) Move "Go"   to sLabel' to sLine
            Move ('If (WindowIndex = 0) ;' + CS_CRLF + '    Move "Go"   to sLabel') to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get SplitInlineIfElseLine of ghoRefactorFuncLib (&sLine) eSplitBySpaceAndSemicolon to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

    Object oTokenizer is a cTestFixture
        Set psFunctionName to "Tokenizer"

        {Published = True}
        Procedure Tokenizer_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a quoted string" to sVal' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bHasOverstrikeChars = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_2
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "Move 'Single quoted string' to sVal" to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bHasOverstrikeChars = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_3
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "Move 'Single quoted string' to sVal" to sLine
            Move "Move '++++++++++++++++++++' to sVal" to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_4
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a test string on multiple lines;'   to sLine
            Move 'Move "_______________________________________;'   to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine       to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_5
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "Double quoted string" to sVal' to sLine
            Move 'Move "____________________" to sVal' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_6
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '           //Move WindowIndex to FieldIndex' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsComment = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_7
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move aA to sB //This is an end comment' to sLine
            Move '//This is an end comment' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sEndComment sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_8
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/* Move (iA / iB) to nC' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineComment = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_9
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/* Move (iA / iB) to nC' to sLine
            Move '#######################' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_10
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '  Continuation of a DF23 multi-line comment' to sLine
            Move '###########################################' to sExpected
            Set pbIsInDF23MultiLineComment of ghoRefactorFuncLib to True
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_11
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (iA / iB) to nC */' to sLine
            Set pbIsInDF23MultiLineComment of ghoRefactorFuncLib to True
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineComment = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_12
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/* Move (iA / iB) to nC' to sLine
            Move '#######################' to sExpected
            Set pbIsInDF23MultiLineComment of ghoRefactorFuncLib to True
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_13
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (iA / iB) to nC */' to sLine
            Move '#######################' to sExpected
            Set pbIsInDF23MultiLineComment of ghoRefactorFuncLib to True
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_14
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (iA / iB) to nD' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineComment = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_15
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move CS_CRLF to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsBlank = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_16
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "" to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsBlank = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_17
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/MyPageName' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInImage = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_18
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '/*' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bLineIsReady = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_19
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '//  /*' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInImage = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_20
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Send Info_Box "This is a text string with an embedded semi-colon ;"' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bHasEndSemiColon = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_21
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a source line with an ending semi-colon" ;' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bHasEndSemiColon = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_22
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If bOK ;  // Expand vDataType in the debugger' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bHasEndSemiColon = True)
        End_Procedure


        {Published = True}
        Procedure Tokenizer_23
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '@"Hello World' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_24
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '@"Hello World' to sLine
            Move '@"___________' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_241
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If "Support Classes" in sShow Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sLine
            Move 'If "_______________" in sShow Set pbDontShowMNS of (VDFCLS_DD(Self)) to True' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        // The pbIsInDF23MultiLineString property should now be = True (after the Tokenizer_IsMultiLineStringStart_1_1 test)
        {Published = True}
        Procedure Tokenizer_25
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    we will MOVE our warehouse to Lincoln next month.' to sLine
            Move     '_________________________________________________' to sExpected 
            Set piMultiLineStringType of ghoRefactorFuncLib to MLS_AtQuoteOpen
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOverstrikeLine sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_26
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    we will MOVE our warehouse to Lincoln next month;' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_27
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move "'    we will MOVE our warehouse to Lincoln next month;' ;" to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bHasEndSemiColon = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_28
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get SQLExecDirect of ghoSQLExecutor @SQL"""' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_29
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move @SQL""" SELECT * FROM Customer WHERE Customer.Name = "John Doe" """ to sSQL // End comment' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_30
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "@SQL" to sString // And an end comment' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_31
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "This is a string" to sText' to sLine
            Set piMultiLineStringType of ghoRefactorFuncLib to MLS_None
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_32
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '// This is a comment' to sLine
            Set piMultiLineStringType of ghoRefactorFuncLib to MLS_AtQuote
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInDF23MultiLineString = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_33
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '// Function MyFunction String sA Returns Boolean ' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInFunction = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_34
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Function MyFunction String sA Returns Boolean ' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInFunction = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_35
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "Function MyFunction String sA Returns Boolean" to sMyString' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInFunction = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_36
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '// Procedure MyProc String sLine' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInProcedure = False)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_37
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Procedure MyProc String sLine' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInProcedure = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_38
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '#COMMAND WebPublishProcedure R .' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsInCommand = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_39
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '         Move aA to sB //This is an end comment' to sLine
            Move '         ' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sIndentation sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_40
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move ('      //Move Windowindex to FieldIndex') to sLine
            Move '       ' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bLineIsReady = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_41
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate [Found] as (True = bTrue)' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.BooleanIndicator.bHasIndicateCommand = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_42
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If [Found] Indicate Err as (True = bTrue)' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.BooleanIndicator.bHasIndicateCommand = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_43
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Indicate [Found] as (True = bTrue)' to sLine
            Move 'Found' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.BooleanIndicator.FirstBoolean.sCode = sExpected)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_44
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '[Found] Move [Not Seqeof] to [Select]' to sLine
            Move 'Found' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.BooleanIndicator.FirstBoolean.sCode = sExpected)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_45
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move [Not Select] to [Found]' to sLine
            Move 'Found' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.BooleanIndicator.ToBoolean.sCode = sExpected)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_46
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get phoHandle of (oMyObject(Current_Object)) to Found' to sLine
            Move '(oMyObject(Current_Object))' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.OfStatement.sCode sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_47
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get psString of ghoApplication to sString' to sLine
            Move 'ghoApplication' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.OfStatement.sCode sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_48
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move (iA * iB) to iC' to sLine
            Move 'iC' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_49
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "New Label" to (Label(phoMainPanel(ghoApplication)))' to sLine
            Move '(Label(phoMainPanel(ghoApplication)))' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_50
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Move "New Label" to (Label(phoMainPanel(ghoApplication))) // Some comment' to sLine
            Move '(Label(phoMainPanel(ghoApplication)))' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.ToStatement.sCode sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_51
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move 'If' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.FirstLeftCommand.sCode sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_52
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move 'Move' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.SecondLeftCommand.sCode sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_55
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath // Some comment' to sLine
            Move '(phoWorkspace(ghoApplication))' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sOfExpression sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_56
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'For iChar from 1 to (iPos - 1) // Some comment' to sLine
            Move '(iPos - 1)' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual TokenizerData.sToExpression sExpected
        End_Procedure

        {Published = True}
        Procedure Tokenizer_57
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    If iA eq iB Move (Trim (FlexErrs.Error_Descr) * Trim (Flexerrs.Note)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String' to sLine
            Move 'Move' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.SecondLeftCommand.sCode = sExpected)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_58
            String sLine sExpected
            Boolean bSame
            tTokenizer TokenizerData
            tExpression[] aExpected

            Move 'If ((iA * iB > 10) + (iD + iE) > 100) Move (iA / iB) to nNumber // Some comment' to sLine
            Move 0  to aExpected[0].eExpressionMode
            Move 4  to aExpected[0].iStartPos
            Move 34 to aExpected[0].iLength
            Move "((iA * iB > 10) + (iD + iE) > 100)" to aExpected[0].sExpression
            Move "((iA * iB > 10) + (iD + iE) > 100)" to aExpected[0].sExpressionOS
            Move "(iA * iB > 10) + (iD + iE) > 100"   to aExpected[0].sExpressionNP
            Move "((iA * iB > 10) + (iD + iE) > 100)" to aExpected[0].sExpressionWS

            Move 1  to aExpected[1].eExpressionMode
            Move 44 to aExpected[1].iStartPos
            Move 9  to aExpected[1].iLength
            Move "(iA / iB)" to aExpected[1].sExpression
            Move "(iA / iB)" to aExpected[1].sExpressionOS
            Move "iA / iB"   to aExpected[1].sExpressionNP
            Move "(iA / iB)" to aExpected[1].sExpressionWS

            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Move (IsSameArray(TokenizerData.aExpressions, aExpected)) to bSame
            Send Assert (bSame = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_59
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '    If iA eq iB Move (Trim (FlexErrs.Error_Descr) * Trim (Flexerrs.Note)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String' to sLine
            Move '    If iA eq iB Move (Trim (FlexErrs.Error_Descr) * Trim (Flexerrs.Note)) to vData[iRow][2] // Name: ZipCode_City, Length: 100, Datatype: String' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.sLine = sExpected)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_60
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'If iLV Ne 0 Mid sFAKT  to sFAKT (iLV+1) 1' to sLine
            Move 'If iLV Ne 0 Mid sFAKT  to sFAKT (iLV+1) 1' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertSAreEqual sLine sExpected
        End_Procedure
        
        {Published = True}
        Procedure Tokenizer_61
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'tTokenizer TokenizerData' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send Assert (TokenizerData.bIsVariableDeclaration = True)
        End_Procedure

        {Published = True}
        Procedure Tokenizer_62
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move 'Kalle Oskar' to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Send AssertFalse (TokenizerData.bIsVariableDeclaration = True)
        End_Procedure

    End_Object

    Object oRestyleDDOs is a cTestFixture
        Set psFunctionName to "RestyleDDOs"

        {Published=False}
        // ToDo: Dummy procedure. You need to fill it with a meaningful test and change 'Published=False' to 'Published=True'
        Procedure RestyleDDOs_1
            String sLine sExpected
            Boolean bChanged
            tTokenizer TokenizerData
            Move '' to sLine
            Move ' ' to sExpected
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Get RestyleDDOs of ghoRefactorFuncLib (&sLine) to bChanged
            Send AssertSAreEqual sExpected sLine
        End_Procedure

    End_Object

End_Object
