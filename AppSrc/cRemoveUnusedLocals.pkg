//------------------------------------------------------------->
// ReportUnusedLocals.pkg
//      R.Worsley 3/09/2008
//      Locate any unused local variables
//      Conditions:
//          Variables declared in the method line are not checked
//          Read notes below on StringTokenizer
//          Will work with the old "Local" as a descriptor
//          Variables can be declared anywhere in the method
//
//      If used as a class in an another application, there are
//      a couple of properties that can be set to automate the
//      input and output file names.  See the property descriptions
//      in class cReportUnusedLocals
//
//------------------------------------------------------------>
//  04/08/2008 RLW  - Make into a class so the process can be
//                   incorporated into other applications
//  04/12/2008 RLW  - Change read/write registry process
//  04/12/2008 RLW  - Fix so that wrapped variables on the function
//                   or procedure line won't show odd results
//  06/22/2008 RLW  - Add missing Seq_Release_Channel calls
//  06/30/2018 Nils - Changed to use registry functions of the cApplication class.
//  10/26/2018 Nils - Rewrote to use a struct instead of multi-dimensional array,
//                    and to actually remove unused local variables (!), not just create a report.
//  11/03/2018 Nils - Rewrote most of the logic to make it more robust. Removed the StringTokenizer
//                    code to instead use the build in StrSplitToArray function.
//  09/09/2021 Nils - Merged all generalized functions with the cRefactorFuncLib class.
//                    Also moved most constant declarations to RefactorConstants.inc
//------------------------------------------------------------->
Use cApplication.pkg
Use vWin32fh.pkg
Use cRefactorFuncLib.pkg

Struct tUnusedLocals
    Boolean bInUse
    Integer iMissingAlignment1
    String VarName
    String MethodName
    Integer Line#
    Integer iMissingAlignment2
End_Struct

Define CS_UnusedVariablesLogFile for "UnusedVariables.txt"

Class cRemoveUnusedLocals is a cObject
    Procedure Construct_Object
        Forward Send Construct_Object
        
        Property String[] pasCode
        Property Integer piNoOfUnusedLocalVariables 0

    End_Procedure

    // Remove all variables that are used.
    Function CleanupLocalVariables tUnusedLocals[] asLocalVariables Returns tUnusedLocals
        Integer iCount iSize

        Move (SortArray(asLocalVariables))   to asLocalVariables
        Move (SizeOfArray(asLocalVariables)) to iSize
        Decrement iSize
        For iCount From 0 to iSize
            If (asLocalVariables[iCount].bInUse = True) Begin
                Move (RemoveFromArray(asLocalVariables, iCount)) to asLocalVariables
                Decrement iSize
                Decrement iCount
            End
        Loop

        Function_Return asLocalVariables
    End_Function

    // Custom comparison function:
    //   Returns (GT) struct value in first parameter > struct value in second parameter.
    //   Returns (LT) struct value in first parameter < struct value in second parameter.
    //   Otherwise returns (EQ).
    Function CompareLineNum tUnusedLocals Local1 tUnusedLocals Local2 Returns Integer
        If (Local1.Line# > Local2.Line#) ;
            Function_Return (GT)
        If (Local1.Line# < Local2.Line#) ;
            Function_Return (LT)
        Function_Return (EQ)
    End_Function

    // We now have the source file array and the unused variables struct array.
    // Remove those unused variables from the source file array.
    Procedure RemoveUnusedVariablesFromSourceArray String[] ByRef asCode tUnusedLocals[] asLocalVariables Integer ByRef iUnusedLocalVariables
        Integer iCount iSize iItem iLength iOffset
        String sVarName sLine sVarType sVariableDeclarationConstant
        Boolean bInUse bFound bIgnore bChanged

        Move 0 to iOffset
        Get CleanupLocalVariables asLocalVariables      to asLocalVariables
        Move (SizeOfArray(asLocalVariables))            to iSize
        // sort array by line number as otherwise the iOffset logic won't work!
        Move (SortArray(asLocalVariables, Self, (RefFunc(CompareLineNum)))) to asLocalVariables
        Decrement iSize
        For iCount From 0 to iSize
            Move asLocalVariables[iCount].bInUse        to bInUse
            If (bInUse = False) Begin
                Move asLocalVariables[iCount].Line#     to iItem
                Move (iItem - 1 + iOffset)              to iItem
                Move asLocalVariables[iCount].VarName   to sVarName
                Move (Length(sVarName))                 to iLength
                Move asCode[iItem]                to sLine
                Get RemoveLocalKeyWord of ghoRefactorFuncLib (&sLine) to bIgnore
                Get _RetrieveFirstToken of ghoRefactorFuncLib sLine   to sVarType

                Move ((sLine + " ") contains (" " + sVarName + " "))  to bFound
                If (bFound = False) Begin
                    Move (sLine contains sVarName)      to bFound
                End
                If (bFound = True) Begin
                    Move (Replace((" " + sVarName + " "), sLine + " ", " ")) to sLine
                End

                Get _NormalizeArrayNotation of ghoRefactorFuncLib (&sLine) to bChanged
                // If all that remains on the line is the variable type declaration,
                // remove the line from the source array.
                Move sLine to sVariableDeclarationConstant
                Get RemoveLocalKeyWord of ghoRefactorFuncLib (&sVariableDeclarationConstant) to bIgnore
                Get _RemoveEndComment of ghoRefactorFuncLib sVariableDeclarationConstant to sVariableDeclarationConstant
                Move (Trim(sVariableDeclarationConstant)) to sVariableDeclarationConstant
                If (sVarType = sVariableDeclarationConstant) Begin
                    Move (RemoveFromArray(asCode, iItem)) to asCode
                    Decrement iOffset
                End
                Else Begin
                    Move (RTrim(sLine)) to sLine
                    Move sLine to asCode[iItem]
                End

                Increment iUnusedLocalVariables
            End
        Loop

        Procedure_Return
    End_Procedure
    
    // *** MAIN PROCEDURE ***
    // Call this and pass a source file as string ByRef array.
    // Returns number of unused local variables
    Function RemoveUnusedLocals String[] ByRef asCode Returns Integer
        Integer iNoOfUnusedLocalVariables
        Get ParseFile (&asCode) to iNoOfUnusedLocalVariables
        Function_Return iNoOfUnusedLocalVariables
    End_Function

    Function ParseFile String[] ByRef asCode Returns Integer
        String sLine sVars sVariableName sMethodName sSourceFile sOverstrikeLine
        Integer iArrayCount iMax iCounter iItems iLineCount iUnusedLocalVariables iSize iCount
        tUnusedLocals[] asLocalVars  
        tTokenizer TokenizerData
        String[] asVars
        Boolean bInMethod bVariableDeclaration bIsVariable bMethodEnd bIgnore bIsInFunction bIsInProcedure  
        Boolean bLocalVariableDeclaration bLocalVariableArrayDeclaration bStop

        Move 0 to iUnusedLocalVariables
        Move (SizeOfArray(asCode)) to iSize
        If (iSize = 0) Begin
            Get psIdleText of (phoStatusBar(ghoCommandBars)) to sSourceFile
            Error ("Source File Array is empty.\n" + String(sSourceFile)) "Error in ParseFile method [cRemoveUnusedLocals.pkg]"
            Move True to Err
            Function_Return iUnusedLocalVariables
        End

        Decrement iSize
        Move False to Err

        For iCount From 0 to iSize
            Move asCode[iCount] to sLine
            Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
            Move TokenizerData.sOverstrikeLine to sOverstrikeLine
            Move (TokenizerData.bIsInFunction = True or TokenizerData.bIsInProcedure = True) to bInMethod
            Move TokenizerData.bIsInFunction  to bIsInFunction
            Move TokenizerData.bIsInProcedure to bIsInProcedure
            If (bInMethod = True) Begin
                Get _MethodName of ghoRefactorFuncLib sOverstrikeLine to sMethodName
                // To start reading the next line after the start "Procedure" or "Function" line
                Move (iCount + 1) to iLineCount
                // If the method declaration is split over multiple lines, then we need to get past that part
                While (Right(Trim(sOverstrikeLine), 1) = ";")
                    If (iLineCount <= iSize) Begin
                        Move asCode[iLineCount] to sLine
                    End
                    Else Begin
                      Move "" to sLine
                    End
                    
                    Move sLine to TokenizerData.sLine
                    Move False to TokenizerData.bHasOverstrikeChars
                    Get _OverstrikeSimpleLine of ghoRefactorFuncLib sLine to sOverstrikeLine
                    Increment iLineCount
                Loop

                // Begin search line-by-line until "End_Procedure" or "End_Function"
                Repeat
                    If (iLineCount <= iSize) Begin
                        Move asCode[iLineCount] to sLine
                        Get Tokenizer of ghoRefactorFuncLib sLine to TokenizerData
                        Move TokenizerData.sOverstrikeLine to sOverstrikeLine
                    End
                    Move False to bMethodEnd
                    If (bIsInFunction = True) Begin
                        Move (sOverstrikeLine = CS_FunctionEnd) to bMethodEnd
                    End
                    Else If (bIsInProcedure = True) Begin
                        Move (sOverstrikeLine = CS_ProcedureEnd) to bMethodEnd
                    End
                        
                    If (bMethodEnd = False) Begin
                        // Does the line contain one or more variable declarations?
                        If (TokenizerData.bIsVariableDeclaration = True) Begin
                            Get RemoveLocalKeyWord of ghoRefactorFuncLib (&sOverstrikeLine) to bIgnore
                            // Remove the data type command
                            Get _RemoveFirstToken of ghoRefactorFuncLib sOverstrikeLine to sVars
                            Move (StrSplitToArray(Trim(sVars), " ")) to asVars

                            // Loop through the variable's array and add to struct array of locally declared variables.
                            // Need to do this here because we don't know where the programmer will place variable declarations,
                            // so we need to update the array as they occur.
                            Move (SizeOfArray(asVars)) to iItems
                            Decrement iItems
                            For iCounter from 0 to iItems
                                Move asVars[iCounter] to sVariableName
                                Move (SizeOfArray(asLocalVars)) to iArrayCount
                                If (Trim(sVariableName) <> "") Begin
                                    Move sVariableName    to asLocalVars[iArrayCount].VarName
                                    Move False            to asLocalVars[iArrayCount].bInUse
                                    Move sMethodName      to asLocalVars[iArrayCount].MethodName
                                    // Array item number (zero based) to source code line number:
                                    Move (iLineCount + 1) to asLocalVars[iArrayCount].Line#
                                End
                            Loop
                        End

                        // If not a variable declaration line. For each line, we look in the asLocalVars array,
                        // and if the variable is found we mark it as "used"
                        Else Begin
                            If (Trim(sOverstrikeLine) <> "") Begin
                                Move (SizeOfArray(asLocalVars)) to iMax
                                Decrement iMax
                                For iCounter from 0 to iMax
                                    If (asLocalVars[iCounter].bInUse = False and asLocalVars[iCounter].MethodName = sMethodName) Begin
                                        Get _IsVariableInLine of ghoRefactorFuncLib sOverstrikeLine asLocalVars[iCounter].VarName to bIsVariable
                                        If (bIsVariable = True) Begin
                                            // Mark as found
                                            Move True to asLocalVars[iCounter].bInUse
                                        End
                                    End
                                Loop
                            End
                        End
                    End

                    If (Active_State(ghoStatusPanel) = True) Begin
                        Send Update_StatusPanel of ghoStatusPanel ("Source line:" * String(sLine) * String(iLineCount + 1) * "of:" * String(iSize + 1))
                        // We only check for "Cancel" once every new file.
                        Get Cancel_Check of ghoRefactorEngine to bStop
                        If (bStop = True) Begin
                            Move iSize to iCount
                        End
                    End
                    Increment iLineCount
                Until (bMethodEnd or iCount = iSize or iLineCount >= iSize)
            End
            If (iCount < iLineCount) Begin
                Move iLineCount to iCount
            End
            If (Active_State(ghoStatusPanel) = True) Begin
                Send Update_StatusPanel of ghoStatusPanel ("Source line:" * String(sLine) * String(iCount + 1) * "of:" * String(iSize + 1))
                // We only check for "Cancel" once every new file.
                Get Cancel_Check of ghoRefactorEngine to bStop
                If (bStop = True) Begin
                    Move iSize to iCount
                End
            End
        Loop

        If (SizeOfArray(asLocalVars)) Begin
            Send RemoveUnusedVariablesFromSourceArray (&asCode) asLocalVars (&iUnusedLocalVariables)
        End

        Function_Return iUnusedLocalVariables
    End_Function

End_Class
