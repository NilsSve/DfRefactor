// *** User defined Refactor Functions *** 
//
// This file is empty by default!
// It is for adding "special case" functions that is of no general interest, but rather special 
// to the developer's source code/project.
// 
// - On the other hand; to add a function of general interest, add it to the cRefactorFuncLib.pkg instead!
// Then (after it has been registered), export those functions with the TestBench program - FuncionsExportImport.vw
// That will create a Json file that can be send to any developer, but it is highly recommended to email the 
// Json file to: SUPPORT@RDCTOOLS.COM. It will be tested by us and included into the main GitHub respository.
//
// THIS FILE IS INCLUDED INTO THE CREFACTORFUNCLIB CLASS with this line:
//     "#Include UserDefinedRefactorFunctions.pkg"
// It is important to understand that any functions defined here will be treated just like any other
// refactoring function of the cRefactorFuncLib repository when the refactoring engine is run.
// Thus, they need to follow the same rules as functions of the cRefactorFuncLib class. See "types" below.
// However, functions entered in this package will not be included in the Export/Import Json file.
//
// *** Important ***
//     - Each refactoring function defined here must also be registered!
//     - A function is registered by adding it to the Functions table.
//     - Use the "FunctionsMaintenance.vw" view of the TestBench program to add
//       new functions, help text and an optional parameter along with simple validation data.
//     - If the new refactoring function is based on a new class, add a "Use MyNewClass.pkg" to
//       the UserDefinedUseStatement.pkg file. For sample usage see: Function RestylelDDOs
//
// General guide to function interface:
//
// There are different types of refactoring functions.
// The function type governs how and when the function is
// called and with what parameters.
//
// These are the available function types and expected parameters:
// =====================================================================
//  eStandard_Function  - One source line at a time. Params: (&sLine) and sParameter
//  eRemove_Function    - One source line at a time. Params: (&sLine) and sParameter
//  eEditor_Function    - One source file as a string array. (Scintilla Editor) Params: (&asCode) and sParameter
//  eReport_Function    - One source file as a string array. No source changes! Params: (&asCode) and sParameter
//  eOther_Function     - One source file as a string array will be passed.     Params: (&asCode) and sParameter
//  eReport_FunctionAll - Makes no source changes!     Params: (&asAllSourceFiles) and sParameter
//  eOther_FunctionAll  - All files as a string array. Params: (&asAllSourceFiles) and sParameter
//
// *****************************************************************************************************