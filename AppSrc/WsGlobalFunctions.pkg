Use Windows.pkg
Use seq_chnl.pkg

// *** Struct Declarations: ***
Struct AboutSHELLEXECUTEINFO
    DWord   cbSize
    Integer fMask
    Handle  hwnd
    Pointer lpVerb
    Pointer lpFile
    Pointer lpParameters
    Pointer lpDirectory
    Integer nShow
#IFDEF IS$WIN64
    Integer iMissingAlignment1
#ENDIF
    Pointer hInstApp
    Pointer lpIDList
    Pointer lpClass
    Handle  hkeyClass
    DWord   dwHotKey
#IFDEF IS$WIN64
    Integer iMissingAlignment2
#ENDIF
    Handle  hIconMonitor // Union
    //Handle  hMonitor     // Union
    Handle  hProcess
End_Struct

Define SEE_MASK_NOCLOSEPROCESS for 64 //(0x00000040)

External_Function AboutShellExecuteEx "ShellExecuteEx" Shell32.dll Pointer pExecInfo Returns Integer

External_Function AboutWaitForSingleObject "WaitForSingleObject" Kernel32.dll ;
  Handle hHandle ;
  DWord dwMilliseconds ;
  Returns DWord

External_Function AboutCloseHandle "CloseHandle" Kernel32.dll Handle hHandle Returns Integer

// A variant of the ShellExecute Win API, but it waits until the process that is started
// (the passed program), has finished
// The DOS box does also _not_ flash briefly.
Procedure RunProgramWait Global String sProgram String sParameter
    Handle hProcess
    Integer iVoid
    AboutSHELLEXECUTEINFO sInfo

    Move (SizeOfType(AboutSHELLEXECUTEINFO)) to sInfo.cbSize

    Move SEE_MASK_NOCLOSEPROCESS to sInfo.fMask
    Move SW_SHOW                 to sInfo.nShow

    Move (AddressOf(sProgram))   to sInfo.lpFile
    Move (AddressOf(sParameter)) to sInfo.lpParameters
    // This will "hide" the DOS box from showing (no flasing box):
    Move 0                       to sInfo.nShow

    Move (AboutShellExecuteEx(AddressOf(sInfo))) to iVoid
    Move sInfo.hProcess to hProcess
    If (hProcess) Begin
        Move (AboutWaitForSingleObject(hProcess, -1)) to iVoid
        Move (AboutCloseHandle(hProcess)) to iVoid
    End
End_Procedure

Function OpenOutput Global String sFileName Returns Integer
    Integer iCh

    Get Seq_New_Channel to iCh
    If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
        Error DFERR_PROGRAM "DF_SEQ_CHANNEL_NOT_AVAILABLE"
        Function_Return DF_SEQ_CHANNEL_NOT_AVAILABLE
    End
    Direct_Output channel iCh sFileName
    Function_Return iCh
End_Function

Procedure CloseOutput Global Integer iCh
    Close_Output channel iCh
    Send Seq_Release_Channel iCh
End_Procedure

Function OpenInput Global String sFileName Returns Integer
    Integer iCh

    Get Seq_New_Channel to iCh
    If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
        Error DFERR_PROGRAM "DF_SEQ_CHANNEL_NOT_AVAILABLE"
        Function_Return DF_SEQ_CHANNEL_NOT_AVAILABLE
    End
    Direct_Input channel iCh sFileName
    Function_Return iCh
End_Function

Procedure CloseInput Global Integer iCh
    Close_Input channel iCh
    Send Seq_Release_Channel iCh
End_Procedure

Function OpenAppendOutput Global String sFileName Returns Integer
    Integer iCh

    Get Seq_New_Channel to iCh
    If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
        Error DFERR_PROGRAM "DF_SEQ_CHANNEL_NOT_AVAILABLE"
        Function_Return DF_SEQ_CHANNEL_NOT_AVAILABLE
    End
    Append_Output channel iCh sFileName
    Function_Return iCh
End_Function

Procedure CloseAppendOutput Global Integer iCh
    Close_Input channel iCh
    Send Seq_Release_Channel iCh
End_Procedure
