Alpha testing info for the DFRefactor project:
==========================================
- Either download the zip-file from GitHub: "https://github.com/NilsSve/DfRefactor", or select to make a clone. Both options are available from the GitHub "<> Code" button.
- If you don't already use a Git client, it is highly recommended to use the free "GitHub Desktop", which is a UI tool to sit on your computers desktop and it constantly checks for changes.

- Unzip the DataDistrib.zip to the Data folder.
-Reindex all files if you are using another collating sequence then "English".
- Unzip the AppSrcManifestFiles.zip to the AppSrc folder.

- Either use the GitHub "Issues" and "Discussions" pages for bug reports and/or ideas. Or email Nils at nils.svedmyr@gmail.com

- The help is not expected to be updated until the beta-phase. The local help file might need a little attention, as it has been downloaded from the internet. Right-click, properties, uncheck the "yada, yada internet file yada yada" There is also an on-line version of the help.

- Leave all project settings as they are (most importantly the 32-bit and manifest settings)
- Do not use the DFRefactor program at this stage.

- The two main programs are TestBench, and if source code for the project has changed; DFUnit_TestRunner - to make sure the change doesn't effect anything else in the project.
- Focus mainly on the TestBench program. Note that you can make a selection of which refactoring functions to run - from the "Functions List" tab page.

- The left-hand side editor's file is by default set to "LegacyCode.pkg"
- The right-hand side editor's file will always be named "RefactoredCode.pkg".
- You can add, insert or replace any code you like to test in the LegacyCode.pkg file.

- Press Ctrl+F5 to start refactoring.
- Then you can also press F5 to compiled the refactored code. The RefactoredCode.pkg will be included into a dummy program named "CompiledRefactoredCode.src".
- A successful compilation is a good verification that the refactoring didn't do anything crazy. That is the reason you see some silly stuff in the standard LegacyCode.pkg, the idea is to be able to compile the code.
- If any errors occurs during a compilation, an error dialog will be shown with all errors. Just double-click or hit enter on any error line to take you to the source code line in the RefactoredCode.pkg file.

- You can also setup a file comparison tool, like e.g. "Beyond Comparison".

- You can drag & drop a source file on to the left hand-side editor in the TestBench. Note that any changes you make to the left-hand side editor will be saved to the original file. However, any refactoring will *only* be saved to RefactoredCode.pkg a.k.a the right-hand side editor. No backups are made by the TestBench program.

- All refactoring functions can be found in the main code repository "cRefactorFuncLib.pkg", which is based on the cBasicFuncLib class.
- All refactoring functions in "cRefactorFuncLib.pkg" must also be registered in the "Functions" data-table, this is what makes up the "Function List" that can be selected from in both the TestBench and the DFRefactor program. Editing of those data records, can only be made in the TestBench program, "Function Maintenance" as that program is expected to be used by experienced developers only. Most developers will probably only be using the DFRefactor program, after release.

- The TestBench program has an Export/Import fascility. The export/import is done through a json file. The idea is to make it easy to exchange code changes between two developers, without the need to go through GitHub.
